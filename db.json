{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/img/composer-1-3.png","path":"img/composer-1-3.png","modified":1,"renderable":0},{"_id":"source/img/chat.png","path":"img/chat.png","modified":1,"renderable":0},{"_id":"source/img/composer-1-1.png","path":"img/composer-1-1.png","modified":1,"renderable":0},{"_id":"source/img/composer-1-4.png","path":"img/composer-1-4.png","modified":1,"renderable":0},{"_id":"source/img/composer-1-8.png","path":"img/composer-1-8.png","modified":1,"renderable":0},{"_id":"source/img/composer-1-5.png","path":"img/composer-1-5.png","modified":1,"renderable":0},{"_id":"source/img/composer-1-9.png","path":"img/composer-1-9.png","modified":1,"renderable":0},{"_id":"source/img/composer-2-1.png","path":"img/composer-2-1.png","modified":1,"renderable":0},{"_id":"source/img/composer-2-2.png","path":"img/composer-2-2.png","modified":1,"renderable":0},{"_id":"source/img/composer-3-1.png","path":"img/composer-3-1.png","modified":1,"renderable":0},{"_id":"source/img/composer-3-2.png","path":"img/composer-3-2.png","modified":1,"renderable":0},{"_id":"source/img/git-install.jpg","path":"img/git-install.jpg","modified":1,"renderable":0},{"_id":"source/img/git_menu.png","path":"img/git_menu.png","modified":1,"renderable":0},{"_id":"source/img/headimg.jpg","path":"img/headimg.jpg","modified":1,"renderable":0},{"_id":"source/img/github_ssh.png","path":"img/github_ssh.png","modified":1,"renderable":0},{"_id":"source/img/install-node-msi-version-on-windows-step5.png","path":"img/install-node-msi-version-on-windows-step5.png","modified":1,"renderable":0},{"_id":"source/img/new_repository.png","path":"img/new_repository.png","modified":1,"renderable":0},{"_id":"source/img/node-version.png","path":"img/node-version.png","modified":1,"renderable":0},{"_id":"source/img/screenshot_1513006093776.png","path":"img/screenshot_1513006093776.png","modified":1,"renderable":0},{"_id":"source/img/ssh_dir.png","path":"img/ssh_dir.png","modified":1,"renderable":0},{"_id":"source/img/ssh_gen.png","path":"img/ssh_gen.png","modified":1,"renderable":0},{"_id":"source/img/ssh_pwd.png","path":"img/ssh_pwd.png","modified":1,"renderable":0},{"_id":"source/img/ssh_key_dir.png","path":"img/ssh_key_dir.png","modified":1,"renderable":0},{"_id":"source/img/username_git.png","path":"img/username_git.png","modified":1,"renderable":0},{"_id":"source/img/view_count.png","path":"img/view_count.png","modified":1,"renderable":0},{"_id":"source/img/wechat.png","path":"img/wechat.png","modified":1,"renderable":0},{"_id":"source/img/composer-1-2.png","path":"img/composer-1-2.png","modified":1,"renderable":0},{"_id":"source/img/composer-1-6.png","path":"img/composer-1-6.png","modified":1,"renderable":0},{"_id":"source/img/composer-1-7.png","path":"img/composer-1-7.png","modified":1,"renderable":0},{"_id":"source/img/screenshot_1513006588835.png","path":"img/screenshot_1513006588835.png","modified":1,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"source/img/daovoice.png","path":"img/daovoice.png","modified":1,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/clicklove.js","path":"js/src/clicklove.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"2f8c0a0202603146b863fc047a4cedb42367cb84","modified":1554818523290},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1554818523332},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1554818523332},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1554818523332},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1554818523333},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1554818523333},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1554818523333},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1554818523333},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1554818523333},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1554818523333},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1554818523333},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1554818523333},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1554818523333},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1554818523334},{"_id":"themes/next/_config.yml","hash":"c6da636401bbdf033368ea0d6b94855b7daebd2e","modified":1554818523334},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1554818523334},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1554818523350},{"_id":"source/_posts/algorithm.md","hash":"b7626b2471dc66236fc83f97663829b989576e5e","modified":1554818523291},{"_id":"source/_posts/behavioral_patterns.md","hash":"9fbff4dc5d657d3de43806321eec832f473371e3","modified":1554820302289},{"_id":"source/_posts/blog.md","hash":"c55a1229c8909abe0582160399d1b950c090f583","modified":1554818523291},{"_id":"source/_posts/blog_view.md","hash":"95089f56fb36778fc90f81659786c7555f482291","modified":1554818523291},{"_id":"source/_posts/change_do_hexo.md","hash":"859d5a3f3e9c7cbf2201bf6b9ee649096b1ab2b9","modified":1554818523292},{"_id":"source/_posts/clickheart.md","hash":"d91c9c3e48a7b77da664eb3e3a92efbf36e2cd19","modified":1554818523292},{"_id":"source/_posts/composer-2.md","hash":"657ba196f08f30ab4dc3c13da0b4939df8b5222a","modified":1554818523292},{"_id":"source/_posts/composer-1.md","hash":"9c31fcf2fb3eacf5571658f5e7f9debb10434365","modified":1554818523292},{"_id":"source/_posts/composer-3.md","hash":"e56769c100479c2cef222dcdb8ebf5024c822647","modified":1554818523292},{"_id":"source/_posts/connect.md","hash":"ae60ecd063590c597cc58f8ff81ed0079cdffb32","modified":1554818523293},{"_id":"source/_posts/create-blog.md","hash":"2e2f1d018edb80b5d9e5c54e0cb90201762fe9f8","modified":1554818523293},{"_id":"source/_posts/git_recover_branch.md","hash":"2ab109744f69b7b3e092124f591565577b440b3d","modified":1554818523293},{"_id":"source/_posts/design_patterns.md","hash":"ab3baedec611f126882a99e72561f0e94c9cdcdc","modified":1554820322790},{"_id":"source/_posts/creational_patterns.md","hash":"0dedee7d9d33f2af33d48beb246d1e70f5ab62b8","modified":1554820290571},{"_id":"source/_posts/hexo_new_blog.md","hash":"6c2f3d33a425d1427ee7be629ba6a9786c1380c5","modified":1554818523293},{"_id":"source/_posts/hexo_change_system.md","hash":"7de959db5d7a3876b5992eac71406975b7e1a05f","modified":1554819438641},{"_id":"source/_posts/hexo_next_end.md","hash":"447424dcc3fd4292b54c77173baefd0e5e49bc19","modified":1554818523293},{"_id":"source/_posts/js_1.md","hash":"c63920b60a1c1a4551e7e97b7f9883f88a0deb34","modified":1554818523294},{"_id":"source/_posts/js_2.md","hash":"c31043c61c377e889a619f3574ad9c0f2da2d483","modified":1554820387058},{"_id":"source/_posts/js_3.md","hash":"4a0ee0ea7f29a2a2ce40fc2b040f0c8afc8d788a","modified":1554820376349},{"_id":"source/_posts/js_5.md","hash":"cd97ffa33273fd883a5c7598aeb23fb35c503cb6","modified":1554820355759},{"_id":"source/_posts/js_4.md","hash":"01163594e6e36f90cbf88a9d74eb8c4ad8f8513d","modified":1554820367203},{"_id":"source/_posts/mysql_calculate.md","hash":"db0321aef0fac84c1d62351e3562c27149ccf171","modified":1554820140189},{"_id":"source/_posts/mysql_condition.md","hash":"e1f91c6303022d5ab1b172fa648b3969c563cb90","modified":1554820110770},{"_id":"source/_posts/mysql_dba.md","hash":"81a6e79076da2f7e9681d24a80e548eafaa2a93e","modified":1554820162108},{"_id":"source/_posts/mysql_operation.md","hash":"c70acf5ec3f6af0b7d07c1329ddce23eb39f87e9","modified":1554820184651},{"_id":"source/_posts/mysql_key.md","hash":"6da3aa250405f82d151b3d80cb52f10e7f2c2a78","modified":1554819999626},{"_id":"source/_posts/server_port.md","hash":"8a7a37ff91b892f25867d1e34de76b3d2e4b2732","modified":1554820342725},{"_id":"source/_posts/ssh_key.md","hash":"ec59e4e6ff208fd5882fc764374e4e636931f1a7","modified":1554818523296},{"_id":"source/_posts/mysql_index.md","hash":"c914013afe457f5844bb650d34d2bb5a62714b32","modified":1554820075236},{"_id":"source/about/index.md","hash":"0e876cf4fa8d79c52d3e0870570b2fa980cc01cf","modified":1554818523296},{"_id":"source/categories/index.md","hash":"401a2f4634f46e05c9df434df5127993215b5015","modified":1554818523296},{"_id":"source/_posts/structrual_patterns.md","hash":"972478fd7028cc84cbb4e042ed8a4fe6f0028da2","modified":1554820214897},{"_id":"source/img/composer-1-3.png","hash":"3f3c98ea41c9abd1173b3025077eda09ef2d6d28","modified":1554818523298},{"_id":"source/img/chat.png","hash":"1f343ae1e102fcc0d69072dbe4089adaf32e3326","modified":1554818523297},{"_id":"source/img/composer-1-1.png","hash":"7233eefbeb80c53f01e3d2079878ca586569eb78","modified":1554818523297},{"_id":"source/img/composer-1-4.png","hash":"0433b350de4a28284fe45879c3887c498d305ea7","modified":1554818523298},{"_id":"source/img/composer-1-8.png","hash":"391ebeaf5b4f5074e8a54293fa06cc06150aa6a8","modified":1554818523300},{"_id":"source/img/composer-1-5.png","hash":"cd5f5e804e8ed162d08602611a5c9ef75e00981c","modified":1554818523299},{"_id":"source/img/composer-1-9.png","hash":"2789235f22f948373e91e2faf94496ba60926dd8","modified":1554818523301},{"_id":"source/img/composer-2-1.png","hash":"e63bada201cf4011fd89b7d63395c0529b4d2524","modified":1554818523301},{"_id":"source/img/composer-2-2.png","hash":"3d11fd17c09c792b2f0dce205038d538d794f854","modified":1554818523302},{"_id":"source/img/composer-3-1.png","hash":"d32b53d60f1aebc9e0ba929a7c386a4906226b9b","modified":1554818523302},{"_id":"source/img/composer-3-2.png","hash":"520681ceda967b92c9f02852689bff3f13e3f993","modified":1554818523302},{"_id":"source/img/git-install.jpg","hash":"ed7b03a67eb3a9e6ae86588343fad08cf299e538","modified":1554818523304},{"_id":"source/img/git_menu.png","hash":"8e6c45b20929602e69460f3f44c2a9b2b14496d5","modified":1554818523304},{"_id":"source/img/headimg.jpg","hash":"f95ce8da7845cd0909aac66b00c4f24dbccd0b7e","modified":1554818523305},{"_id":"source/img/github_ssh.png","hash":"40172f812a2230e4ca2d5967158391e4a5c6fedd","modified":1554818523305},{"_id":"source/img/install-node-msi-version-on-windows-step5.png","hash":"2c0a6285f736ada4cf4cf7715f2b6e703c50f8f1","modified":1554818523305},{"_id":"source/img/new_repository.png","hash":"934fde34afd7a0b80fa7ca37b12502f08adab25e","modified":1554818523306},{"_id":"source/img/node-version.png","hash":"35509019cbe3c1dfd397d8408df576abed0b8f42","modified":1554818523307},{"_id":"source/img/screenshot_1513006093776.png","hash":"602c4750dc697aa4ea855bf2d12d5a9afb99e08f","modified":1554818523307},{"_id":"source/img/ssh_dir.png","hash":"a5526de3bdd9e14504e553983908c6a13baa7c5d","modified":1554818523309},{"_id":"source/img/ssh_gen.png","hash":"a4c9683d28fbc5261d431e3ea82465ff2c265df7","modified":1554818523309},{"_id":"source/img/ssh_pwd.png","hash":"06d3dec0cb1c3b658c9383843a277aa3d746a783","modified":1554818523310},{"_id":"source/img/ssh_key_dir.png","hash":"3d214951ae72043cfaeb7788203f15c9b9e475d5","modified":1554818523310},{"_id":"source/img/username_git.png","hash":"2e61786fef52854afa9961f0b83353f9acdcb7f0","modified":1554818523310},{"_id":"source/img/view_count.png","hash":"b2abe728aa1d20c64657b07434808c6629f20798","modified":1554818523311},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1554818523332},{"_id":"source/tags/index.md","hash":"b34af978c2bd9f455f10601aeee8c6a8f1e83c3d","modified":1554818523311},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1554818523332},{"_id":"source/img/wechat.png","hash":"f74d7de7f71624010c6aa31cec752151f8805e20","modified":1554818523311},{"_id":"themes/next/languages/default.yml","hash":"4cc6aeb1ac09a58330e494c8771773758ab354af","modified":1554818523334},{"_id":"themes/next/languages/en.yml","hash":"e7def07a709ef55684490b700a06998c67f35f39","modified":1554818523334},{"_id":"themes/next/languages/de.yml","hash":"306db8c865630f32c6b6260ade9d3209fbec8011","modified":1554818523334},{"_id":"themes/next/languages/fr-FR.yml","hash":"24180322c83587a153cea110e74e96eacc3355ad","modified":1554818523334},{"_id":"themes/next/languages/id.yml","hash":"2835ea80dadf093fcf47edd957680973f1fb6b85","modified":1554818523334},{"_id":"themes/next/languages/ja.yml","hash":"1c3a05ab80a6f8be63268b66da6f19da7aa2c638","modified":1554818523334},{"_id":"themes/next/languages/ko.yml","hash":"be150543379150f78329815af427bf152c0e9431","modified":1554818523335},{"_id":"themes/next/languages/pt.yml","hash":"36c8f60dacbe5d27d84d0e0d6974d7679f928da0","modified":1554818523335},{"_id":"themes/next/languages/pt-BR.yml","hash":"958e49571818a34fdf4af3232a07a024050f8f4e","modified":1554818523335},{"_id":"themes/next/languages/ru.yml","hash":"7462c3017dae88e5f80ff308db0b95baf960c83f","modified":1554818523335},{"_id":"themes/next/languages/zh-Hans.yml","hash":"3c0c7dfd0256457ee24df9e9879226c58cb084b5","modified":1554818523335},{"_id":"themes/next/languages/zh-tw.yml","hash":"0b2c18aa76570364003c8d1cd429fa158ae89022","modified":1554818523335},{"_id":"themes/next/languages/zh-hk.yml","hash":"1c917997413bf566cb79e0975789f3c9c9128ccd","modified":1554818523335},{"_id":"themes/next/layout/_layout.swig","hash":"28ba7a21a5c562aa28256a71896dfcdfb46ae9dd","modified":1554818523337},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1554818523349},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1554818523349},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1554818523349},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1554818523349},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1554818523350},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1554818523350},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1554818523350},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1554818523350},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1554818523351},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1554818523404},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1554818523404},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1554818523405},{"_id":"source/img/composer-1-2.png","hash":"8216cd498b5a18cc4efcd2057fd66117864616d0","modified":1554818523298},{"_id":"source/img/composer-1-6.png","hash":"108206a62e0409d640772957c10886e7c0cd6c73","modified":1554818523299},{"_id":"source/img/composer-1-7.png","hash":"d222ee82fca796f6d81ab1e96e5ac361a8952889","modified":1554818523300},{"_id":"source/img/screenshot_1513006588835.png","hash":"d6eea77b61f0914383db838d04f7ef22383d83a5","modified":1554818523308},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554818523384},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1554818523337},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1554818523337},{"_id":"themes/next/layout/_macro/passage-end-tag.swig","hash":"b759e9b27ffb92f9c826ae2b2527636a2ae65fac","modified":1554818523337},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1554818523338},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"b16fcbf0efd20c018d7545257a8533c497ea7647","modified":1554818523338},{"_id":"themes/next/layout/_macro/post.swig","hash":"cafb5655ccfed4d6e087c4a9ca1e5f571ddebc48","modified":1554818523338},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1554818523338},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1554818523338},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1554818523338},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1554818523339},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1554818523339},{"_id":"themes/next/layout/_partials/footer.swig","hash":"d3731523afdcd7750ca122f04f9159f97dc48223","modified":1554818523339},{"_id":"themes/next/layout/_partials/head.swig","hash":"0c88268ace39f6b93007d91d43fa7a03f3e0abfa","modified":1554818523339},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1554818523340},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1554818523340},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1554818523341},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1554818523341},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1554818523343},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1554818523343},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1554818523343},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1554818523349},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1554818523351},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1554818523351},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1554818523351},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1554818523352},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1554818523352},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1554818523353},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1554818523384},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1554818523384},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1554818523385},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554818523384},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1554818523385},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1554818523386},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1554818523387},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1554818523387},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1554818523387},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554818523388},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554818523388},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1554818523388},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1554818523387},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554818523388},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1554818523388},{"_id":"source/img/daovoice.png","hash":"91c8fc9d1187729416e8a54bb1126d88922aae2c","modified":1554818523303},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554818523344},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554818523343},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554818523365},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554818523365},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554818523366},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554818523382},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1554818523383},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1554818523336},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1554818523336},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1554818523340},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1554818523340},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1554818523341},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1554818523341},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1554818523341},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1554818523342},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1554818523342},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1554818523342},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1554818523342},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1554818523344},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1554818523343},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1554818523344},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1554818523346},{"_id":"themes/next/layout/_scripts/third-party/exturl.swig","hash":"8e20dd2078d7dfdf4a5a6daa142bb94d002300f5","modified":1554818523348},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1554818523348},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1554818523348},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1554818523348},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1554818523348},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1554818523349},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1554818523365},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1554818523366},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1554818523366},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1554818523383},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1554818523382},{"_id":"themes/next/source/css/_variables/base.styl","hash":"28a7f84242ca816a6452a0a79669ca963d824607","modified":1554818523383},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1554818523388},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1554818523389},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1554818523389},{"_id":"themes/next/source/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1554818523389},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1554818523389},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1554818523389},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1554818523389},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1554818523389},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1554818523390},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1554818523389},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1554818523390},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554818523392},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1554818523394},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1554818523394},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1554818523394},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1554818523395},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1554818523394},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1554818523395},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1554818523395},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1554818523395},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1554818523395},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1554818523401},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1554818523400},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1554818523402},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1554818523401},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1554818523402},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1554818523402},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1554818523402},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1554818523402},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1554818523403},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554818523404},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554818523404},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554818523404},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554818523401},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1554818523344},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1554818523344},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1554818523344},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1554818523344},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1554818523345},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1554818523345},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1554818523345},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1554818523345},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1554818523346},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1554818523346},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1554818523346},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1554818523347},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1554818523347},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1554818523347},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1554818523347},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1554818523353},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1554818523355},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1554818523355},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1554818523354},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1554818523355},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1554818523358},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1554818523364},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1554818523364},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1554818523365},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1554818523365},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1554818523365},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1554818523367},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1554818523365},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1554818523367},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1554818523362},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1554818523368},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1554818523367},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1554818523368},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1554818523368},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1554818523368},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1554818523373},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1554818523375},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1554818523373},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1554818523372},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1554818523375},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1554818523378},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"1eb34b9c1f6d541605ff23333eeb133e1c4daf17","modified":1554818523379},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1554818523380},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1554818523381},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1554818523380},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1554818523381},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1554818523389},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554818523392},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554818523392},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554818523392},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554818523392},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554818523392},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1554818523393},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1554818523394},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1554818523394},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1554818523394},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1554818523395},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554818523396},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1554818523402},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1554818523402},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554818523392},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1554818523393},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554818523395},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1554818523356},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1554818523355},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1554818523356},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1554818523356},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1554818523356},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1554818523356},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1554818523356},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1554818523356},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1554818523357},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1554818523357},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1554818523357},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1554818523357},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1554818523357},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1554818523358},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1554818523358},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1554818523358},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1554818523358},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1554818523358},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1554818523359},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1554818523359},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1554818523359},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"b25132fe6a7ad67059a2c3afc60feabb479bdd75","modified":1554818523359},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1554818523360},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1554818523359},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1554818523360},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1554818523359},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"8c0276883398651336853d5ec0e9da267a00dd86","modified":1554818523360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"9a64f8c60e6149500792557d57b9fa3dc3f04cb2","modified":1554818523360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1554818523360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1554818523361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1554818523360},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1554818523361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1554818523361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1554818523361},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1554818523361},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1554818523361},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1554818523362},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1554818523362},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1554818523362},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1554818523362},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1554818523362},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"dd310c2d999185e881db007360176ee2f811df10","modified":1554818523363},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1554818523363},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1554818523363},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1554818523363},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1554818523363},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1554818523364},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1554818523364},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1554818523364},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1554818523364},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1554818523369},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554818523370},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1554818523377},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554818523393},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1554818523393},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1554818523393},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1554818523393},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1554818523393},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1554818523393},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554818523400},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554818523400},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554818523397},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554818523399},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554818523396},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554818523403},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1554818523391},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1554818523399},{"_id":"public/atom.xml","hash":"f111f1f40e0841ce0f1e3202f7a1e66a33a2dc11","modified":1554821169306},{"_id":"public/search.xml","hash":"d97ca5391336657804742cea4d44326ad4017db9","modified":1554821169331},{"_id":"public/post-sitemap.xml","hash":"a1fb9d43564d9cfb2f1df2dbc33bd52041c3f348","modified":1554821169332},{"_id":"public/page-sitemap.xml","hash":"10017ffd12990454059864ab46d525f5fa0938e7","modified":1554821169332},{"_id":"public/category-sitemap.xml","hash":"3dee2b503927c8a2951f2e4c08a9c1fd15dfd93e","modified":1554821169332},{"_id":"public/tag-sitemap.xml","hash":"16fe51aee2a39ba187cf8d35263145b27eb8f816","modified":1554821169332},{"_id":"public/sitemap.xsl","hash":"4321fa69dc1b8811d32b7a1478e5603e038cea1a","modified":1554821169332},{"_id":"public/sitemap.xml","hash":"c01ae8dea140bd3c5fab0a163c910d81a01dfa47","modified":1554821169332},{"_id":"public/404.html","hash":"3cfd39657d70a430633d1f27440f76ec7e7a3425","modified":1554821169339},{"_id":"public/about/index.html","hash":"33549812a98ea08328ce7f3c57a27900266d75ab","modified":1554821169339},{"_id":"public/categories/index.html","hash":"c3ac3a9bda3e04476608ff479f44d9a71e966b6b","modified":1554821169339},{"_id":"public/tags/index.html","hash":"478e29c7ced2ddc723cb51109c122d761ce9072c","modified":1554821169339},{"_id":"public/2018/07/15/mysql_key/index.html","hash":"870cfb8f62a15d1c454e7c8e2fa7dca54fcb327e","modified":1554821169339},{"_id":"public/2018/07/15/mysql_index/index.html","hash":"a8f517724d026145eff4dc47fcf3345d97504f36","modified":1554821169339},{"_id":"public/2018/07/07/mysql_condition/index.html","hash":"c026215f8e6543d6b5b97a39d5af4e53718b872d","modified":1554821169339},{"_id":"public/2018/07/07/mysql_calculate/index.html","hash":"771d396030c4d80b448f54971067c91efbbb5bdb","modified":1554821169339},{"_id":"public/2018/07/07/mysql_dba/index.html","hash":"f773ed1c6c276983f0a5f40c58ad43572cc0c4ad","modified":1554821169339},{"_id":"public/2018/07/07/mysql_operation/index.html","hash":"48cff310d7907252338198fdb34c0d041f112a8f","modified":1554821169339},{"_id":"public/2018/07/01/behavioral_patterns/index.html","hash":"3e2d898955f48fc50729fd6bf5d18f745517ad5b","modified":1554821169339},{"_id":"public/2018/06/17/structrual_patterns/index.html","hash":"3629bdbe0422f3cc6ce6e394feaa5a3da1df9d42","modified":1554821169340},{"_id":"public/2018/06/16/creational_patterns/index.html","hash":"b97d8a7e1f6e35115ac4314a93a5d8298963df71","modified":1554821169340},{"_id":"public/2018/06/16/design_patterns/index.html","hash":"1cee31d6cf01edfbc67c390b100cd9ac74b84d8e","modified":1554821169340},{"_id":"public/2018/06/10/server_port/index.html","hash":"78b981fd4e922b5a90a3c682620ec2d49f171c54","modified":1554821169340},{"_id":"public/2018/05/20/js_5/index.html","hash":"d362151492223b215c3499319f69c4f2c6da0d22","modified":1554821169340},{"_id":"public/2018/05/13/js_4/index.html","hash":"cfd3595a7c44ca13e7a49ed31c7e3133de9d59c1","modified":1554821169340},{"_id":"public/2018/05/05/js_3/index.html","hash":"610d423e7730273f21befee9f92a80af7a14d5f5","modified":1554821169340},{"_id":"public/2018/05/01/js_2/index.html","hash":"3a953a726c9425d69dc32711f249f29d2b89c199","modified":1554821169340},{"_id":"public/2018/04/21/js_1/index.html","hash":"c87b3914c9e236465cee8a5960fa09c19de27538","modified":1554821169340},{"_id":"public/2018/04/04/change_do_hexo/index.html","hash":"0922fd597f7d856efe637086c78c3a566c1d6b6e","modified":1554821169340},{"_id":"public/2018/03/28/git_recover_branch/index.html","hash":"a0ff2878c4d2d4eeff391a5a00584f871e7fffa6","modified":1554821169340},{"_id":"public/2018/03/27/ssh_key/index.html","hash":"0a79f371020e67e5eadb1d5a6a7d4792e16813fb","modified":1554821169340},{"_id":"public/2018/02/13/algorithm/index.html","hash":"7a845dd455ac1cc5869333fb0ab7db6bafc19d67","modified":1554821169340},{"_id":"public/2017/04/21/composer-2/index.html","hash":"9ce4b462a2ec78b6ba8b2d9c078c688191f0ecd3","modified":1554821169341},{"_id":"public/2017/04/21/composer-1/index.html","hash":"56475b0813c639f4bba728c9face413371160f4d","modified":1554821169341},{"_id":"public/2017/04/21/composer-3/index.html","hash":"46924945adf6ac5d603dbabe5cc2296c0a0515d7","modified":1554821169341},{"_id":"public/2017/04/20/connect/index.html","hash":"073f6764d06d27702a07d5931da33bd4dfa3c044","modified":1554821169341},{"_id":"public/2017/04/19/blog_view/index.html","hash":"f7c4389060395fb027290586e0a81aca9a83e917","modified":1554821169341},{"_id":"public/2017/04/18/hexo_next_end/index.html","hash":"3e85cf95a9db830d4c4818c6f64e96ec9feb36d2","modified":1554821169341},{"_id":"public/2017/04/17/clickheart/index.html","hash":"1918e5f06fc57e79342b44064c2d688ef4edbc90","modified":1554821169341},{"_id":"public/2017/03/20/hexo_change_system/index.html","hash":"9afea8bc315431f5d98840d2a753ae6926829fd2","modified":1554821169341},{"_id":"public/2017/03/19/hexo_new_blog/index.html","hash":"a1dfe6b1a57ddc779be5f73083cf98fad4245fb9","modified":1554821169341},{"_id":"public/2017/03/18/create-blog/index.html","hash":"77fd4cd4800aaf87109c93eee35b1261d968cdc6","modified":1554821169341},{"_id":"public/2017/03/17/blog/index.html","hash":"eb0cfa6d33c2db22cdcd0f0dc5228c93cdae56fe","modified":1554821169341},{"_id":"public/archives/index.html","hash":"e1f1a5be28b0def0a8b00f525a8febb7c11fd0e8","modified":1554821169343},{"_id":"public/archives/page/2/index.html","hash":"af954ed4e87c56020f95b2497ccd2eb6ae5c245a","modified":1554821169343},{"_id":"public/archives/page/3/index.html","hash":"4364120b88652f9f40eba8880b4cdcb50a0b0436","modified":1554821169343},{"_id":"public/archives/page/4/index.html","hash":"cd7fb9f522667e1945cf5556b24530a888db72b4","modified":1554821169343},{"_id":"public/archives/2017/index.html","hash":"f7d178fb8e236856c42f72b87125a24b59e377a8","modified":1554821169343},{"_id":"public/archives/2017/page/2/index.html","hash":"5184ca54b597fe1c595dc687a86410001d1fdcdc","modified":1554821169343},{"_id":"public/archives/2017/03/index.html","hash":"0266df0418265abfe91f9c78fff87417ac59e7d2","modified":1554821169343},{"_id":"public/archives/2017/04/index.html","hash":"a622c87cfba5e8e55b18276208d55a65dbd84ab4","modified":1554821169343},{"_id":"public/archives/2018/index.html","hash":"5c12dde63523a9ac6ba0ac5fa8010465265fe8a2","modified":1554821169343},{"_id":"public/archives/2018/page/2/index.html","hash":"2a66ed9343ebbd84a167c4564116b7c5a3abf0ab","modified":1554821169343},{"_id":"public/archives/2018/02/index.html","hash":"77fcf40ab9ea6cfdcee494f115b8d5194d3ac5cf","modified":1554821169343},{"_id":"public/archives/2018/03/index.html","hash":"004aa60b2b6c552a084a05849cc45bce0e54a58f","modified":1554821169343},{"_id":"public/archives/2018/04/index.html","hash":"0ac5f0e1e4a0aaecf3fe47057c4f2ce600ff25f8","modified":1554821169343},{"_id":"public/archives/2018/05/index.html","hash":"0a49a53e769e1535daffe4de9162da528f043aa7","modified":1554821169343},{"_id":"public/archives/2018/06/index.html","hash":"efbd307f843e3db01f35c98949defd80aa14452a","modified":1554821169343},{"_id":"public/archives/2018/07/index.html","hash":"281f37a6b2df84dce2143c3ee3f8b647baf5912e","modified":1554821169343},{"_id":"public/index.html","hash":"1a2e80c7c09f662246045db6873e1ea5cb92480b","modified":1554821169343},{"_id":"public/page/2/index.html","hash":"4fc5c15c9ed8874bb71886dfabf1672ff7e4f189","modified":1554821169343},{"_id":"public/page/3/index.html","hash":"82bd7d2bb0de69340ea57c25c00462a69c0d2815","modified":1554821169344},{"_id":"public/page/4/index.html","hash":"7e40690821c47eef089d5073d02507e3287c0cdc","modified":1554821169344},{"_id":"public/categories/算法与结构/index.html","hash":"0ec52705f03ea251254447d0abf745ba98752764","modified":1554821169344},{"_id":"public/categories/博客思维/index.html","hash":"a830ae8bdda2a431aaaea585807efa2a382c9830","modified":1554821169344},{"_id":"public/categories/搭建博客/index.html","hash":"a02a11a99f8df866c2ee7f227c1158d1303860a1","modified":1554821169344},{"_id":"public/categories/composer使用/index.html","hash":"811a3bdd4d94007c7b7f54c586ae72fdf0a28c0c","modified":1554821169344},{"_id":"public/categories/GIT/index.html","hash":"22890519cd6b35580ea7ef110eb6318cc5a6d12e","modified":1554821169344},{"_id":"public/categories/设计模式/index.html","hash":"34d1af92ed62987587679ebdca5c9ffa1b586df4","modified":1554821169344},{"_id":"public/categories/jQuery/index.html","hash":"f2e287343ee18cfd418a159bd8f3d2424fbc3f8d","modified":1554821169344},{"_id":"public/categories/MySQL/index.html","hash":"d0449eccea7646256797545f6d2fd37cf8810ca7","modified":1554821169344},{"_id":"public/categories/服务器/index.html","hash":"847fe9353a8a5cb4bd6c04fdf6100555246080fa","modified":1554821169344},{"_id":"public/tags/算法/index.html","hash":"bb4c21efd4e66442769822c5cc27619d15aab18e","modified":1554821169344},{"_id":"public/tags/结构/index.html","hash":"ff814b251311a7f66095718185e473b3efa3ad05","modified":1554821169344},{"_id":"public/tags/Article/index.html","hash":"986de5714125b5f02cc7246707a11d2dedda8b2c","modified":1554821169344},{"_id":"public/tags/hexo/index.html","hash":"698581ee393141bcb3ccf92b2fa4c1f3b9178cdb","modified":1554821169344},{"_id":"public/tags/next/index.html","hash":"d5a736fbccb6aeb6eab708f6630a5c05713f195b","modified":1554821169344},{"_id":"public/tags/Composer/index.html","hash":"49bc0884ee110818ee807950a2cb9c365251ba81","modified":1554821169344},{"_id":"public/tags/GIT/index.html","hash":"f30830736f7dc0ccf7520ae8245934157f2b8f08","modified":1554821169344},{"_id":"public/tags/设计模式/index.html","hash":"9efc453ffc6d4a962a73e3f6aa704e10a3af30c6","modified":1554821169345},{"_id":"public/tags/Web前端/index.html","hash":"d687288992373720ad8bc0bc7875547e8212852f","modified":1554821169345},{"_id":"public/tags/数据库/index.html","hash":"161b686bf961a4c38d8b220e199e4493009f4595","modified":1554821169345},{"_id":"public/tags/运维/index.html","hash":"ebcd97e3497e41ca9e2088d45f566fa9ad9c6562","modified":1554821169345},{"_id":"public/img/composer-1-1.png","hash":"7233eefbeb80c53f01e3d2079878ca586569eb78","modified":1554821169358},{"_id":"public/img/composer-1-4.png","hash":"0433b350de4a28284fe45879c3887c498d305ea7","modified":1554821169358},{"_id":"public/img/composer-1-8.png","hash":"391ebeaf5b4f5074e8a54293fa06cc06150aa6a8","modified":1554821169358},{"_id":"public/img/composer-1-5.png","hash":"cd5f5e804e8ed162d08602611a5c9ef75e00981c","modified":1554821169358},{"_id":"public/img/composer-2-1.png","hash":"e63bada201cf4011fd89b7d63395c0529b4d2524","modified":1554821169358},{"_id":"public/img/composer-2-2.png","hash":"3d11fd17c09c792b2f0dce205038d538d794f854","modified":1554821169359},{"_id":"public/img/composer-1-9.png","hash":"2789235f22f948373e91e2faf94496ba60926dd8","modified":1554821169359},{"_id":"public/img/composer-3-1.png","hash":"d32b53d60f1aebc9e0ba929a7c386a4906226b9b","modified":1554821169359},{"_id":"public/img/composer-3-2.png","hash":"520681ceda967b92c9f02852689bff3f13e3f993","modified":1554821169359},{"_id":"public/img/git-install.jpg","hash":"ed7b03a67eb3a9e6ae86588343fad08cf299e538","modified":1554821169359},{"_id":"public/img/git_menu.png","hash":"8e6c45b20929602e69460f3f44c2a9b2b14496d5","modified":1554821169359},{"_id":"public/img/headimg.jpg","hash":"f95ce8da7845cd0909aac66b00c4f24dbccd0b7e","modified":1554821169359},{"_id":"public/img/new_repository.png","hash":"934fde34afd7a0b80fa7ca37b12502f08adab25e","modified":1554821169359},{"_id":"public/img/github_ssh.png","hash":"40172f812a2230e4ca2d5967158391e4a5c6fedd","modified":1554821169359},{"_id":"public/img/install-node-msi-version-on-windows-step5.png","hash":"2c0a6285f736ada4cf4cf7715f2b6e703c50f8f1","modified":1554821169359},{"_id":"public/img/node-version.png","hash":"35509019cbe3c1dfd397d8408df576abed0b8f42","modified":1554821169359},{"_id":"public/img/ssh_pwd.png","hash":"06d3dec0cb1c3b658c9383843a277aa3d746a783","modified":1554821169359},{"_id":"public/img/screenshot_1513006093776.png","hash":"602c4750dc697aa4ea855bf2d12d5a9afb99e08f","modified":1554821169359},{"_id":"public/img/ssh_gen.png","hash":"a4c9683d28fbc5261d431e3ea82465ff2c265df7","modified":1554821169359},{"_id":"public/img/ssh_dir.png","hash":"a5526de3bdd9e14504e553983908c6a13baa7c5d","modified":1554821169359},{"_id":"public/img/ssh_key_dir.png","hash":"3d214951ae72043cfaeb7788203f15c9b9e475d5","modified":1554821169359},{"_id":"public/img/view_count.png","hash":"b2abe728aa1d20c64657b07434808c6629f20798","modified":1554821169359},{"_id":"public/img/username_git.png","hash":"2e61786fef52854afa9961f0b83353f9acdcb7f0","modified":1554821169359},{"_id":"public/img/wechat.png","hash":"f74d7de7f71624010c6aa31cec752151f8805e20","modified":1554821169360},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1554821169360},{"_id":"public/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1554821169360},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1554821169360},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1554821169360},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1554821169360},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1554821169360},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1554821169360},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1554821169360},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554821169360},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1554821169360},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1554821169360},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1554821169360},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1554821169361},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1554821169361},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1554821169361},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1554821169361},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1554821169361},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1554821169361},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1554821169361},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1554821169361},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1554821169361},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1554821169361},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1554821169361},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1554821169361},{"_id":"public/img/composer-1-3.png","hash":"3f3c98ea41c9abd1173b3025077eda09ef2d6d28","modified":1554821169804},{"_id":"public/img/chat.png","hash":"1f343ae1e102fcc0d69072dbe4089adaf32e3326","modified":1554821169804},{"_id":"public/img/composer-1-6.png","hash":"108206a62e0409d640772957c10886e7c0cd6c73","modified":1554821169805},{"_id":"public/img/screenshot_1513006588835.png","hash":"d6eea77b61f0914383db838d04f7ef22383d83a5","modified":1554821169805},{"_id":"public/img/composer-1-2.png","hash":"8216cd498b5a18cc4efcd2057fd66117864616d0","modified":1554821169805},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1554821169805},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1554821169805},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1554821169810},{"_id":"public/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1554821169810},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1554821169811},{"_id":"public/js/src/clicklove.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1554821169811},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1554821169811},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1554821169811},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1554821169811},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1554821169811},{"_id":"public/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1554821169811},{"_id":"public/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1554821169811},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1554821169811},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1554821169811},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1554821169811},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1554821169811},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1554821169811},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1554821169811},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1554821169811},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1554821169811},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1554821169811},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1554821169811},{"_id":"public/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1554821169811},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1554821169812},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1554821169812},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1554821169812},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1554821169812},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1554821169812},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1554821169812},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1554821169813},{"_id":"public/css/main.css","hash":"023a880997c7cd6a16a073d375ece535182ff7f4","modified":1554821169813},{"_id":"public/img/composer-1-7.png","hash":"d222ee82fca796f6d81ab1e96e5ac361a8952889","modified":1554821169813},{"_id":"public/img/daovoice.png","hash":"91c8fc9d1187729416e8a54bb1126d88922aae2c","modified":1554821169813},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1554821169814},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1554821169814},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1554821169822},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1554821169822},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1554821169822},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1554821169823},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1554821169823},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1554821169826},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1554821169830},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1554821169830},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1554821169832},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1554821169832},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1554821169833},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1554821169854},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1554821169856},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1554821169857},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1554821169859},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1554821169866}],"Category":[{"name":"算法与结构","_id":"cju9wdmac0004vjcgmgyuec74"},{"name":"博客思维","_id":"cju9wdmah000avjcg8pf2xvye"},{"name":"搭建博客","_id":"cju9wdmal000fvjcg1ti7dkah"},{"name":"composer使用","_id":"cju9wdmaw000yvjcglauxbr73"},{"name":"GIT","_id":"cju9wdmb4001lvjcg00ptkorp"},{"name":"设计模式","_id":"cju9wdmb7001wvjcgvtpgsnnc"},{"name":"jQuery","_id":"cju9wdmbc0028vjcg0pphig2s"},{"name":"MySQL","_id":"cju9wdmbk002wvjcgyxi3pla2"},{"name":"服务器","_id":"cju9wdmbp003gvjcgv2vhtlim"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n\tcharset=\"utf-8\" homePageUrl=\"/\"\n\thomePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script charset=\"utf-8\">\n\tvar QZONE = window.QZONE || {};\n\tfunction imagezoom(imgobj, box_w, box_h) {\n\t\tvar src_w = imgobj.width;\n\t\tvar src_h = imgobj.height;\n\t\tvar r1 = src_w / src_h, r2 = box_w / box_h;\n\t\tvar dst_w, dst_h;\n\t\tif (r1 > r2) {\n\t\t\tdst_w = box_w;\n\t\t\tdst_h = Math.round(dst_w / src_w * src_h);\n\t\t} else {\n\t\t\tif (r1 < r2) {\n\t\t\t\tdst_h = box_h;\n\t\t\t\tdst_w = Math.round(dst_h / src_h * src_w);\n\t\t\t} else {\n\t\t\t\tdst_w = box_w;\n\t\t\t\tdst_h = box_h;\n\t\t\t}\n\t\t}\n\t\timgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\";\n\t\timgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\";\n\t\timgobj.style.width = dst_w + \"px\";\n\t\timgobj.style.height = dst_h + \"px\";\n\t\timgobj.style.opacity = 1;\n\t}\n\t(function(_w, _d) {\n\t\tvar ha = _d.head || _d.getElementsByTagName(\"head\")[0];\n\t\tvar $scope = {};\n\t\tvar current;\n\t\tvar tmnow;\n\t\tvar chId;\n\t\tvar homePageUrl, homePageName;\n\t\tvar scs = document.getElementsByTagName(\"script\");\n\t\tif (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) {\n\t\t\thomePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\";\n\t\t\thomePageUrl = \"http://fm.qq.com\";\n\t\t} else {\n\t\t\tif (location.href.indexOf(\"qzone.qq.com\") > -1) {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\";\n\t\t\t\thomePageUrl = \"http://qzone.qq.com\";\n\t\t\t} else {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\";\n\t\t\t\thomePageUrl = \"http://www.qq.com\";\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0;i < scs.length;i++) {\n\t\t\tif (scs[i].src.indexOf(\"404/search_children.js\") > -1) {\n\t\t\t\tif (scs[i].getAttribute(\"homePageUrl\")) {\n\t\t\t\t\thomePageUrl = scs[i].getAttribute(\"homePageUrl\");\n\t\t\t\t}\n\t\t\t\tif (scs[i].getAttribute(\"homePageName\")) {\n\t\t\t\t\thomePageName = scs[i].getAttribute(\"homePageName\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$scope.rettext = homePageName;\n\t\t$scope.retlink = homePageUrl;\n\t\tfunction getData(srcUrl, callback) {\n\t\t\tvar sc = _d.createElement(\"script\");\n\t\t\tfunction orc() {\n\t\t\t\tif (sc.readyState === \"loaded\") {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sc.addEventListener) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tsc.addEventListener(\"load\", callback, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsc.attachEvent(\"onreadystatechange\", orc);\n\t\t\t}\n\t\t\tha && ha.appendChild(sc);\n\t\t\tsc.src = srcUrl;\n\t\t}\n\t\tfunction resolveData(d) {\n\t\t\tvar tid, len, ddata = [], tdata;\n\t\t\tif (\"object\" == typeof d && (d.data && (len = d.data.length))) {\n\t\t\t\tfor (var i = 0;i < len;i++) {\n\t\t\t\t\tvar expire = d.data[i].expire;\n\t\t\t\t\td.data[i]._id = new Date * Math.random() * Math.random() * 1E7;\n\t\t\t\t\tif (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) {\n\t\t\t\t\t\tvar _c = d.data[i].city, _p = d.data[i].province;\n\t\t\t\t\t\tif (_c && city) {\n\t\t\t\t\t\t\tif ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_p && province) {\n\t\t\t\t\t\t\tif ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttid = Math.floor(Math.random() * (ddata.length || len));\n\t\t\t\ttdata = (ddata.length ? ddata : d.data)[chId = tid];\n\t\t\t\tif (_w.foundjsondata) {\n\t\t\t\t\ttdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\";\n\t\t\t\t\ttdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\";\n\t\t\t\t\ttdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) {\n\t\t\t\t\t\treturn \"#p=\" + (+n + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn format(tmpl2, tdata);\n\t\t\t\t}\n\t\t\t\tif (!tdata.ext1) {\n\t\t\t\t\ttdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\";\n\t\t\t\t}\n\t\t\t\treturn tdata;\n\t\t\t}\n\t\t}\n\t\tfunction setTopData(tdata) {\n\t\t\tcurrent = tdata;\n\t\t\t$scope.topname = tdata.name;\n\t\t\t$scope.topgender = tdata.sex;\n\t\t\t$scope.topbirth = tdata.birth_time;\n\t\t\t$scope.toplostdate = tdata.lost_time;\n\t\t\t$scope.toplostplace = tdata.lost_place;\n\t\t\t$scope.toplostdesc = tdata.child_feature;\n\t\t\t$scope.toplink = tdata.url;\n\t\t\t$scope.topimg = tdata.child_pic;\n\t\t\t$scope.topid = tdata._id;\n\t\t\tdocument.body.innerHTML = template(\"body\", $scope);\n\t\t}\n\t\tfunction init(data) {\n\t\t\ttmnow = data.tm_now * 1E3;\n\t\t\tvar tdata = resolveData(jsondata);\n\t\t\t$scope.whichin = 0;\n\t\t\tjsondata.data.splice(chId, 1);\n\t\t\t$scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5));\n\t\t\tsetTopData(tdata);\n\t\t}\n\t\tvar timeout;\n\t\twindow._Callback = function(d) {\n\t\t\tclearTimeout(timeout);\n\t\t\tinit(d);\n\t\t};\n\t\ttimeout = setTimeout(function() {\n\t\t\t_Callback({tm_now:(new Date).getTime() / 1E3});\n\t\t}, 2E3);\n\t\t_w.share = function(target) {\n\t\t\tvar summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\");\n\t\t\tif (summary) {\n\t\t\t\tsummary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary;\n\t\t\t}\n\t\t\tvar stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\";\n\t\t\tvar desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\";\n\t\t\tvar encode = encodeURIComponent;\n\t\t\tvar opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url};\n\t\t\tvar surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", \n\t\t\torigin_url = opts.origin_url || \"http://www.qq.com/404/\";\n\t\t\tvar shareList = {weibo:{method:function(evt) {\n\t\t\t\tvar w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, qzone:{method:function(evt) {\n\t\t\t\tvar buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site};\n\t\t\t\tfor (var k in ps) {\n\t\t\t\t\tbuff.push(k + \"=\" + encode(ps[k] || \"\"));\n\t\t\t\t}\n\t\t\t\tvar w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, sina:{method:function() {\n\t\t\t\tvar w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\");\n\t\t\t}}, kaixin:{method:function() {\n\t\t\t\tvar n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary);\n\t\t\t\topenit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\");\n\t\t\t}}, renren:{method:function() {\n\t\t\t\tvar n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}, weixin:{method:function() {\n\t\t\t\tvar n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}};\n\t\t\tvar openit = function(u, n, p) {\n\t\t\t\tfunction o() {\n\t\t\t\t\tvar z;\n\t\t\t\t\tif (!(z = window.open(u, n, p))) {\n\t\t\t\t\t\tlocation.href = u;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\to();\n\t\t\t};\n\t\t\tshareList[target] && shareList[target].method();\n\t\t};\n\t\t_w.toThis = function(id) {\n\t\t\tfor (var i = 0;i < $scope.otherdata.length;i++) {\n\t\t\t\tif ($scope.otherdata[i]._id == id) {\n\t\t\t\t\tsetTopData($scope.otherdata[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tvar meta = document.createElement(\"meta\");\n\t\tmeta.name = \"viewport\";\n\t\tmeta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\";\n\t\tha.appendChild(meta);\n\t\t(function registerStyle() {\n\t\t\tvar link = document.createElement(\"link\");\n\t\t\tlink.rel = \"stylesheet\";\n\t\t\tlink.type = \"text/css\";\n\t\t\tlink.href = \"https://qzone.qq.com/gy/404/style/404style.css\";\n\t\t\tha.appendChild(link);\n\t\t})();\n\t\t(function initStat() {\n\t\t\tvar qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i;\n\t\t\tfunction cb() {\n\t\t\t\tvar url = location.host;\n\t\t\t\tvar src = \"\";\n\t\t\t\tif (qzoneDomainNameRE.test(url)) {\n\t\t\t\t\tsrc = \"new404.qzone\";\n\t\t\t\t} else {\n\t\t\t\t\tif (qqDomainNameRE.test(url)) {\n\t\t\t\t\t\tsrc = \"new404.qq\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (qzsDomainNameRE.test(url)) {\n\t\t\t\t\t\t\tsrc = \"new404.qzonestyle\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsrc = url.replace(\".\", \"_\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src));\n\t\t\t}\n\t\t\tgetData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb);\n\t\t})();\n\t\t})(window, document);\n\t\t!function() {\n\t\t\tfunction a(a, b) {\n\t\t\t\treturn(/string|function/.test(typeof b) ? h : g)(a, b);\n\t\t\t}\n\t\t\tfunction b(a, c) {\n\t\t\t\treturn \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a;\n\t\t\t}\n\t\t\tfunction c(a) {\n\t\t\t\treturn l[a];\n\t\t\t}\n\t\t\tfunction d(a) {\n\t\t\t\treturn b(a).replace(/&(?![\\w#]+;)|[<>\"']/g, c);\n\t\t\t}\n\t\t\tfunction e(a, b) {\n\t\t\t\tif (m(a)) {\n\t\t\t\t\tfor (var c = 0, d = a.length;d > c;c++) {\n\t\t\t\t\t\tb.call(a, a[c], c, a);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (c in a) {\n\t\t\t\t\t\tb.call(a, a[c], c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction f(a, b) {\n\t\t\t\tvar c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b;\n\t\t\t\tfor (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) {\n\t\t\t\t\te = e.replace(c, \"/\");\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tfunction g(b, c) {\n\t\t\t\tvar d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"});\n\t\t\t\treturn c ? d(c) : d;\n\t\t\t}\n\t\t\tfunction h(a, b) {\n\t\t\t\tif (\"string\" == typeof b) {\n\t\t\t\t\tvar c = b;\n\t\t\t\t\tb = function() {\n\t\t\t\t\t\treturn new k(c);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar d = j[a] = function(c) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new b(c, a) + \"\";\n\t\t\t\t\t} catch (d) {\n\t\t\t\t\t\treturn i(d)();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn d.prototype = b.prototype = n, d.toString = function() {\n\t\t\t\t\treturn b + \"\";\n\t\t\t\t}, d;\n\t\t\t}\n\t\t\tfunction i(a) {\n\t\t\t\tvar b = \"{Template Error}\", c = a.stack || \"\";\n\t\t\t\tif (c) {\n\t\t\t\t\tc = c.split(\"\\n\").slice(0, 2).join(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tfor (var d in a) {\n\t\t\t\t\t\tc += \"<\" + d + \">\\n\" + a[d] + \"\\n\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn function() {\n\t\t\t\t\treturn \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b;\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar j = a.cache = {}, k = this.String, l = {\"<\":\"&#60;\", \">\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) {\n\t\t\t\treturn \"[object Array]\" === {}.toString.call(a);\n\t\t\t}, n = a.utils = {$helpers:{}, $include:function(a, b, c) {\n\t\t\t\treturn a = f(c, a), g(a, b);\n\t\t\t}, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers;\n\t\t\ta.get = function(a) {\n\t\t\t\treturn j[a.replace(/^\\.\\//, \"\")];\n\t\t\t}, a.helper = function(a, b) {\n\t\t\t\to[a] = b;\n\t\t\t}, \"function\" == typeof define ? define(function() {\n\t\t\t\treturn a;\n\t\t\t}) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) {\n\t\t\t\tvar b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\");\n\t\t\t\treturn r += '<div class=\"mod_404\"> <div class=\"wrapper\" id=\"mainWrap\"> <div class=\"mod_hd\"> <h1 class=\"title\"><span class=\"title_inner\">404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01</span></h1> <div class=\"desc\"><a href=\"', r += c(d), r += '\" class=\"desc_link\">', r += c(e), r += '</a></div> </div> <div class=\"mod_bd\"> <div class=\"child_box\"> <div class=\"mod_404_child child_in\" data-id=\"', \n\t\t\t\tr += c(f), r += '\" id=\"top_', r += c(f), r += '\"> <div class=\"child_main cf\"> <div class=\"child_avatar\"><img src=\"', r += c(g), r += '\" onload=\"imagezoom(this, 160, 216);\" style=\"opacity:0\"></div> <div class=\"child_info\"> <div class=\"info_name\"> <h2><span class=\"name_inner\">', r += c(h), r += '</span><span class=\"info_sex\">(', r += c(i), r += ')</span></h2> </div> <div class=\"info_item info_birth\"><span class=\"info_lbl\">\\u51fa\\u751f\\u65e5\\u671f\\uff1a</span><span class=\"item_inner\">', r += c(j), \n\t\t\t\tr += '</span></div> <div class=\"info_item info_time\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a</span><span class=\"item_inner\">', r += c(l), r += '</span></div> <div class=\"info_item info_address\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u5730\\u70b9\\uff1a</span><span class=\"item_inner\">', r += c(m), r += '</span></div> <div class=\"info_item info_desc\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a</span><span class=\"item_inner\">', r += c(n), r += '</span></div> <a href=\"', \n\t\t\t\tr += c(o), r += '\" class=\"link_view\" title=\"\\u67e5\\u770b\\u8be6\\u60c5\"><span class=\"link_inner\">\\u67e5\\u770b\\u8be6\\u60c5</span></a> </div> </div> <div class=\"child_bottom cf\"> <div class=\"bottom_logo\"> <ul class=\"logo_list\"> <li><a href=\"http://e.t.qq.com/Tencent-Volunteers\" title=\"\\u817e\\u8baf\\u5fd7\\u613f\\u8005\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_tencentvolunteers.png\"></a></li> <li><a href=\"http://bbs.baobeihuijia.com/forum.php\" title=\"\\u5b9d\\u8d1d\\u56de\\u5bb6\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_baobeihuijia.png\"></a></li> </ul> </div> <div class=\"bottom_right\"> <div class=\"mod_share\" onmouseover=\"this.className += \\' mod_share_hover\\';\" onmouseout=\"this.className = this.className.replace(\\' mod_share_hover\\',\\'\\')\"> <span class=\"share_inner\">\\u5206\\u4eab</span> <ul class=\"share_list\"> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weibo\\');return false;\" title=\"\\u817e\\u8baf\\u5fae\\u535a\"><span class=\"link_inner\">\\u817e\\u8baf\\u5fae\\u535a</span><i class=\"ico_tencentweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'qzone\\');return false;\" title=\"QQ\\u7a7a\\u95f4\"><span class=\"link_inner\">QQ\\u7a7a\\u95f4</span><i class=\"ico_qzone\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'sina\\');return false;\" title=\"\\u65b0\\u6d6a\\u5fae\\u535a\"><span class=\"link_inner\">\\u65b0\\u6d6a\\u5fae\\u535a</span><i class=\"ico_sinaweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weixin\\');return false;\" title=\"\\u5fae\\u4fe1\"><span class=\"link_inner\">\\u5fae\\u4fe1</span><i class=\"ico_weixin\"></i></a></li> </ul> <span style=\"clear: both;\"></span> </div> </div> </div> </div> <i class=\"ico_corner\"></i> </div> </div> <div class=\"mod_fd\"> <div class=\"mod_404_children\"> <ul class=\"children_list\"> ', \n\t\t\t\tp(q, function(a) {\n\t\t\t\t\tr += ' <li class=\"', r += c(f == a._id ? \"current\" : \"\"), r += '\"><a href=\"javascript:;\" onclick=\"toThis(\\'', r += c(a._id), r += '\\');\" title=\"', r += c(a.name), r += '\" ><img src=\"', r += c(a.child_pic), r += '\"></a></li> ';\n\t\t\t\t}), r += \" </ul> </div> </div> </div> </div>\", new k(r);\n\t\t\t});\n\t}();\n</script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n\t<meta name=\"robots\" content=\"all\" />\n\t<meta name=\"robots\" content=\"index,follow\"/>\n</head>\n<body>\n\t<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n\tcharset=\"utf-8\" homePageUrl=\"/\"\n\thomePageName=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script charset=\"utf-8\">\n\tvar QZONE = window.QZONE || {};\n\tfunction imagezoom(imgobj, box_w, box_h) {\n\t\tvar src_w = imgobj.width;\n\t\tvar src_h = imgobj.height;\n\t\tvar r1 = src_w / src_h, r2 = box_w / box_h;\n\t\tvar dst_w, dst_h;\n\t\tif (r1 > r2) {\n\t\t\tdst_w = box_w;\n\t\t\tdst_h = Math.round(dst_w / src_w * src_h);\n\t\t} else {\n\t\t\tif (r1 < r2) {\n\t\t\t\tdst_h = box_h;\n\t\t\t\tdst_w = Math.round(dst_h / src_h * src_w);\n\t\t\t} else {\n\t\t\t\tdst_w = box_w;\n\t\t\t\tdst_h = box_h;\n\t\t\t}\n\t\t}\n\t\timgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\";\n\t\timgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\";\n\t\timgobj.style.width = dst_w + \"px\";\n\t\timgobj.style.height = dst_h + \"px\";\n\t\timgobj.style.opacity = 1;\n\t}\n\t(function(_w, _d) {\n\t\tvar ha = _d.head || _d.getElementsByTagName(\"head\")[0];\n\t\tvar $scope = {};\n\t\tvar current;\n\t\tvar tmnow;\n\t\tvar chId;\n\t\tvar homePageUrl, homePageName;\n\t\tvar scs = document.getElementsByTagName(\"script\");\n\t\tif (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) {\n\t\t\thomePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\";\n\t\t\thomePageUrl = \"http://fm.qq.com\";\n\t\t} else {\n\t\t\tif (location.href.indexOf(\"qzone.qq.com\") > -1) {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\";\n\t\t\t\thomePageUrl = \"http://qzone.qq.com\";\n\t\t\t} else {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\";\n\t\t\t\thomePageUrl = \"http://www.qq.com\";\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0;i < scs.length;i++) {\n\t\t\tif (scs[i].src.indexOf(\"404/search_children.js\") > -1) {\n\t\t\t\tif (scs[i].getAttribute(\"homePageUrl\")) {\n\t\t\t\t\thomePageUrl = scs[i].getAttribute(\"homePageUrl\");\n\t\t\t\t}\n\t\t\t\tif (scs[i].getAttribute(\"homePageName\")) {\n\t\t\t\t\thomePageName = scs[i].getAttribute(\"homePageName\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$scope.rettext = homePageName;\n\t\t$scope.retlink = homePageUrl;\n\t\tfunction getData(srcUrl, callback) {\n\t\t\tvar sc = _d.createElement(\"script\");\n\t\t\tfunction orc() {\n\t\t\t\tif (sc.readyState === \"loaded\") {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sc.addEventListener) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tsc.addEventListener(\"load\", callback, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsc.attachEvent(\"onreadystatechange\", orc);\n\t\t\t}\n\t\t\tha && ha.appendChild(sc);\n\t\t\tsc.src = srcUrl;\n\t\t}\n\t\tfunction resolveData(d) {\n\t\t\tvar tid, len, ddata = [], tdata;\n\t\t\tif (\"object\" == typeof d && (d.data && (len = d.data.length))) {\n\t\t\t\tfor (var i = 0;i < len;i++) {\n\t\t\t\t\tvar expire = d.data[i].expire;\n\t\t\t\t\td.data[i]._id = new Date * Math.random() * Math.random() * 1E7;\n\t\t\t\t\tif (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) {\n\t\t\t\t\t\tvar _c = d.data[i].city, _p = d.data[i].province;\n\t\t\t\t\t\tif (_c && city) {\n\t\t\t\t\t\t\tif ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_p && province) {\n\t\t\t\t\t\t\tif ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttid = Math.floor(Math.random() * (ddata.length || len));\n\t\t\t\ttdata = (ddata.length ? ddata : d.data)[chId = tid];\n\t\t\t\tif (_w.foundjsondata) {\n\t\t\t\t\ttdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\";\n\t\t\t\t\ttdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\";\n\t\t\t\t\ttdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) {\n\t\t\t\t\t\treturn \"#p=\" + (+n + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn format(tmpl2, tdata);\n\t\t\t\t}\n\t\t\t\tif (!tdata.ext1) {\n\t\t\t\t\ttdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\";\n\t\t\t\t}\n\t\t\t\treturn tdata;\n\t\t\t}\n\t\t}\n\t\tfunction setTopData(tdata) {\n\t\t\tcurrent = tdata;\n\t\t\t$scope.topname = tdata.name;\n\t\t\t$scope.topgender = tdata.sex;\n\t\t\t$scope.topbirth = tdata.birth_time;\n\t\t\t$scope.toplostdate = tdata.lost_time;\n\t\t\t$scope.toplostplace = tdata.lost_place;\n\t\t\t$scope.toplostdesc = tdata.child_feature;\n\t\t\t$scope.toplink = tdata.url;\n\t\t\t$scope.topimg = tdata.child_pic;\n\t\t\t$scope.topid = tdata._id;\n\t\t\tdocument.body.innerHTML = template(\"body\", $scope);\n\t\t}\n\t\tfunction init(data) {\n\t\t\ttmnow = data.tm_now * 1E3;\n\t\t\tvar tdata = resolveData(jsondata);\n\t\t\t$scope.whichin = 0;\n\t\t\tjsondata.data.splice(chId, 1);\n\t\t\t$scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5));\n\t\t\tsetTopData(tdata);\n\t\t}\n\t\tvar timeout;\n\t\twindow._Callback = function(d) {\n\t\t\tclearTimeout(timeout);\n\t\t\tinit(d);\n\t\t};\n\t\ttimeout = setTimeout(function() {\n\t\t\t_Callback({tm_now:(new Date).getTime() / 1E3});\n\t\t}, 2E3);\n\t\t_w.share = function(target) {\n\t\t\tvar summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\");\n\t\t\tif (summary) {\n\t\t\t\tsummary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary;\n\t\t\t}\n\t\t\tvar stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\";\n\t\t\tvar desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\";\n\t\t\tvar encode = encodeURIComponent;\n\t\t\tvar opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url};\n\t\t\tvar surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", \n\t\t\torigin_url = opts.origin_url || \"http://www.qq.com/404/\";\n\t\t\tvar shareList = {weibo:{method:function(evt) {\n\t\t\t\tvar w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, qzone:{method:function(evt) {\n\t\t\t\tvar buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site};\n\t\t\t\tfor (var k in ps) {\n\t\t\t\t\tbuff.push(k + \"=\" + encode(ps[k] || \"\"));\n\t\t\t\t}\n\t\t\t\tvar w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, sina:{method:function() {\n\t\t\t\tvar w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\");\n\t\t\t}}, kaixin:{method:function() {\n\t\t\t\tvar n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary);\n\t\t\t\topenit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\");\n\t\t\t}}, renren:{method:function() {\n\t\t\t\tvar n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}, weixin:{method:function() {\n\t\t\t\tvar n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}};\n\t\t\tvar openit = function(u, n, p) {\n\t\t\t\tfunction o() {\n\t\t\t\t\tvar z;\n\t\t\t\t\tif (!(z = window.open(u, n, p))) {\n\t\t\t\t\t\tlocation.href = u;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\to();\n\t\t\t};\n\t\t\tshareList[target] && shareList[target].method();\n\t\t};\n\t\t_w.toThis = function(id) {\n\t\t\tfor (var i = 0;i < $scope.otherdata.length;i++) {\n\t\t\t\tif ($scope.otherdata[i]._id == id) {\n\t\t\t\t\tsetTopData($scope.otherdata[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tvar meta = document.createElement(\"meta\");\n\t\tmeta.name = \"viewport\";\n\t\tmeta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\";\n\t\tha.appendChild(meta);\n\t\t(function registerStyle() {\n\t\t\tvar link = document.createElement(\"link\");\n\t\t\tlink.rel = \"stylesheet\";\n\t\t\tlink.type = \"text/css\";\n\t\t\tlink.href = \"https://qzone.qq.com/gy/404/style/404style.css\";\n\t\t\tha.appendChild(link);\n\t\t})();\n\t\t(function initStat() {\n\t\t\tvar qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i;\n\t\t\tfunction cb() {\n\t\t\t\tvar url = location.host;\n\t\t\t\tvar src = \"\";\n\t\t\t\tif (qzoneDomainNameRE.test(url)) {\n\t\t\t\t\tsrc = \"new404.qzone\";\n\t\t\t\t} else {\n\t\t\t\t\tif (qqDomainNameRE.test(url)) {\n\t\t\t\t\t\tsrc = \"new404.qq\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (qzsDomainNameRE.test(url)) {\n\t\t\t\t\t\t\tsrc = \"new404.qzonestyle\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsrc = url.replace(\".\", \"_\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src));\n\t\t\t}\n\t\t\tgetData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb);\n\t\t})();\n\t\t})(window, document);\n\t\t!function() {\n\t\t\tfunction a(a, b) {\n\t\t\t\treturn(/string|function/.test(typeof b) ? h : g)(a, b);\n\t\t\t}\n\t\t\tfunction b(a, c) {\n\t\t\t\treturn \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a;\n\t\t\t}\n\t\t\tfunction c(a) {\n\t\t\t\treturn l[a];\n\t\t\t}\n\t\t\tfunction d(a) {\n\t\t\t\treturn b(a).replace(/&(?![\\w#]+;)|[<>\"']/g, c);\n\t\t\t}\n\t\t\tfunction e(a, b) {\n\t\t\t\tif (m(a)) {\n\t\t\t\t\tfor (var c = 0, d = a.length;d > c;c++) {\n\t\t\t\t\t\tb.call(a, a[c], c, a);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (c in a) {\n\t\t\t\t\t\tb.call(a, a[c], c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction f(a, b) {\n\t\t\t\tvar c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b;\n\t\t\t\tfor (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) {\n\t\t\t\t\te = e.replace(c, \"/\");\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tfunction g(b, c) {\n\t\t\t\tvar d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"});\n\t\t\t\treturn c ? d(c) : d;\n\t\t\t}\n\t\t\tfunction h(a, b) {\n\t\t\t\tif (\"string\" == typeof b) {\n\t\t\t\t\tvar c = b;\n\t\t\t\t\tb = function() {\n\t\t\t\t\t\treturn new k(c);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar d = j[a] = function(c) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new b(c, a) + \"\";\n\t\t\t\t\t} catch (d) {\n\t\t\t\t\t\treturn i(d)();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn d.prototype = b.prototype = n, d.toString = function() {\n\t\t\t\t\treturn b + \"\";\n\t\t\t\t}, d;\n\t\t\t}\n\t\t\tfunction i(a) {\n\t\t\t\tvar b = \"{Template Error}\", c = a.stack || \"\";\n\t\t\t\tif (c) {\n\t\t\t\t\tc = c.split(\"\\n\").slice(0, 2).join(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tfor (var d in a) {\n\t\t\t\t\t\tc += \"<\" + d + \">\\n\" + a[d] + \"\\n\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn function() {\n\t\t\t\t\treturn \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b;\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar j = a.cache = {}, k = this.String, l = {\"<\":\"&#60;\", \">\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) {\n\t\t\t\treturn \"[object Array]\" === {}.toString.call(a);\n\t\t\t}, n = a.utils = {$helpers:{}, $include:function(a, b, c) {\n\t\t\t\treturn a = f(c, a), g(a, b);\n\t\t\t}, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers;\n\t\t\ta.get = function(a) {\n\t\t\t\treturn j[a.replace(/^\\.\\//, \"\")];\n\t\t\t}, a.helper = function(a, b) {\n\t\t\t\to[a] = b;\n\t\t\t}, \"function\" == typeof define ? define(function() {\n\t\t\t\treturn a;\n\t\t\t}) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) {\n\t\t\t\tvar b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\");\n\t\t\t\treturn r += '<div class=\"mod_404\"> <div class=\"wrapper\" id=\"mainWrap\"> <div class=\"mod_hd\"> <h1 class=\"title\"><span class=\"title_inner\">404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01</span></h1> <div class=\"desc\"><a href=\"', r += c(d), r += '\" class=\"desc_link\">', r += c(e), r += '</a></div> </div> <div class=\"mod_bd\"> <div class=\"child_box\"> <div class=\"mod_404_child child_in\" data-id=\"', \n\t\t\t\tr += c(f), r += '\" id=\"top_', r += c(f), r += '\"> <div class=\"child_main cf\"> <div class=\"child_avatar\"><img src=\"', r += c(g), r += '\" onload=\"imagezoom(this, 160, 216);\" style=\"opacity:0\"></div> <div class=\"child_info\"> <div class=\"info_name\"> <h2><span class=\"name_inner\">', r += c(h), r += '</span><span class=\"info_sex\">(', r += c(i), r += ')</span></h2> </div> <div class=\"info_item info_birth\"><span class=\"info_lbl\">\\u51fa\\u751f\\u65e5\\u671f\\uff1a</span><span class=\"item_inner\">', r += c(j), \n\t\t\t\tr += '</span></div> <div class=\"info_item info_time\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a</span><span class=\"item_inner\">', r += c(l), r += '</span></div> <div class=\"info_item info_address\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u5730\\u70b9\\uff1a</span><span class=\"item_inner\">', r += c(m), r += '</span></div> <div class=\"info_item info_desc\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a</span><span class=\"item_inner\">', r += c(n), r += '</span></div> <a href=\"', \n\t\t\t\tr += c(o), r += '\" class=\"link_view\" title=\"\\u67e5\\u770b\\u8be6\\u60c5\"><span class=\"link_inner\">\\u67e5\\u770b\\u8be6\\u60c5</span></a> </div> </div> <div class=\"child_bottom cf\"> <div class=\"bottom_logo\"> <ul class=\"logo_list\"> <li><a href=\"http://e.t.qq.com/Tencent-Volunteers\" title=\"\\u817e\\u8baf\\u5fd7\\u613f\\u8005\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_tencentvolunteers.png\"></a></li> <li><a href=\"http://bbs.baobeihuijia.com/forum.php\" title=\"\\u5b9d\\u8d1d\\u56de\\u5bb6\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_baobeihuijia.png\"></a></li> </ul> </div> <div class=\"bottom_right\"> <div class=\"mod_share\" onmouseover=\"this.className += \\' mod_share_hover\\';\" onmouseout=\"this.className = this.className.replace(\\' mod_share_hover\\',\\'\\')\"> <span class=\"share_inner\">\\u5206\\u4eab</span> <ul class=\"share_list\"> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weibo\\');return false;\" title=\"\\u817e\\u8baf\\u5fae\\u535a\"><span class=\"link_inner\">\\u817e\\u8baf\\u5fae\\u535a</span><i class=\"ico_tencentweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'qzone\\');return false;\" title=\"QQ\\u7a7a\\u95f4\"><span class=\"link_inner\">QQ\\u7a7a\\u95f4</span><i class=\"ico_qzone\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'sina\\');return false;\" title=\"\\u65b0\\u6d6a\\u5fae\\u535a\"><span class=\"link_inner\">\\u65b0\\u6d6a\\u5fae\\u535a</span><i class=\"ico_sinaweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weixin\\');return false;\" title=\"\\u5fae\\u4fe1\"><span class=\"link_inner\">\\u5fae\\u4fe1</span><i class=\"ico_weixin\"></i></a></li> </ul> <span style=\"clear: both;\"></span> </div> </div> </div> </div> <i class=\"ico_corner\"></i> </div> </div> <div class=\"mod_fd\"> <div class=\"mod_404_children\"> <ul class=\"children_list\"> ', \n\t\t\t\tp(q, function(a) {\n\t\t\t\t\tr += ' <li class=\"', r += c(f == a._id ? \"current\" : \"\"), r += '\"><a href=\"javascript:;\" onclick=\"toThis(\\'', r += c(a._id), r += '\\');\" title=\"', r += c(a.name), r += '\" ><img src=\"', r += c(a.child_pic), r += '\"></a></li> ';\n\t\t\t\t}), r += \" </ul> </div> </div> </div> </div>\", new k(r);\n\t\t\t});\n\t}();\n</script>\n</body>\n</html>","date":"2019-04-09T14:02:03.290Z","updated":"2019-04-09T14:02:03.290Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cju9wdma40000vjcgxu1hei22","content":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t<meta name=\"robots\" content=\"all\">\n\t<meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\t<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script charset=\"utf-8\">\n\tvar QZONE = window.QZONE || {};\n\tfunction imagezoom(imgobj, box_w, box_h) {\n\t\tvar src_w = imgobj.width;\n\t\tvar src_h = imgobj.height;\n\t\tvar r1 = src_w / src_h, r2 = box_w / box_h;\n\t\tvar dst_w, dst_h;\n\t\tif (r1 > r2) {\n\t\t\tdst_w = box_w;\n\t\t\tdst_h = Math.round(dst_w / src_w * src_h);\n\t\t} else {\n\t\t\tif (r1 < r2) {\n\t\t\t\tdst_h = box_h;\n\t\t\t\tdst_w = Math.round(dst_h / src_h * src_w);\n\t\t\t} else {\n\t\t\t\tdst_w = box_w;\n\t\t\t\tdst_h = box_h;\n\t\t\t}\n\t\t}\n\t\timgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\";\n\t\timgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\";\n\t\timgobj.style.width = dst_w + \"px\";\n\t\timgobj.style.height = dst_h + \"px\";\n\t\timgobj.style.opacity = 1;\n\t}\n\t(function(_w, _d) {\n\t\tvar ha = _d.head || _d.getElementsByTagName(\"head\")[0];\n\t\tvar $scope = {};\n\t\tvar current;\n\t\tvar tmnow;\n\t\tvar chId;\n\t\tvar homePageUrl, homePageName;\n\t\tvar scs = document.getElementsByTagName(\"script\");\n\t\tif (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) {\n\t\t\thomePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\";\n\t\t\thomePageUrl = \"http://fm.qq.com\";\n\t\t} else {\n\t\t\tif (location.href.indexOf(\"qzone.qq.com\") > -1) {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\";\n\t\t\t\thomePageUrl = \"http://qzone.qq.com\";\n\t\t\t} else {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\";\n\t\t\t\thomePageUrl = \"http://www.qq.com\";\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0;i < scs.length;i++) {\n\t\t\tif (scs[i].src.indexOf(\"404/search_children.js\") > -1) {\n\t\t\t\tif (scs[i].getAttribute(\"homePageUrl\")) {\n\t\t\t\t\thomePageUrl = scs[i].getAttribute(\"homePageUrl\");\n\t\t\t\t}\n\t\t\t\tif (scs[i].getAttribute(\"homePageName\")) {\n\t\t\t\t\thomePageName = scs[i].getAttribute(\"homePageName\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$scope.rettext = homePageName;\n\t\t$scope.retlink = homePageUrl;\n\t\tfunction getData(srcUrl, callback) {\n\t\t\tvar sc = _d.createElement(\"script\");\n\t\t\tfunction orc() {\n\t\t\t\tif (sc.readyState === \"loaded\") {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sc.addEventListener) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tsc.addEventListener(\"load\", callback, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsc.attachEvent(\"onreadystatechange\", orc);\n\t\t\t}\n\t\t\tha && ha.appendChild(sc);\n\t\t\tsc.src = srcUrl;\n\t\t}\n\t\tfunction resolveData(d) {\n\t\t\tvar tid, len, ddata = [], tdata;\n\t\t\tif (\"object\" == typeof d && (d.data && (len = d.data.length))) {\n\t\t\t\tfor (var i = 0;i < len;i++) {\n\t\t\t\t\tvar expire = d.data[i].expire;\n\t\t\t\t\td.data[i]._id = new Date * Math.random() * Math.random() * 1E7;\n\t\t\t\t\tif (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) {\n\t\t\t\t\t\tvar _c = d.data[i].city, _p = d.data[i].province;\n\t\t\t\t\t\tif (_c && city) {\n\t\t\t\t\t\t\tif ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_p && province) {\n\t\t\t\t\t\t\tif ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttid = Math.floor(Math.random() * (ddata.length || len));\n\t\t\t\ttdata = (ddata.length ? ddata : d.data)[chId = tid];\n\t\t\t\tif (_w.foundjsondata) {\n\t\t\t\t\ttdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\";\n\t\t\t\t\ttdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\";\n\t\t\t\t\ttdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) {\n\t\t\t\t\t\treturn \"#p=\" + (+n + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn format(tmpl2, tdata);\n\t\t\t\t}\n\t\t\t\tif (!tdata.ext1) {\n\t\t\t\t\ttdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\";\n\t\t\t\t}\n\t\t\t\treturn tdata;\n\t\t\t}\n\t\t}\n\t\tfunction setTopData(tdata) {\n\t\t\tcurrent = tdata;\n\t\t\t$scope.topname = tdata.name;\n\t\t\t$scope.topgender = tdata.sex;\n\t\t\t$scope.topbirth = tdata.birth_time;\n\t\t\t$scope.toplostdate = tdata.lost_time;\n\t\t\t$scope.toplostplace = tdata.lost_place;\n\t\t\t$scope.toplostdesc = tdata.child_feature;\n\t\t\t$scope.toplink = tdata.url;\n\t\t\t$scope.topimg = tdata.child_pic;\n\t\t\t$scope.topid = tdata._id;\n\t\t\tdocument.body.innerHTML = template(\"body\", $scope);\n\t\t}\n\t\tfunction init(data) {\n\t\t\ttmnow = data.tm_now * 1E3;\n\t\t\tvar tdata = resolveData(jsondata);\n\t\t\t$scope.whichin = 0;\n\t\t\tjsondata.data.splice(chId, 1);\n\t\t\t$scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5));\n\t\t\tsetTopData(tdata);\n\t\t}\n\t\tvar timeout;\n\t\twindow._Callback = function(d) {\n\t\t\tclearTimeout(timeout);\n\t\t\tinit(d);\n\t\t};\n\t\ttimeout = setTimeout(function() {\n\t\t\t_Callback({tm_now:(new Date).getTime() / 1E3});\n\t\t}, 2E3);\n\t\t_w.share = function(target) {\n\t\t\tvar summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\");\n\t\t\tif (summary) {\n\t\t\t\tsummary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary;\n\t\t\t}\n\t\t\tvar stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\";\n\t\t\tvar desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\";\n\t\t\tvar encode = encodeURIComponent;\n\t\t\tvar opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url};\n\t\t\tvar surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", \n\t\t\torigin_url = opts.origin_url || \"http://www.qq.com/404/\";\n\t\t\tvar shareList = {weibo:{method:function(evt) {\n\t\t\t\tvar w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, qzone:{method:function(evt) {\n\t\t\t\tvar buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site};\n\t\t\t\tfor (var k in ps) {\n\t\t\t\t\tbuff.push(k + \"=\" + encode(ps[k] || \"\"));\n\t\t\t\t}\n\t\t\t\tvar w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, sina:{method:function() {\n\t\t\t\tvar w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\");\n\t\t\t}}, kaixin:{method:function() {\n\t\t\t\tvar n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary);\n\t\t\t\topenit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\");\n\t\t\t}}, renren:{method:function() {\n\t\t\t\tvar n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}, weixin:{method:function() {\n\t\t\t\tvar n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}};\n\t\t\tvar openit = function(u, n, p) {\n\t\t\t\tfunction o() {\n\t\t\t\t\tvar z;\n\t\t\t\t\tif (!(z = window.open(u, n, p))) {\n\t\t\t\t\t\tlocation.href = u;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\to();\n\t\t\t};\n\t\t\tshareList[target] && shareList[target].method();\n\t\t};\n\t\t_w.toThis = function(id) {\n\t\t\tfor (var i = 0;i < $scope.otherdata.length;i++) {\n\t\t\t\tif ($scope.otherdata[i]._id == id) {\n\t\t\t\t\tsetTopData($scope.otherdata[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tvar meta = document.createElement(\"meta\");\n\t\tmeta.name = \"viewport\";\n\t\tmeta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\";\n\t\tha.appendChild(meta);\n\t\t(function registerStyle() {\n\t\t\tvar link = document.createElement(\"link\");\n\t\t\tlink.rel = \"stylesheet\";\n\t\t\tlink.type = \"text/css\";\n\t\t\tlink.href = \"https://qzone.qq.com/gy/404/style/404style.css\";\n\t\t\tha.appendChild(link);\n\t\t})();\n\t\t(function initStat() {\n\t\t\tvar qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i;\n\t\t\tfunction cb() {\n\t\t\t\tvar url = location.host;\n\t\t\t\tvar src = \"\";\n\t\t\t\tif (qzoneDomainNameRE.test(url)) {\n\t\t\t\t\tsrc = \"new404.qzone\";\n\t\t\t\t} else {\n\t\t\t\t\tif (qqDomainNameRE.test(url)) {\n\t\t\t\t\t\tsrc = \"new404.qq\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (qzsDomainNameRE.test(url)) {\n\t\t\t\t\t\t\tsrc = \"new404.qzonestyle\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsrc = url.replace(\".\", \"_\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src));\n\t\t\t}\n\t\t\tgetData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb);\n\t\t})();\n\t\t})(window, document);\n\t\t!function() {\n\t\t\tfunction a(a, b) {\n\t\t\t\treturn(/string|function/.test(typeof b) ? h : g)(a, b);\n\t\t\t}\n\t\t\tfunction b(a, c) {\n\t\t\t\treturn \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a;\n\t\t\t}\n\t\t\tfunction c(a) {\n\t\t\t\treturn l[a];\n\t\t\t}\n\t\t\tfunction d(a) {\n\t\t\t\treturn b(a).replace(/&(?![\\w#]+;)|[<>\"']/g, c);\n\t\t\t}\n\t\t\tfunction e(a, b) {\n\t\t\t\tif (m(a)) {\n\t\t\t\t\tfor (var c = 0, d = a.length;d > c;c++) {\n\t\t\t\t\t\tb.call(a, a[c], c, a);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (c in a) {\n\t\t\t\t\t\tb.call(a, a[c], c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction f(a, b) {\n\t\t\t\tvar c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b;\n\t\t\t\tfor (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) {\n\t\t\t\t\te = e.replace(c, \"/\");\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tfunction g(b, c) {\n\t\t\t\tvar d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"});\n\t\t\t\treturn c ? d(c) : d;\n\t\t\t}\n\t\t\tfunction h(a, b) {\n\t\t\t\tif (\"string\" == typeof b) {\n\t\t\t\t\tvar c = b;\n\t\t\t\t\tb = function() {\n\t\t\t\t\t\treturn new k(c);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar d = j[a] = function(c) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new b(c, a) + \"\";\n\t\t\t\t\t} catch (d) {\n\t\t\t\t\t\treturn i(d)();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn d.prototype = b.prototype = n, d.toString = function() {\n\t\t\t\t\treturn b + \"\";\n\t\t\t\t}, d;\n\t\t\t}\n\t\t\tfunction i(a) {\n\t\t\t\tvar b = \"{Template Error}\", c = a.stack || \"\";\n\t\t\t\tif (c) {\n\t\t\t\t\tc = c.split(\"\\n\").slice(0, 2).join(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tfor (var d in a) {\n\t\t\t\t\t\tc += \"<\" + d + \">\\n\" + a[d] + \"\\n\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn function() {\n\t\t\t\t\treturn \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b;\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar j = a.cache = {}, k = this.String, l = {\"<\":\"&#60;\", \">\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) {\n\t\t\t\treturn \"[object Array]\" === {}.toString.call(a);\n\t\t\t}, n = a.utils = {$helpers:{}, $include:function(a, b, c) {\n\t\t\t\treturn a = f(c, a), g(a, b);\n\t\t\t}, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers;\n\t\t\ta.get = function(a) {\n\t\t\t\treturn j[a.replace(/^\\.\\//, \"\")];\n\t\t\t}, a.helper = function(a, b) {\n\t\t\t\to[a] = b;\n\t\t\t}, \"function\" == typeof define ? define(function() {\n\t\t\t\treturn a;\n\t\t\t}) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) {\n\t\t\t\tvar b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\");\n\t\t\t\treturn r += '<div class=\"mod_404\"> <div class=\"wrapper\" id=\"mainWrap\"> <div class=\"mod_hd\"> <h1 class=\"title\"><span class=\"title_inner\">404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01</span></h1> <div class=\"desc\"><a href=\"', r += c(d), r += '\" class=\"desc_link\">', r += c(e), r += '</a></div> </div> <div class=\"mod_bd\"> <div class=\"child_box\"> <div class=\"mod_404_child child_in\" data-id=\"', \n\t\t\t\tr += c(f), r += '\" id=\"top_', r += c(f), r += '\"> <div class=\"child_main cf\"> <div class=\"child_avatar\"><img src=\"', r += c(g), r += '\" onload=\"imagezoom(this, 160, 216);\" style=\"opacity:0\"></div> <div class=\"child_info\"> <div class=\"info_name\"> <h2><span class=\"name_inner\">', r += c(h), r += '</span><span class=\"info_sex\">(', r += c(i), r += ')</span></h2> </div> <div class=\"info_item info_birth\"><span class=\"info_lbl\">\\u51fa\\u751f\\u65e5\\u671f\\uff1a</span><span class=\"item_inner\">', r += c(j), \n\t\t\t\tr += '</span></div> <div class=\"info_item info_time\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a</span><span class=\"item_inner\">', r += c(l), r += '</span></div> <div class=\"info_item info_address\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u5730\\u70b9\\uff1a</span><span class=\"item_inner\">', r += c(m), r += '</span></div> <div class=\"info_item info_desc\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a</span><span class=\"item_inner\">', r += c(n), r += '</span></div> <a href=\"', \n\t\t\t\tr += c(o), r += '\" class=\"link_view\" title=\"\\u67e5\\u770b\\u8be6\\u60c5\"><span class=\"link_inner\">\\u67e5\\u770b\\u8be6\\u60c5</span></a> </div> </div> <div class=\"child_bottom cf\"> <div class=\"bottom_logo\"> <ul class=\"logo_list\"> <li><a href=\"http://e.t.qq.com/Tencent-Volunteers\" title=\"\\u817e\\u8baf\\u5fd7\\u613f\\u8005\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_tencentvolunteers.png\"></a></li> <li><a href=\"http://bbs.baobeihuijia.com/forum.php\" title=\"\\u5b9d\\u8d1d\\u56de\\u5bb6\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_baobeihuijia.png\"></a></li> </ul> </div> <div class=\"bottom_right\"> <div class=\"mod_share\" onmouseover=\"this.className += \\' mod_share_hover\\';\" onmouseout=\"this.className = this.className.replace(\\' mod_share_hover\\',\\'\\')\"> <span class=\"share_inner\">\\u5206\\u4eab</span> <ul class=\"share_list\"> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weibo\\');return false;\" title=\"\\u817e\\u8baf\\u5fae\\u535a\"><span class=\"link_inner\">\\u817e\\u8baf\\u5fae\\u535a</span><i class=\"ico_tencentweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'qzone\\');return false;\" title=\"QQ\\u7a7a\\u95f4\"><span class=\"link_inner\">QQ\\u7a7a\\u95f4</span><i class=\"ico_qzone\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'sina\\');return false;\" title=\"\\u65b0\\u6d6a\\u5fae\\u535a\"><span class=\"link_inner\">\\u65b0\\u6d6a\\u5fae\\u535a</span><i class=\"ico_sinaweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weixin\\');return false;\" title=\"\\u5fae\\u4fe1\"><span class=\"link_inner\">\\u5fae\\u4fe1</span><i class=\"ico_weixin\"></i></a></li> </ul> <span style=\"clear: both;\"></span> </div> </div> </div> </div> <i class=\"ico_corner\"></i> </div> </div> <div class=\"mod_fd\"> <div class=\"mod_404_children\"> <ul class=\"children_list\"> ', \n\t\t\t\tp(q, function(a) {\n\t\t\t\t\tr += ' <li class=\"', r += c(f == a._id ? \"current\" : \"\"), r += '\"><a href=\"javascript:;\" onclick=\"toThis(\\'', r += c(a._id), r += '\\');\" title=\"', r += c(a.name), r += '\" ><img src=\"', r += c(a.child_pic), r += '\"></a></li> ';\n\t\t\t\t}), r += \" </ul> </div> </div> </div> </div>\", new k(r);\n\t\t\t});\n\t}();\n</script>\n</body>\n</html>","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n\t<meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n\t<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n\t<meta name=\"robots\" content=\"all\">\n\t<meta name=\"robots\" content=\"index,follow\">\n</head>\n<body>\n\t<script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n</script>\n<script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n<script charset=\"utf-8\">\n\tvar QZONE = window.QZONE || {};\n\tfunction imagezoom(imgobj, box_w, box_h) {\n\t\tvar src_w = imgobj.width;\n\t\tvar src_h = imgobj.height;\n\t\tvar r1 = src_w / src_h, r2 = box_w / box_h;\n\t\tvar dst_w, dst_h;\n\t\tif (r1 > r2) {\n\t\t\tdst_w = box_w;\n\t\t\tdst_h = Math.round(dst_w / src_w * src_h);\n\t\t} else {\n\t\t\tif (r1 < r2) {\n\t\t\t\tdst_h = box_h;\n\t\t\t\tdst_w = Math.round(dst_h / src_h * src_w);\n\t\t\t} else {\n\t\t\t\tdst_w = box_w;\n\t\t\t\tdst_h = box_h;\n\t\t\t}\n\t\t}\n\t\timgobj.style.marginLeft = (box_w - dst_w) / 2 + \"px\";\n\t\timgobj.style.marginTop = (box_h - dst_h) / 2 + \"px\";\n\t\timgobj.style.width = dst_w + \"px\";\n\t\timgobj.style.height = dst_h + \"px\";\n\t\timgobj.style.opacity = 1;\n\t}\n\t(function(_w, _d) {\n\t\tvar ha = _d.head || _d.getElementsByTagName(\"head\")[0];\n\t\tvar $scope = {};\n\t\tvar current;\n\t\tvar tmnow;\n\t\tvar chId;\n\t\tvar homePageUrl, homePageName;\n\t\tvar scs = document.getElementsByTagName(\"script\");\n\t\tif (location.href.indexOf(\"fm.qq.com\") > -1 || location.href.indexOf(\"fm.qzone.qq.com\") > -1) {\n\t\t\thomePageName = \"\\u8fd4\\u56de\\u4f01\\u9e45FM\";\n\t\t\thomePageUrl = \"http://fm.qq.com\";\n\t\t} else {\n\t\t\tif (location.href.indexOf(\"qzone.qq.com\") > -1) {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u6211\\u7684\\u7a7a\\u95f4\";\n\t\t\t\thomePageUrl = \"http://qzone.qq.com\";\n\t\t\t} else {\n\t\t\t\thomePageName = \"\\u8fd4\\u56de\\u817e\\u8baf\\u7f51\";\n\t\t\t\thomePageUrl = \"http://www.qq.com\";\n\t\t\t}\n\t\t}\n\t\tfor (var i = 0;i < scs.length;i++) {\n\t\t\tif (scs[i].src.indexOf(\"404/search_children.js\") > -1) {\n\t\t\t\tif (scs[i].getAttribute(\"homePageUrl\")) {\n\t\t\t\t\thomePageUrl = scs[i].getAttribute(\"homePageUrl\");\n\t\t\t\t}\n\t\t\t\tif (scs[i].getAttribute(\"homePageName\")) {\n\t\t\t\t\thomePageName = scs[i].getAttribute(\"homePageName\");\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$scope.rettext = homePageName;\n\t\t$scope.retlink = homePageUrl;\n\t\tfunction getData(srcUrl, callback) {\n\t\t\tvar sc = _d.createElement(\"script\");\n\t\t\tfunction orc() {\n\t\t\t\tif (sc.readyState === \"loaded\") {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tcallback && callback();\n\t\t\t\t\t}, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (sc.addEventListener) {\n\t\t\t\tif (callback) {\n\t\t\t\t\tsc.addEventListener(\"load\", callback, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsc.attachEvent(\"onreadystatechange\", orc);\n\t\t\t}\n\t\t\tha && ha.appendChild(sc);\n\t\t\tsc.src = srcUrl;\n\t\t}\n\t\tfunction resolveData(d) {\n\t\t\tvar tid, len, ddata = [], tdata;\n\t\t\tif (\"object\" == typeof d && (d.data && (len = d.data.length))) {\n\t\t\t\tfor (var i = 0;i < len;i++) {\n\t\t\t\t\tvar expire = d.data[i].expire;\n\t\t\t\t\td.data[i]._id = new Date * Math.random() * Math.random() * 1E7;\n\t\t\t\t\tif (expire && tmnow * 1E3 < Date.parse(expire.replace(/\\s[\\s\\S]*$/, \"\").replace(/\\-/g, \"/\"))) {\n\t\t\t\t\t\tvar _c = d.data[i].city, _p = d.data[i].province;\n\t\t\t\t\t\tif (_c && city) {\n\t\t\t\t\t\t\tif ((\"_\" + _c + \"_\").indexOf(\"_\" + city + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (_p && province) {\n\t\t\t\t\t\t\tif ((\"_\" + _p + \"_\").indexOf(\"_\" + province + \"_\") > -1) {\n\t\t\t\t\t\t\t\tddata.push(d.data[i]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ttid = Math.floor(Math.random() * (ddata.length || len));\n\t\t\t\ttdata = (ddata.length ? ddata : d.data)[chId = tid];\n\t\t\t\tif (_w.foundjsondata) {\n\t\t\t\t\ttdata.ta = tdata.sex.indexOf(\"\\u5973\") > -1 ? \"\\u5979\" : \"\\u4ed6\";\n\t\t\t\t\ttdata.name = \"\\u201c7\\u00b718\\u7279\\u5927\\u62d0\\u5356\\u5a74\\u513f\\u6848\\u201d\\u544a\\u7834\\uff0c\\u88ab\\u89e3\\u6551\\u768415\\u540d\\u5b69\\u5b50\\u4e2d\\uff0c2\\u4eba\\u7531\\u4eb2\\u751f\\u7236\\u6bcd\\u9886\\u56de\\uff0c\\u4ecd\\u670913\\u540d\\u5b69\\u5b50\\u672a\\u627e\\u5230\\u4eb2\\u751f\\u7236\\u6bcd\\uff0c\\u88ab\\u5b89\\u7f6e\\u5728\\u60e0\\u5dde\\u5e02\\u793e\\u4f1a\\u798f\\u5229\\u9662\\uff0c\" + tdata.ta + \"\\u662f\\u5176\\u4e2d\\u4e4b\\u4e00\\u3002\";\n\t\t\t\t\ttdata.url = tdata.url.replace(/#p=(\\d{1,2})/, function(a, n) {\n\t\t\t\t\t\treturn \"#p=\" + (+n + 1);\n\t\t\t\t\t});\n\t\t\t\t\treturn format(tmpl2, tdata);\n\t\t\t\t}\n\t\t\t\tif (!tdata.ext1) {\n\t\t\t\t\ttdata.ext1 = \"\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5bfb\\u627e\\u5931\\u8e2a\\u5b9d\\u8d1d\";\n\t\t\t\t}\n\t\t\t\treturn tdata;\n\t\t\t}\n\t\t}\n\t\tfunction setTopData(tdata) {\n\t\t\tcurrent = tdata;\n\t\t\t$scope.topname = tdata.name;\n\t\t\t$scope.topgender = tdata.sex;\n\t\t\t$scope.topbirth = tdata.birth_time;\n\t\t\t$scope.toplostdate = tdata.lost_time;\n\t\t\t$scope.toplostplace = tdata.lost_place;\n\t\t\t$scope.toplostdesc = tdata.child_feature;\n\t\t\t$scope.toplink = tdata.url;\n\t\t\t$scope.topimg = tdata.child_pic;\n\t\t\t$scope.topid = tdata._id;\n\t\t\tdocument.body.innerHTML = template(\"body\", $scope);\n\t\t}\n\t\tfunction init(data) {\n\t\t\ttmnow = data.tm_now * 1E3;\n\t\t\tvar tdata = resolveData(jsondata);\n\t\t\t$scope.whichin = 0;\n\t\t\tjsondata.data.splice(chId, 1);\n\t\t\t$scope.otherdata = [tdata].concat(jsondata.data.slice(0, 5));\n\t\t\tsetTopData(tdata);\n\t\t}\n\t\tvar timeout;\n\t\twindow._Callback = function(d) {\n\t\t\tclearTimeout(timeout);\n\t\t\tinit(d);\n\t\t};\n\t\ttimeout = setTimeout(function() {\n\t\t\t_Callback({tm_now:(new Date).getTime() / 1E3});\n\t\t}, 2E3);\n\t\t_w.share = function(target) {\n\t\t\tvar summary = [\"\\u80cc\\u666f\\uff1a\", current.name, \"\\uff0c\\u6027\\u522b\\uff1a\", current.sex, \"\\uff0c\\u51fa\\u751f\\u65f6\\u95f4\\uff1a\", current.birth_time, \"\\uff0c\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a\", current.lost_time, \"\\uff0c\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a\", current.child_feature].join(\"\");\n\t\t\tif (summary) {\n\t\t\t\tsummary = \"#\\u5bfb\\u627e\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d#\" + summary;\n\t\t\t}\n\t\t\tvar stitle = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8be6\\u60c5\";\n\t\t\tvar desc = \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\";\n\t\t\tvar encode = encodeURIComponent;\n\t\t\tvar opts = {\"surl\":\"http://qzone.qq.com/gy/404/\" + current.id + \"/lostchild.html\", \"site\":\"QQ\\u7a7a\\u95f4\", \"summary\":summary || \"#\\u5b9d\\u8d1d\\u56de\\u5bb6#\\u817e\\u8baf\\u5fd7\\u613f\\u8005\\u7528\\u6280\\u672f\\u70b9\\u4eae\\u516c\\u76ca\\uff0c\\u8ba9\\u6211\\u4eec\\u4e00\\u8d77\\u5bfb\\u627e\\u8d70\\u5931\\u7684\\u513f\\u7ae5\\u5427\\uff01\", \"stitle\":stitle, \"pics\":current.child_pic, \"desc\":desc, \"origin_url\":current.url};\n\t\t\tvar surl = opts.surl || \"http://www.qq.com/404/\", summary = opts.summary || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u5185\\u5bb9\", stitle = opts.stitle || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u7684\\u6807\\u9898\", pics = opts.pics || \"http://qzonestyle.gtimg.cn/qzone_v6/act/img/20120422_qzone_7_years/pop_up/icon-pop-seven-years.png\", site = opts.site || \"\\u8fd9\\u4e2a\\u662f\\u5206\\u4eab\\u94fe\\u63a5\\u7684\\u6587\\u5b57\", desc = opts.desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", \n\t\t\torigin_url = opts.origin_url || \"http://www.qq.com/404/\";\n\t\t\tvar shareList = {weibo:{method:function(evt) {\n\t\t\t\tvar w = \"http://v.t.qq.com/share/share.php\", q = [\"?site=\", encode(surl + \"#via=share_t_weib\"), \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"weibo\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, qzone:{method:function(evt) {\n\t\t\t\tvar buff = [], ps = {url:surl + \"#via=404-qzoneshare\", desc:desc || \"\\u5931\\u8e2a\\u7684\\u5b9d\\u8d1d\\u8981\\u56de\\u5bb6\\uff0c\\u5feb\\u6765\\u53c2\\u4e0e\\u7231\\u5fc3\\u7684\\u4f20\\u9012\\u5427\\uff01\", summary:summary, title:stitle, pics:pics, site:site};\n\t\t\t\tfor (var k in ps) {\n\t\t\t\t\tbuff.push(k + \"=\" + encode(ps[k] || \"\"));\n\t\t\t\t}\n\t\t\t\tvar w = \"http://sns.qzone.qq.com/cgi-bin/qzshare/cgi_qzshare_onekey?\" + buff.join(\"&\"), q = [\"#via=share_t_qzone\", \"&title=\", encode(summary), \"&pic=\", encode(pics), \"&url=\", encode(surl)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"qzone\", \"width=700, height=680, top=0, left=0, toolbar=no, menubar=no, scrollbars=no, location=yes, resizable=no, status=no\");\n\t\t\t}}, sina:{method:function() {\n\t\t\t\tvar w = \"http://v.t.sina.com.cn/share/share.php\", q = [\"?url=\", encode(surl + \"#via=share_x_weib\"), \"&title=\", encode(summary), \"&source=\", \"&sourceUrl=\", surl, \"&content=utf-8\", \"&pic=\", encode(pics)].join(\"\"), p = [w, q].join(\"\");\n\t\t\t\topenit(p, \"sina\", \"toolbar=0,status=0,resizable=1,width=440,height=430\");\n\t\t\t}}, kaixin:{method:function() {\n\t\t\t\tvar n = \"http://www.kaixin001.com/repaste/bshare.php?rurl=\" + encode(surl + \"#via=share_kaixin\") + \"&rcontent=&rtitle=\" + encode(summary);\n\t\t\t\topenit(n, \"kaixin\", \"toolbar=0,status=0,resizable=1,width=600,height=360\");\n\t\t\t}}, renren:{method:function() {\n\t\t\t\tvar n = \"http://www.connect.renren.com/share/sharer?title=\" + encode(summary) + \"&url=\" + encode(surl + \"#via=share_renren\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=510,height=300\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}, weixin:{method:function() {\n\t\t\t\tvar n = \"http://qzone.qq.com/gy/404/page/qrcode.html?url=\" + encode(origin_url + \"#via=share_weixin\"), p = window.open(n, \"rr\", \"toolbar=0,status=0,resizable=1,width=620,height=430\");\n\t\t\t\tif (p) {\n\t\t\t\t\tp.focus();\n\t\t\t\t}\n\t\t\t}}};\n\t\t\tvar openit = function(u, n, p) {\n\t\t\t\tfunction o() {\n\t\t\t\t\tvar z;\n\t\t\t\t\tif (!(z = window.open(u, n, p))) {\n\t\t\t\t\t\tlocation.href = u;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tz.focus();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\to();\n\t\t\t};\n\t\t\tshareList[target] && shareList[target].method();\n\t\t};\n\t\t_w.toThis = function(id) {\n\t\t\tfor (var i = 0;i < $scope.otherdata.length;i++) {\n\t\t\t\tif ($scope.otherdata[i]._id == id) {\n\t\t\t\t\tsetTopData($scope.otherdata[i]);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\tvar meta = document.createElement(\"meta\");\n\t\tmeta.name = \"viewport\";\n\t\tmeta.content = \"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no\";\n\t\tha.appendChild(meta);\n\t\t(function registerStyle() {\n\t\t\tvar link = document.createElement(\"link\");\n\t\t\tlink.rel = \"stylesheet\";\n\t\t\tlink.type = \"text/css\";\n\t\t\tlink.href = \"https://qzone.qq.com/gy/404/style/404style.css\";\n\t\t\tha.appendChild(link);\n\t\t})();\n\t\t(function initStat() {\n\t\t\tvar qqDomainNameRE = /\\.qq\\.com$/i, qzoneDomainNameRE = /\\bqzone\\.qq\\.com$/i, qzsDomainNameRE = /\\bqzonestyle\\.gtimg\\.cn$/i;\n\t\t\tfunction cb() {\n\t\t\t\tvar url = location.host;\n\t\t\t\tvar src = \"\";\n\t\t\t\tif (qzoneDomainNameRE.test(url)) {\n\t\t\t\t\tsrc = \"new404.qzone\";\n\t\t\t\t} else {\n\t\t\t\t\tif (qqDomainNameRE.test(url)) {\n\t\t\t\t\t\tsrc = \"new404.qq\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (qzsDomainNameRE.test(url)) {\n\t\t\t\t\t\t\tsrc = \"new404.qzonestyle\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tsrc = url.replace(\".\", \"_\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t_w.TCISD && (_w.TCISD.pv && _w.TCISD.pv(\"hat.qzone.qq.com\", \"/gy/lostchild/\" + src));\n\t\t\t}\n\t\t\tgetData(\"https://qzonestyle.gtimg.cn/ac/qzfl/stat.js\", cb);\n\t\t})();\n\t\t})(window, document);\n\t\t!function() {\n\t\t\tfunction a(a, b) {\n\t\t\t\treturn(/string|function/.test(typeof b) ? h : g)(a, b);\n\t\t\t}\n\t\t\tfunction b(a, c) {\n\t\t\t\treturn \"string\" != typeof a && (c = typeof a, \"number\" === c ? a += \"\" : a = \"function\" === c ? b(a.call(a)) : \"\"), a;\n\t\t\t}\n\t\t\tfunction c(a) {\n\t\t\t\treturn l[a];\n\t\t\t}\n\t\t\tfunction d(a) {\n\t\t\t\treturn b(a).replace(/&(?![\\w#]+;)|[<>\"']/g, c);\n\t\t\t}\n\t\t\tfunction e(a, b) {\n\t\t\t\tif (m(a)) {\n\t\t\t\t\tfor (var c = 0, d = a.length;d > c;c++) {\n\t\t\t\t\t\tb.call(a, a[c], c, a);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tfor (c in a) {\n\t\t\t\t\t\tb.call(a, a[c], c);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfunction f(a, b) {\n\t\t\t\tvar c = /(\\/)[^/]+\\1\\.\\.\\1/, d = (\"./\" + a).replace(/[^/]+$/, \"\"), e = d + b;\n\t\t\t\tfor (e = e.replace(/\\/\\.\\//g, \"/\");e.match(c);) {\n\t\t\t\t\te = e.replace(c, \"/\");\n\t\t\t\t}\n\t\t\t\treturn e;\n\t\t\t}\n\t\t\tfunction g(b, c) {\n\t\t\t\tvar d = a.get(b) || i({filename:b, name:\"Render Error\", message:\"Template not found\"});\n\t\t\t\treturn c ? d(c) : d;\n\t\t\t}\n\t\t\tfunction h(a, b) {\n\t\t\t\tif (\"string\" == typeof b) {\n\t\t\t\t\tvar c = b;\n\t\t\t\t\tb = function() {\n\t\t\t\t\t\treturn new k(c);\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tvar d = j[a] = function(c) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new b(c, a) + \"\";\n\t\t\t\t\t} catch (d) {\n\t\t\t\t\t\treturn i(d)();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\treturn d.prototype = b.prototype = n, d.toString = function() {\n\t\t\t\t\treturn b + \"\";\n\t\t\t\t}, d;\n\t\t\t}\n\t\t\tfunction i(a) {\n\t\t\t\tvar b = \"{Template Error}\", c = a.stack || \"\";\n\t\t\t\tif (c) {\n\t\t\t\t\tc = c.split(\"\\n\").slice(0, 2).join(\"\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tfor (var d in a) {\n\t\t\t\t\t\tc += \"<\" + d + \">\\n\" + a[d] + \"\\n\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn function() {\n\t\t\t\t\treturn \"object\" == typeof console && console.error(b + \"\\n\\n\" + c), b;\n\t\t\t\t};\n\t\t\t}\n\t\t\tvar j = a.cache = {}, k = this.String, l = {\"<\":\"&#60;\", \">\":\"&#62;\", '\"':\"&#34;\", \"'\":\"&#39;\", \"&\":\"&#38;\"}, m = Array.isArray || function(a) {\n\t\t\t\treturn \"[object Array]\" === {}.toString.call(a);\n\t\t\t}, n = a.utils = {$helpers:{}, $include:function(a, b, c) {\n\t\t\t\treturn a = f(c, a), g(a, b);\n\t\t\t}, $string:b, $escape:d, $each:e}, o = a.helpers = n.$helpers;\n\t\t\ta.get = function(a) {\n\t\t\t\treturn j[a.replace(/^\\.\\//, \"\")];\n\t\t\t}, a.helper = function(a, b) {\n\t\t\t\to[a] = b;\n\t\t\t}, \"function\" == typeof define ? define(function() {\n\t\t\t\treturn a;\n\t\t\t}) : \"undefined\" != typeof exports ? module.exports = a : this.template = a, a(\"body\", function(a) {\n\t\t\t\tvar b = this, c = (b.$helpers, b.$escape), d = a.retlink, e = a.rettext, f = a.topid, g = a.topimg, h = a.topname, i = a.topgender, j = a.topbirth, l = a.toplostdate, m = a.toplostplace, n = a.toplostdesc, o = a.toplink, p = b.$each, q = a.otherdata, r = (a.otheritem, a.index, \"\");\n\t\t\t\treturn r += '<div class=\"mod_404\"> <div class=\"wrapper\" id=\"mainWrap\"> <div class=\"mod_hd\"> <h1 class=\"title\"><span class=\"title_inner\">404\\uff0c\\u60a8\\u8bbf\\u95ee\\u7684\\u9875\\u9762\\u627e\\u4e0d\\u56de\\u6765\\u4e86\\uff0c\\u4f46\\u6211\\u4eec\\u53ef\\u4ee5\\u4e00\\u8d77\\u5e2e\\u4ed6\\u4eec\\u56de\\u5bb6\\uff01</span></h1> <div class=\"desc\"><a href=\"', r += c(d), r += '\" class=\"desc_link\">', r += c(e), r += '</a></div> </div> <div class=\"mod_bd\"> <div class=\"child_box\"> <div class=\"mod_404_child child_in\" data-id=\"', \n\t\t\t\tr += c(f), r += '\" id=\"top_', r += c(f), r += '\"> <div class=\"child_main cf\"> <div class=\"child_avatar\"><img src=\"', r += c(g), r += '\" onload=\"imagezoom(this, 160, 216);\" style=\"opacity:0\"></div> <div class=\"child_info\"> <div class=\"info_name\"> <h2><span class=\"name_inner\">', r += c(h), r += '</span><span class=\"info_sex\">(', r += c(i), r += ')</span></h2> </div> <div class=\"info_item info_birth\"><span class=\"info_lbl\">\\u51fa\\u751f\\u65e5\\u671f\\uff1a</span><span class=\"item_inner\">', r += c(j), \n\t\t\t\tr += '</span></div> <div class=\"info_item info_time\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u65f6\\u95f4\\uff1a</span><span class=\"item_inner\">', r += c(l), r += '</span></div> <div class=\"info_item info_address\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u5730\\u70b9\\uff1a</span><span class=\"item_inner\">', r += c(m), r += '</span></div> <div class=\"info_item info_desc\"><span class=\"info_lbl\">\\u5931\\u8e2a\\u4eba\\u7279\\u5f81\\u63cf\\u8ff0\\uff1a</span><span class=\"item_inner\">', r += c(n), r += '</span></div> <a href=\"', \n\t\t\t\tr += c(o), r += '\" class=\"link_view\" title=\"\\u67e5\\u770b\\u8be6\\u60c5\"><span class=\"link_inner\">\\u67e5\\u770b\\u8be6\\u60c5</span></a> </div> </div> <div class=\"child_bottom cf\"> <div class=\"bottom_logo\"> <ul class=\"logo_list\"> <li><a href=\"http://e.t.qq.com/Tencent-Volunteers\" title=\"\\u817e\\u8baf\\u5fd7\\u613f\\u8005\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_tencentvolunteers.png\"></a></li> <li><a href=\"http://bbs.baobeihuijia.com/forum.php\" title=\"\\u5b9d\\u8d1d\\u56de\\u5bb6\"><img src=\"http://qzone.qq.com/gy/404/style/image/logo_baobeihuijia.png\"></a></li> </ul> </div> <div class=\"bottom_right\"> <div class=\"mod_share\" onmouseover=\"this.className += \\' mod_share_hover\\';\" onmouseout=\"this.className = this.className.replace(\\' mod_share_hover\\',\\'\\')\"> <span class=\"share_inner\">\\u5206\\u4eab</span> <ul class=\"share_list\"> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weibo\\');return false;\" title=\"\\u817e\\u8baf\\u5fae\\u535a\"><span class=\"link_inner\">\\u817e\\u8baf\\u5fae\\u535a</span><i class=\"ico_tencentweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'qzone\\');return false;\" title=\"QQ\\u7a7a\\u95f4\"><span class=\"link_inner\">QQ\\u7a7a\\u95f4</span><i class=\"ico_qzone\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'sina\\');return false;\" title=\"\\u65b0\\u6d6a\\u5fae\\u535a\"><span class=\"link_inner\">\\u65b0\\u6d6a\\u5fae\\u535a</span><i class=\"ico_sinaweibo\"></i></a></li> <li><a href=\"javascript:void(0);\" class=\"share_link\" onclick=\"share(\\'weixin\\');return false;\" title=\"\\u5fae\\u4fe1\"><span class=\"link_inner\">\\u5fae\\u4fe1</span><i class=\"ico_weixin\"></i></a></li> </ul> <span style=\"clear: both;\"></span> </div> </div> </div> </div> <i class=\"ico_corner\"></i> </div> </div> <div class=\"mod_fd\"> <div class=\"mod_404_children\"> <ul class=\"children_list\"> ', \n\t\t\t\tp(q, function(a) {\n\t\t\t\t\tr += ' <li class=\"', r += c(f == a._id ? \"current\" : \"\"), r += '\"><a href=\"javascript:;\" onclick=\"toThis(\\'', r += c(a._id), r += '\\');\" title=\"', r += c(a.name), r += '\" ><img src=\"', r += c(a.child_pic), r += '\"></a></li> ';\n\t\t\t\t}), r += \" </ul> </div> </div> </div> </div>\", new k(r);\n\t\t\t});\n\t}();\n</script>\n</body>\n</html>"},{"title":"about","date":"2017-03-13T09:09:06.000Z","_content":"\n## 关于我\nIT届的民工扛把子，一只茁壮成长的后端小菜鸟，欢迎分享知识，一起飞翔。\nFrom  王志鹏\n\ngithub：[https://github.com/zhipenwang](https://github.com/zhipenwang)\n看云在线文档：[https://www.kancloud.cn/@zhipeng](https://www.kancloud.cn/@zhipeng)\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-03-13 17:09:06\n---\n\n## 关于我\nIT届的民工扛把子，一只茁壮成长的后端小菜鸟，欢迎分享知识，一起飞翔。\nFrom  王志鹏\n\ngithub：[https://github.com/zhipenwang](https://github.com/zhipenwang)\n看云在线文档：[https://www.kancloud.cn/@zhipeng](https://www.kancloud.cn/@zhipeng)\n","updated":"2019-04-09T14:02:03.296Z","path":"about/index.html","comments":1,"layout":"page","_id":"cju9wdma90002vjcg281t3z28","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>IT届的民工扛把子，一只茁壮成长的后端小菜鸟，欢迎分享知识，一起飞翔。<br>From  王志鹏</p>\n<p>github：<a href=\"https://github.com/zhipenwang\" target=\"_blank\" rel=\"noopener\">https://github.com/zhipenwang</a><br>看云在线文档：<a href=\"https://www.kancloud.cn/@zhipeng\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/@zhipeng</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>IT届的民工扛把子，一只茁壮成长的后端小菜鸟，欢迎分享知识，一起飞翔。<br>From  王志鹏</p>\n<p>github：<a href=\"https://github.com/zhipenwang\" target=\"_blank\" rel=\"noopener\">https://github.com/zhipenwang</a><br>看云在线文档：<a href=\"https://www.kancloud.cn/@zhipeng\" target=\"_blank\" rel=\"noopener\">https://www.kancloud.cn/@zhipeng</a></p>\n"},{"title":"categories","date":"2018-02-13T09:05:26.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2018-02-13 17:05:26\ntype: \"categories\"\n---\n","updated":"2019-04-09T14:02:03.296Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cju9wdmad0006vjcgh08hmkx0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2017-04-13T05:27:05.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-04-13 13:27:05\ntype: \"tags\"\n---\n","updated":"2019-04-09T14:02:03.311Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cju9wdmf00044vjcgp2vpcdn6","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"初始算法","date":"2018-02-13T09:21:01.000Z","_content":">算法：程序的灵魂\n\n> 算法：algorithm\n\n算法五大特征：\n* 1、有穷性：保证执行有限步骤后结束\n* 2、确切性：每一步骤都有确切的意义\n* 3、输入：每个算法都有零个或多个输入，以刻画运算对象的初始情况，所谓零个输入是指算法本身定除了初始条件\n* 4、输出：每个算法都有一个或多个输出，显示对输入数据加工后的结果。没有输出的算法是毫无意义的\n* 5、可行性：在原则上算法能够精确地运行，进行优先次运算后即可完成的一种运算。\n\n> 算法的逻辑、流程。\n计算机中的算法，分为两大类：数值运算算法（求解数值）、非数值运算算法（事务管理领域）。\n算法是计算机处理信息的本质，因为计算机程序本质上是一个算法，告诉计算机确切的步骤来执行一个指定的任务。\n\n>著名计算机科学家沃思公式：数据结构+算法=程序。\n\n一个程序应当采用结构化程序设计方法进行程序设计，并且用某一种计算机语言来表示，因此，下面的公式更加贴切：\n\n>程序=算法+数据结构+程序设计方法+语言和环境\n\n### 流程图来表示算法：\n![](/img/screenshot_1513006093776.png)\n\n>流程图的结构：顺序结构、选择结构、循环结构\n\n### N-S图\n>N-S流程图：代表计算机的算法。由一些特定意义的图像、流程线及简要的文字说明构成，能够清晰明确的表示程序的运行过程。（整个程序写在一个大框图内，由若干个小的基础框图构成，简称N-S图）\n\n![](/img/screenshot_1513006588835.png)\n\n### 计算机语言的算法表示\n计算机语言表示算法的时候，必须严格遵循使用语言的语法规则。\n\n### 学好算法的秘诀\n1、学的深入，基础扎实\n2、恒心、演练、举一反三\n3、语言之争的时代更要学会坚持","source":"_posts/algorithm.md","raw":"---\ntitle: 初始算法\ndate: 2018-02-13 17:21:01\ntags: [算法,结构]\ncategories: 算法与结构\n---\n>算法：程序的灵魂\n\n> 算法：algorithm\n\n算法五大特征：\n* 1、有穷性：保证执行有限步骤后结束\n* 2、确切性：每一步骤都有确切的意义\n* 3、输入：每个算法都有零个或多个输入，以刻画运算对象的初始情况，所谓零个输入是指算法本身定除了初始条件\n* 4、输出：每个算法都有一个或多个输出，显示对输入数据加工后的结果。没有输出的算法是毫无意义的\n* 5、可行性：在原则上算法能够精确地运行，进行优先次运算后即可完成的一种运算。\n\n> 算法的逻辑、流程。\n计算机中的算法，分为两大类：数值运算算法（求解数值）、非数值运算算法（事务管理领域）。\n算法是计算机处理信息的本质，因为计算机程序本质上是一个算法，告诉计算机确切的步骤来执行一个指定的任务。\n\n>著名计算机科学家沃思公式：数据结构+算法=程序。\n\n一个程序应当采用结构化程序设计方法进行程序设计，并且用某一种计算机语言来表示，因此，下面的公式更加贴切：\n\n>程序=算法+数据结构+程序设计方法+语言和环境\n\n### 流程图来表示算法：\n![](/img/screenshot_1513006093776.png)\n\n>流程图的结构：顺序结构、选择结构、循环结构\n\n### N-S图\n>N-S流程图：代表计算机的算法。由一些特定意义的图像、流程线及简要的文字说明构成，能够清晰明确的表示程序的运行过程。（整个程序写在一个大框图内，由若干个小的基础框图构成，简称N-S图）\n\n![](/img/screenshot_1513006588835.png)\n\n### 计算机语言的算法表示\n计算机语言表示算法的时候，必须严格遵循使用语言的语法规则。\n\n### 学好算法的秘诀\n1、学的深入，基础扎实\n2、恒心、演练、举一反三\n3、语言之争的时代更要学会坚持","slug":"algorithm","published":1,"updated":"2019-04-09T14:02:03.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdma60001vjcgj6xanx8a","content":"<blockquote>\n<p>算法：程序的灵魂</p>\n</blockquote>\n<blockquote>\n<p>算法：algorithm</p>\n</blockquote>\n<p>算法五大特征：</p>\n<ul>\n<li>1、有穷性：保证执行有限步骤后结束</li>\n<li>2、确切性：每一步骤都有确切的意义</li>\n<li>3、输入：每个算法都有零个或多个输入，以刻画运算对象的初始情况，所谓零个输入是指算法本身定除了初始条件</li>\n<li>4、输出：每个算法都有一个或多个输出，显示对输入数据加工后的结果。没有输出的算法是毫无意义的</li>\n<li>5、可行性：在原则上算法能够精确地运行，进行优先次运算后即可完成的一种运算。</li>\n</ul>\n<blockquote>\n<p>算法的逻辑、流程。<br>计算机中的算法，分为两大类：数值运算算法（求解数值）、非数值运算算法（事务管理领域）。<br>算法是计算机处理信息的本质，因为计算机程序本质上是一个算法，告诉计算机确切的步骤来执行一个指定的任务。</p>\n</blockquote>\n<blockquote>\n<p>著名计算机科学家沃思公式：数据结构+算法=程序。</p>\n</blockquote>\n<p>一个程序应当采用结构化程序设计方法进行程序设计，并且用某一种计算机语言来表示，因此，下面的公式更加贴切：</p>\n<blockquote>\n<p>程序=算法+数据结构+程序设计方法+语言和环境</p>\n</blockquote>\n<h3 id=\"流程图来表示算法：\"><a href=\"#流程图来表示算法：\" class=\"headerlink\" title=\"流程图来表示算法：\"></a>流程图来表示算法：</h3><p><img src=\"/img/screenshot_1513006093776.png\" alt=\"\"></p>\n<blockquote>\n<p>流程图的结构：顺序结构、选择结构、循环结构</p>\n</blockquote>\n<h3 id=\"N-S图\"><a href=\"#N-S图\" class=\"headerlink\" title=\"N-S图\"></a>N-S图</h3><blockquote>\n<p>N-S流程图：代表计算机的算法。由一些特定意义的图像、流程线及简要的文字说明构成，能够清晰明确的表示程序的运行过程。（整个程序写在一个大框图内，由若干个小的基础框图构成，简称N-S图）</p>\n</blockquote>\n<p><img src=\"/img/screenshot_1513006588835.png\" alt=\"\"></p>\n<h3 id=\"计算机语言的算法表示\"><a href=\"#计算机语言的算法表示\" class=\"headerlink\" title=\"计算机语言的算法表示\"></a>计算机语言的算法表示</h3><p>计算机语言表示算法的时候，必须严格遵循使用语言的语法规则。</p>\n<h3 id=\"学好算法的秘诀\"><a href=\"#学好算法的秘诀\" class=\"headerlink\" title=\"学好算法的秘诀\"></a>学好算法的秘诀</h3><p>1、学的深入，基础扎实<br>2、恒心、演练、举一反三<br>3、语言之争的时代更要学会坚持</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>算法：程序的灵魂</p>\n</blockquote>\n<blockquote>\n<p>算法：algorithm</p>\n</blockquote>\n<p>算法五大特征：</p>\n<ul>\n<li>1、有穷性：保证执行有限步骤后结束</li>\n<li>2、确切性：每一步骤都有确切的意义</li>\n<li>3、输入：每个算法都有零个或多个输入，以刻画运算对象的初始情况，所谓零个输入是指算法本身定除了初始条件</li>\n<li>4、输出：每个算法都有一个或多个输出，显示对输入数据加工后的结果。没有输出的算法是毫无意义的</li>\n<li>5、可行性：在原则上算法能够精确地运行，进行优先次运算后即可完成的一种运算。</li>\n</ul>\n<blockquote>\n<p>算法的逻辑、流程。<br>计算机中的算法，分为两大类：数值运算算法（求解数值）、非数值运算算法（事务管理领域）。<br>算法是计算机处理信息的本质，因为计算机程序本质上是一个算法，告诉计算机确切的步骤来执行一个指定的任务。</p>\n</blockquote>\n<blockquote>\n<p>著名计算机科学家沃思公式：数据结构+算法=程序。</p>\n</blockquote>\n<p>一个程序应当采用结构化程序设计方法进行程序设计，并且用某一种计算机语言来表示，因此，下面的公式更加贴切：</p>\n<blockquote>\n<p>程序=算法+数据结构+程序设计方法+语言和环境</p>\n</blockquote>\n<h3 id=\"流程图来表示算法：\"><a href=\"#流程图来表示算法：\" class=\"headerlink\" title=\"流程图来表示算法：\"></a>流程图来表示算法：</h3><p><img src=\"/img/screenshot_1513006093776.png\" alt=\"\"></p>\n<blockquote>\n<p>流程图的结构：顺序结构、选择结构、循环结构</p>\n</blockquote>\n<h3 id=\"N-S图\"><a href=\"#N-S图\" class=\"headerlink\" title=\"N-S图\"></a>N-S图</h3><blockquote>\n<p>N-S流程图：代表计算机的算法。由一些特定意义的图像、流程线及简要的文字说明构成，能够清晰明确的表示程序的运行过程。（整个程序写在一个大框图内，由若干个小的基础框图构成，简称N-S图）</p>\n</blockquote>\n<p><img src=\"/img/screenshot_1513006588835.png\" alt=\"\"></p>\n<h3 id=\"计算机语言的算法表示\"><a href=\"#计算机语言的算法表示\" class=\"headerlink\" title=\"计算机语言的算法表示\"></a>计算机语言的算法表示</h3><p>计算机语言表示算法的时候，必须严格遵循使用语言的语法规则。</p>\n<h3 id=\"学好算法的秘诀\"><a href=\"#学好算法的秘诀\" class=\"headerlink\" title=\"学好算法的秘诀\"></a>学好算法的秘诀</h3><p>1、学的深入，基础扎实<br>2、恒心、演练、举一反三<br>3、语言之争的时代更要学会坚持</p>\n"},{"title":"博客的意义","date":"2017-03-17T11:21:01.000Z","_content":"*文中内容仅是个人观点，不喜随便喷，如有雷同，欢迎交流*\n## 为什么有开博客的想法呢？\n      \n作为一名后端攻城狮，在各种“撸码”的过程中经常会碰到一些萝卜坑，当然及时植入了萝卜。开始填的时候也不以为常，管他下次会不会被挖再露出坑，慢慢学习的过程中遇到了更多的坑，觉得有点烧闹了，开始各种方式去学着记录，D、E、F盘塞了各种记录文本，慢慢发现这种方式查阅起来很是麻烦，而且最关键的是，有一次打开我记录了几千行的笔记，结果发现乱码了（原因是一直用gbk去写的，某一次脑短路用了默认utf格式的编辑器打开，整篇文档都乱码，又手贱的去直接在编辑器中点错了其他格式还保存，果然是自作孽不可活），后来各种软件编辑器尝试，越来越不认识其字符了，不过对咱来说，没法补救的东西失去了那就从头再来呗。这个时候开始打算换一种方式来记录一些自己遇到的坑和一些有价值的内容，同时也可以在一个平台上跟其他有深度的人沟通学习成长，所以打算在大平台去搭建一个属于个人的主页。\n\n其中， 新浪博客、QQ空间、CSDN等“个人主页”都流行很久了，所以有越来越多的人开始考虑搭建一个真正属于自己的“个人主页”，个人博客建站也越来越流行。\n那么搭建个人博客的目的无非是以下几点：\n> * 作为一个展示个性的平台\n> 搭建一个展示个人观点、爱好、经历的良好平台，跟那些流行的新浪博客和QQ空间不一样，个人博客可以很灵活自由的去设计ownerstyle的网站。\n> * 作为一个知识积累的海洋\n> 不管是从事文学、管理、IT开发，都可以通过这个平台去记录一些有价值对自己有影响的内容，积累成一个属于自己知识的海洋\n> * 作为一个交流分享的平台\n> 不仅仅把自己的知识积累下来，更大程度的去分享，了解别人的一些不同看法，沟通完善一些自我的缺陷，学习别人更广的知识\n\n作为一个攻城狮，要时刻去接触互联网新的思想，去真正参与到互联网中，既然决定了写博客，那么自己动手去搭建一个专属的博客，然后一步步去推广，不仅仅会带来前进的动力，其实也会慢慢去接触学习到什么才是真正的SEO（搜索引擎--百度搜索排行其实很大程度就是靠这个），也会去认识到网络推广。\n对目前的我而言，那就是希望坚持下去，作为一个自我价值的体现，在未来的工作或者社交中能够以这个平台去让别人了解自己，成为自我的一个标识。\n","source":"_posts/blog.md","raw":"---\ntitle: 博客的意义\ndate: 2017-03-17 19:21:01\ntags: Article\ncategories: 博客思维\n---\n*文中内容仅是个人观点，不喜随便喷，如有雷同，欢迎交流*\n## 为什么有开博客的想法呢？\n      \n作为一名后端攻城狮，在各种“撸码”的过程中经常会碰到一些萝卜坑，当然及时植入了萝卜。开始填的时候也不以为常，管他下次会不会被挖再露出坑，慢慢学习的过程中遇到了更多的坑，觉得有点烧闹了，开始各种方式去学着记录，D、E、F盘塞了各种记录文本，慢慢发现这种方式查阅起来很是麻烦，而且最关键的是，有一次打开我记录了几千行的笔记，结果发现乱码了（原因是一直用gbk去写的，某一次脑短路用了默认utf格式的编辑器打开，整篇文档都乱码，又手贱的去直接在编辑器中点错了其他格式还保存，果然是自作孽不可活），后来各种软件编辑器尝试，越来越不认识其字符了，不过对咱来说，没法补救的东西失去了那就从头再来呗。这个时候开始打算换一种方式来记录一些自己遇到的坑和一些有价值的内容，同时也可以在一个平台上跟其他有深度的人沟通学习成长，所以打算在大平台去搭建一个属于个人的主页。\n\n其中， 新浪博客、QQ空间、CSDN等“个人主页”都流行很久了，所以有越来越多的人开始考虑搭建一个真正属于自己的“个人主页”，个人博客建站也越来越流行。\n那么搭建个人博客的目的无非是以下几点：\n> * 作为一个展示个性的平台\n> 搭建一个展示个人观点、爱好、经历的良好平台，跟那些流行的新浪博客和QQ空间不一样，个人博客可以很灵活自由的去设计ownerstyle的网站。\n> * 作为一个知识积累的海洋\n> 不管是从事文学、管理、IT开发，都可以通过这个平台去记录一些有价值对自己有影响的内容，积累成一个属于自己知识的海洋\n> * 作为一个交流分享的平台\n> 不仅仅把自己的知识积累下来，更大程度的去分享，了解别人的一些不同看法，沟通完善一些自我的缺陷，学习别人更广的知识\n\n作为一个攻城狮，要时刻去接触互联网新的思想，去真正参与到互联网中，既然决定了写博客，那么自己动手去搭建一个专属的博客，然后一步步去推广，不仅仅会带来前进的动力，其实也会慢慢去接触学习到什么才是真正的SEO（搜索引擎--百度搜索排行其实很大程度就是靠这个），也会去认识到网络推广。\n对目前的我而言，那就是希望坚持下去，作为一个自我价值的体现，在未来的工作或者社交中能够以这个平台去让别人了解自己，成为自我的一个标识。\n","slug":"blog","published":1,"updated":"2019-04-09T14:02:03.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmaa0003vjcglxfrstoc","content":"<p><em>文中内容仅是个人观点，不喜随便喷，如有雷同，欢迎交流</em></p>\n<h2 id=\"为什么有开博客的想法呢？\"><a href=\"#为什么有开博客的想法呢？\" class=\"headerlink\" title=\"为什么有开博客的想法呢？\"></a>为什么有开博客的想法呢？</h2><p>作为一名后端攻城狮，在各种“撸码”的过程中经常会碰到一些萝卜坑，当然及时植入了萝卜。开始填的时候也不以为常，管他下次会不会被挖再露出坑，慢慢学习的过程中遇到了更多的坑，觉得有点烧闹了，开始各种方式去学着记录，D、E、F盘塞了各种记录文本，慢慢发现这种方式查阅起来很是麻烦，而且最关键的是，有一次打开我记录了几千行的笔记，结果发现乱码了（原因是一直用gbk去写的，某一次脑短路用了默认utf格式的编辑器打开，整篇文档都乱码，又手贱的去直接在编辑器中点错了其他格式还保存，果然是自作孽不可活），后来各种软件编辑器尝试，越来越不认识其字符了，不过对咱来说，没法补救的东西失去了那就从头再来呗。这个时候开始打算换一种方式来记录一些自己遇到的坑和一些有价值的内容，同时也可以在一个平台上跟其他有深度的人沟通学习成长，所以打算在大平台去搭建一个属于个人的主页。</p>\n<p>其中， 新浪博客、QQ空间、CSDN等“个人主页”都流行很久了，所以有越来越多的人开始考虑搭建一个真正属于自己的“个人主页”，个人博客建站也越来越流行。<br>那么搭建个人博客的目的无非是以下几点：</p>\n<blockquote>\n<ul>\n<li>作为一个展示个性的平台<br>搭建一个展示个人观点、爱好、经历的良好平台，跟那些流行的新浪博客和QQ空间不一样，个人博客可以很灵活自由的去设计ownerstyle的网站。</li>\n<li>作为一个知识积累的海洋<br>不管是从事文学、管理、IT开发，都可以通过这个平台去记录一些有价值对自己有影响的内容，积累成一个属于自己知识的海洋</li>\n<li>作为一个交流分享的平台<br>不仅仅把自己的知识积累下来，更大程度的去分享，了解别人的一些不同看法，沟通完善一些自我的缺陷，学习别人更广的知识</li>\n</ul>\n</blockquote>\n<p>作为一个攻城狮，要时刻去接触互联网新的思想，去真正参与到互联网中，既然决定了写博客，那么自己动手去搭建一个专属的博客，然后一步步去推广，不仅仅会带来前进的动力，其实也会慢慢去接触学习到什么才是真正的SEO（搜索引擎–百度搜索排行其实很大程度就是靠这个），也会去认识到网络推广。<br>对目前的我而言，那就是希望坚持下去，作为一个自我价值的体现，在未来的工作或者社交中能够以这个平台去让别人了解自己，成为自我的一个标识。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><em>文中内容仅是个人观点，不喜随便喷，如有雷同，欢迎交流</em></p>\n<h2 id=\"为什么有开博客的想法呢？\"><a href=\"#为什么有开博客的想法呢？\" class=\"headerlink\" title=\"为什么有开博客的想法呢？\"></a>为什么有开博客的想法呢？</h2><p>作为一名后端攻城狮，在各种“撸码”的过程中经常会碰到一些萝卜坑，当然及时植入了萝卜。开始填的时候也不以为常，管他下次会不会被挖再露出坑，慢慢学习的过程中遇到了更多的坑，觉得有点烧闹了，开始各种方式去学着记录，D、E、F盘塞了各种记录文本，慢慢发现这种方式查阅起来很是麻烦，而且最关键的是，有一次打开我记录了几千行的笔记，结果发现乱码了（原因是一直用gbk去写的，某一次脑短路用了默认utf格式的编辑器打开，整篇文档都乱码，又手贱的去直接在编辑器中点错了其他格式还保存，果然是自作孽不可活），后来各种软件编辑器尝试，越来越不认识其字符了，不过对咱来说，没法补救的东西失去了那就从头再来呗。这个时候开始打算换一种方式来记录一些自己遇到的坑和一些有价值的内容，同时也可以在一个平台上跟其他有深度的人沟通学习成长，所以打算在大平台去搭建一个属于个人的主页。</p>\n<p>其中， 新浪博客、QQ空间、CSDN等“个人主页”都流行很久了，所以有越来越多的人开始考虑搭建一个真正属于自己的“个人主页”，个人博客建站也越来越流行。<br>那么搭建个人博客的目的无非是以下几点：</p>\n<blockquote>\n<ul>\n<li>作为一个展示个性的平台<br>搭建一个展示个人观点、爱好、经历的良好平台，跟那些流行的新浪博客和QQ空间不一样，个人博客可以很灵活自由的去设计ownerstyle的网站。</li>\n<li>作为一个知识积累的海洋<br>不管是从事文学、管理、IT开发，都可以通过这个平台去记录一些有价值对自己有影响的内容，积累成一个属于自己知识的海洋</li>\n<li>作为一个交流分享的平台<br>不仅仅把自己的知识积累下来，更大程度的去分享，了解别人的一些不同看法，沟通完善一些自我的缺陷，学习别人更广的知识</li>\n</ul>\n</blockquote>\n<p>作为一个攻城狮，要时刻去接触互联网新的思想，去真正参与到互联网中，既然决定了写博客，那么自己动手去搭建一个专属的博客，然后一步步去推广，不仅仅会带来前进的动力，其实也会慢慢去接触学习到什么才是真正的SEO（搜索引擎–百度搜索排行其实很大程度就是靠这个），也会去认识到网络推广。<br>对目前的我而言，那就是希望坚持下去，作为一个自我价值的体现，在未来的工作或者社交中能够以这个平台去让别人了解自己，成为自我的一个标识。</p>\n"},{"title":"Hexo添加字数统计、阅读时长、浏览次数","date":"2017-04-19T11:21:01.000Z","_content":"## 统计插件\n\n### 配置\nNexT 主题默认已经集成了文章【浏览次数】、【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要修改主题配置文件 _config.yml 即可。如下所示：\n配置浏览次数\n```\nbusuanzi_count:\n  # count values only if the other configs are false\n  enable: true\n  # custom uv span for the whole site\n  site_uv: true\n  site_uv_header: <i class=\"fa fa-user\"></i> 访问人数\n  site_uv_footer:\n  # custom pv span for the whole site\n  site_pv: true\n  site_pv_header: <i class=\"fa fa-eye\"></i> 总访问量\n  site_pv_footer:\n  # custom pv span for one page only\n  page_pv: true\n  page_pv_header: <i class=\"fa fa-file-o\"></i> 浏览\n  page_pv_footer: 次\n\n```\n配置字数统计、阅读时长，wordcount与min2read统计功能\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true         # 单篇 字数统计\n  min2read: true          # 单篇 阅读时长\n  totalcount: false       # 网站 字数统计\n  separated_meta: true\n```\n\n预览的时候如果出现字数统计和阅读时长失效的情况，一般是因为没有安装 hexo-wordcount 插件，查看 Hexo 插件：\n```\nhexo --debug\n``\n### 安装\n\n如果没有安装 hexo-wordcount 插件，先安装该插件：\n```\nnpm i --save hexo-wordcount\n```\n*** Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：***\n```\nnpm install hexo-wordcount@2 --save\n```\n安装完成后，重新执行启动服务预览就可以了。\n\n### 显示文字\n\n打开`post.swig`文件，路径如下：`xxx_blog/themes/next/layout/_macro/post.swig`\n\n![](/img/view_count.png)","source":"_posts/blog_view.md","raw":"---\ntitle: Hexo添加字数统计、阅读时长、浏览次数\ndate: 2017-04-19 19:21:01\ntags: [hexo,next]\ncategories: 搭建博客\n---\n## 统计插件\n\n### 配置\nNexT 主题默认已经集成了文章【浏览次数】、【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要修改主题配置文件 _config.yml 即可。如下所示：\n配置浏览次数\n```\nbusuanzi_count:\n  # count values only if the other configs are false\n  enable: true\n  # custom uv span for the whole site\n  site_uv: true\n  site_uv_header: <i class=\"fa fa-user\"></i> 访问人数\n  site_uv_footer:\n  # custom pv span for the whole site\n  site_pv: true\n  site_pv_header: <i class=\"fa fa-eye\"></i> 总访问量\n  site_pv_footer:\n  # custom pv span for one page only\n  page_pv: true\n  page_pv_header: <i class=\"fa fa-file-o\"></i> 浏览\n  page_pv_footer: 次\n\n```\n配置字数统计、阅读时长，wordcount与min2read统计功能\n```\n# Post wordcount display settings\n# Dependencies: https://github.com/willin/hexo-wordcount\npost_wordcount:\n  item_text: true\n  wordcount: true         # 单篇 字数统计\n  min2read: true          # 单篇 阅读时长\n  totalcount: false       # 网站 字数统计\n  separated_meta: true\n```\n\n预览的时候如果出现字数统计和阅读时长失效的情况，一般是因为没有安装 hexo-wordcount 插件，查看 Hexo 插件：\n```\nhexo --debug\n``\n### 安装\n\n如果没有安装 hexo-wordcount 插件，先安装该插件：\n```\nnpm i --save hexo-wordcount\n```\n*** Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：***\n```\nnpm install hexo-wordcount@2 --save\n```\n安装完成后，重新执行启动服务预览就可以了。\n\n### 显示文字\n\n打开`post.swig`文件，路径如下：`xxx_blog/themes/next/layout/_macro/post.swig`\n\n![](/img/view_count.png)","slug":"blog_view","published":1,"updated":"2019-04-09T14:02:03.291Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmae0007vjcgvwxkb6oo","content":"<h2 id=\"统计插件\"><a href=\"#统计插件\" class=\"headerlink\" title=\"统计插件\"></a>统计插件</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>NexT 主题默认已经集成了文章【浏览次数】、【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要修改主题配置文件 _config.yml 即可。如下所示：<br>配置浏览次数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi_count:</span><br><span class=\"line\">  # count values only if the other configs are false</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # custom uv span for the whole site</span><br><span class=\"line\">  site_uv: true</span><br><span class=\"line\">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 访问人数</span><br><span class=\"line\">  site_uv_footer:</span><br><span class=\"line\">  # custom pv span for the whole site</span><br><span class=\"line\">  site_pv: true</span><br><span class=\"line\">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 总访问量</span><br><span class=\"line\">  site_pv_footer:</span><br><span class=\"line\">  # custom pv span for one page only</span><br><span class=\"line\">  page_pv: true</span><br><span class=\"line\">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 浏览</span><br><span class=\"line\">  page_pv_footer: 次</span><br></pre></td></tr></table></figure></p>\n<p>配置字数统计、阅读时长，wordcount与min2read统计功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post wordcount display settings</span><br><span class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class=\"line\">post_wordcount:</span><br><span class=\"line\">  item_text: true</span><br><span class=\"line\">  wordcount: true         # 单篇 字数统计</span><br><span class=\"line\">  min2read: true          # 单篇 阅读时长</span><br><span class=\"line\">  totalcount: false       # 网站 字数统计</span><br><span class=\"line\">  separated_meta: true</span><br></pre></td></tr></table></figure></p>\n<p>预览的时候如果出现字数统计和阅读时长失效的情况，一般是因为没有安装 hexo-wordcount 插件，查看 Hexo 插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo --debug</span><br><span class=\"line\">``</span><br><span class=\"line\">### 安装</span><br><span class=\"line\"></span><br><span class=\"line\">如果没有安装 hexo-wordcount 插件，先安装该插件：</span><br></pre></td></tr></table></figure></p>\n<p>npm i –save hexo-wordcount<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：***</span><br></pre></td></tr></table></figure></p>\n<p>npm install hexo-wordcount@2 –save<br><code>`</code><br>安装完成后，重新执行启动服务预览就可以了。</p>\n<h3 id=\"显示文字\"><a href=\"#显示文字\" class=\"headerlink\" title=\"显示文字\"></a>显示文字</h3><p>打开<code>post.swig</code>文件，路径如下：<code>xxx_blog/themes/next/layout/_macro/post.swig</code></p>\n<p><img src=\"/img/view_count.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"统计插件\"><a href=\"#统计插件\" class=\"headerlink\" title=\"统计插件\"></a>统计插件</h2><h3 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h3><p>NexT 主题默认已经集成了文章【浏览次数】、【字数统计】、【阅读时长】统计功能，如果我们需要使用，只需要修改主题配置文件 _config.yml 即可。如下所示：<br>配置浏览次数<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">busuanzi_count:</span><br><span class=\"line\">  # count values only if the other configs are false</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # custom uv span for the whole site</span><br><span class=\"line\">  site_uv: true</span><br><span class=\"line\">  site_uv_header: &lt;i class=&quot;fa fa-user&quot;&gt;&lt;/i&gt; 访问人数</span><br><span class=\"line\">  site_uv_footer:</span><br><span class=\"line\">  # custom pv span for the whole site</span><br><span class=\"line\">  site_pv: true</span><br><span class=\"line\">  site_pv_header: &lt;i class=&quot;fa fa-eye&quot;&gt;&lt;/i&gt; 总访问量</span><br><span class=\"line\">  site_pv_footer:</span><br><span class=\"line\">  # custom pv span for one page only</span><br><span class=\"line\">  page_pv: true</span><br><span class=\"line\">  page_pv_header: &lt;i class=&quot;fa fa-file-o&quot;&gt;&lt;/i&gt; 浏览</span><br><span class=\"line\">  page_pv_footer: 次</span><br></pre></td></tr></table></figure></p>\n<p>配置字数统计、阅读时长，wordcount与min2read统计功能<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Post wordcount display settings</span><br><span class=\"line\"># Dependencies: https://github.com/willin/hexo-wordcount</span><br><span class=\"line\">post_wordcount:</span><br><span class=\"line\">  item_text: true</span><br><span class=\"line\">  wordcount: true         # 单篇 字数统计</span><br><span class=\"line\">  min2read: true          # 单篇 阅读时长</span><br><span class=\"line\">  totalcount: false       # 网站 字数统计</span><br><span class=\"line\">  separated_meta: true</span><br></pre></td></tr></table></figure></p>\n<p>预览的时候如果出现字数统计和阅读时长失效的情况，一般是因为没有安装 hexo-wordcount 插件，查看 Hexo 插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo --debug</span><br><span class=\"line\">``</span><br><span class=\"line\">### 安装</span><br><span class=\"line\"></span><br><span class=\"line\">如果没有安装 hexo-wordcount 插件，先安装该插件：</span><br></pre></td></tr></table></figure></p>\n<p>npm i –save hexo-wordcount<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*** Node 版本 7.6.0 之前,请安装 2.x 版本 (Node.js v7.6.0 and previous) ，安装命令如下：***</span><br></pre></td></tr></table></figure></p>\n<p>npm install hexo-wordcount@2 –save<br><code>`</code><br>安装完成后，重新执行启动服务预览就可以了。</p>\n<h3 id=\"显示文字\"><a href=\"#显示文字\" class=\"headerlink\" title=\"显示文字\"></a>显示文字</h3><p>打开<code>post.swig</code>文件，路径如下：<code>xxx_blog/themes/next/layout/_macro/post.swig</code></p>\n<p><img src=\"/img/view_count.png\" alt=\"\"></p>\n"},{"title":"更换电脑后的博客续写","date":"2018-04-04T05:21:01.000Z","_content":"当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：\n1. 使用git clone git@github.com:zhipenwang/zhipenwang.github.io.git拷贝仓库（默认分支为master）；\n2. 在本地新拷贝的http://zhipenwang.github.io文件夹下通过Git bash依次执行下列指令：\n```\nnpm install hexo\nnpm install\nnpm install hexo-deployer-git\n```\n\t（记得，不需要hexo init这条指令）。","source":"_posts/change_do_hexo.md","raw":"---\ntitle: 更换电脑后的博客续写\ndate: 2018-04-04 13:21:01\ntags: hexo\ncategories: 搭建博客\n---\n当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：\n1. 使用git clone git@github.com:zhipenwang/zhipenwang.github.io.git拷贝仓库（默认分支为master）；\n2. 在本地新拷贝的http://zhipenwang.github.io文件夹下通过Git bash依次执行下列指令：\n```\nnpm install hexo\nnpm install\nnpm install hexo-deployer-git\n```\n\t（记得，不需要hexo init这条指令）。","slug":"change_do_hexo","published":1,"updated":"2019-04-09T14:02:03.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmaf0008vjcguyux9l99","content":"<p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>\n<ol>\n<li>使用git clone <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zhipenwang/zhipenwang.github.io.git拷贝仓库（默认分支为master）；</li>\n<li><p>在本地新拷贝的<a href=\"http://zhipenwang.github.io文件夹下通过Git\" target=\"_blank\" rel=\"noopener\">http://zhipenwang.github.io文件夹下通过Git</a> bash依次执行下列指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<p> （记得，不需要hexo init这条指令）。</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p>\n<ol>\n<li>使用git clone <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:zhipenwang/zhipenwang.github.io.git拷贝仓库（默认分支为master）；</li>\n<li><p>在本地新拷贝的<a href=\"http://zhipenwang.github.io文件夹下通过Git\" target=\"_blank\" rel=\"noopener\">http://zhipenwang.github.io文件夹下通过Git</a> bash依次执行下列指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo</span><br><span class=\"line\">npm install</span><br><span class=\"line\">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>\n<p> （记得，不需要hexo init这条指令）。</p>\n</li>\n</ol>\n"},{"title":"Hexo NexT主题添加点击爱心效果","date":"2017-04-17T11:21:01.000Z","_content":"给NexT主题内添加页面点击出现爱心的效果\n\n### 创建js文件\n在`/themes/next/source/js/src`下新建文件`clicklove.js`，接着把该[链接](http://7u2ss1.com1.z0.glb.clouddn.com/love.js)下的代码拷贝粘贴到`clicklove.js`文件中。\n代码如下：\n```\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n```\n\n### 修改_layout.swig\n在`\\themes\\next\\layout\\_layout.swig`文件末尾添加：\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/clicklove.js\"></script>\n```","source":"_posts/clickheart.md","raw":"---\ntitle: Hexo NexT主题添加点击爱心效果\ndate: 2017-04-17 19:21:01\ntags: [hexo,next]\ncategories: 搭建博客\n---\n给NexT主题内添加页面点击出现爱心的效果\n\n### 创建js文件\n在`/themes/next/source/js/src`下新建文件`clicklove.js`，接着把该[链接](http://7u2ss1.com1.z0.glb.clouddn.com/love.js)下的代码拷贝粘贴到`clicklove.js`文件中。\n代码如下：\n```\n!function(e,t,a){function n(){c(\".heart{width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);}.heart:after,.heart:before{content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;}.heart:after{top: -5px;}.heart:before{left: -5px;}\"),o(),r()}function r(){for(var e=0;e<d.length;e++)d[e].alpha<=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=\"left:\"+d[e].x+\"px;top:\"+d[e].y+\"px;opacity:\"+d[e].alpha+\";transform:scale(\"+d[e].scale+\",\"+d[e].scale+\") rotate(45deg);background:\"+d[e].color+\";z-index:99999\");requestAnimationFrame(r)}function o(){var t=\"function\"==typeof e.onclick&&e.onclick;e.onclick=function(e){t&&t(),i(e)}}function i(e){var a=t.createElement(\"div\");a.className=\"heart\",d.push({el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()}),t.body.appendChild(a)}function c(e){var a=t.createElement(\"style\");a.type=\"text/css\";try{a.appendChild(t.createTextNode(e))}catch(t){a.styleSheet.cssText=e}t.getElementsByTagName(\"head\")[0].appendChild(a)}function s(){return\"rgb(\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\",\"+~~(255*Math.random())+\")\"}var d=[];e.requestAnimationFrame=function(){return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e){setTimeout(e,1e3/60)}}(),n()}(window,document);\n```\n\n### 修改_layout.swig\n在`\\themes\\next\\layout\\_layout.swig`文件末尾添加：\n```\n<!-- 页面点击小红心 -->\n<script type=\"text/javascript\" src=\"/js/src/clicklove.js\"></script>\n```","slug":"clickheart","published":1,"updated":"2019-04-09T14:02:03.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmag0009vjcgofp5nq0d","content":"<p>给NexT主题内添加页面点击出现爱心的效果</p>\n<h3 id=\"创建js文件\"><a href=\"#创建js文件\" class=\"headerlink\" title=\"创建js文件\"></a>创建js文件</h3><p>在<code>/themes/next/source/js/src</code>下新建文件<code>clicklove.js</code>，接着把该<a href=\"http://7u2ss1.com1.z0.glb.clouddn.com/love.js\" target=\"_blank\" rel=\"noopener\">链接</a>下的代码拷贝粘贴到<code>clicklove.js</code>文件中。<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改-layout-swig\"><a href=\"#修改-layout-swig\" class=\"headerlink\" title=\"修改_layout.swig\"></a>修改_layout.swig</h3><p>在<code>\\themes\\next\\layout\\_layout.swig</code>文件末尾添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>给NexT主题内添加页面点击出现爱心的效果</p>\n<h3 id=\"创建js文件\"><a href=\"#创建js文件\" class=\"headerlink\" title=\"创建js文件\"></a>创建js文件</h3><p>在<code>/themes/next/source/js/src</code>下新建文件<code>clicklove.js</code>，接着把该<a href=\"http://7u2ss1.com1.z0.glb.clouddn.com/love.js\" target=\"_blank\" rel=\"noopener\">链接</a>下的代码拷贝粘贴到<code>clicklove.js</code>文件中。<br>代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!function(e,t,a)&#123;function n()&#123;c(&quot;.heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: &apos;&apos;;width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;&quot;),o(),r()&#125;function r()&#123;for(var e=0;e&lt;d.length;e++)d[e].alpha&lt;=0?(t.body.removeChild(d[e].el),d.splice(e,1)):(d[e].y--,d[e].scale+=.004,d[e].alpha-=.013,d[e].el.style.cssText=&quot;left:&quot;+d[e].x+&quot;px;top:&quot;+d[e].y+&quot;px;opacity:&quot;+d[e].alpha+&quot;;transform:scale(&quot;+d[e].scale+&quot;,&quot;+d[e].scale+&quot;) rotate(45deg);background:&quot;+d[e].color+&quot;;z-index:99999&quot;);requestAnimationFrame(r)&#125;function o()&#123;var t=&quot;function&quot;==typeof e.onclick&amp;&amp;e.onclick;e.onclick=function(e)&#123;t&amp;&amp;t(),i(e)&#125;&#125;function i(e)&#123;var a=t.createElement(&quot;div&quot;);a.className=&quot;heart&quot;,d.push(&#123;el:a,x:e.clientX-5,y:e.clientY-5,scale:1,alpha:1,color:s()&#125;),t.body.appendChild(a)&#125;function c(e)&#123;var a=t.createElement(&quot;style&quot;);a.type=&quot;text/css&quot;;try&#123;a.appendChild(t.createTextNode(e))&#125;catch(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(&quot;head&quot;)[0].appendChild(a)&#125;function s()&#123;return&quot;rgb(&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;,&quot;+~~(255*Math.random())+&quot;)&quot;&#125;var d=[];e.requestAnimationFrame=function()&#123;return e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||function(e)&#123;setTimeout(e,1e3/60)&#125;&#125;(),n()&#125;(window,document);</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改-layout-swig\"><a href=\"#修改-layout-swig\" class=\"headerlink\" title=\"修改_layout.swig\"></a>修改_layout.swig</h3><p>在<code>\\themes\\next\\layout\\_layout.swig</code>文件末尾添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 页面点击小红心 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;/js/src/clicklove.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"composer构建PHP框架——初始化","date":"2017-04-21T11:21:01.000Z","_content":">“一个时代结束了，另一个时代开始了。”\nFramework Interoperability Group（框架可互用性小组），简称 FIG，成立于 2009 年。FIG 最初由几位知名 PHP 框架开发者发起，在吸纳了许多优秀的大脑和强健的体魄后，提出了 PSR-0 到 PSR-4 五套 PHP 非官方规范：\n\n~~~\n* PSR-0 (Autoloading Standard) 自动加载标准\n\n* PSR-1 (Basic Coding Standard) 基础编码标准\n\n* PSR-2 (Coding Style Guide) 编码风格向导\n\n* PSR-3 (Logger Interface) 日志接口\n\n* PSR-4 (Improved Autoloading) 自动加载优化标准\n~~~\n\n### 创建composer.json\n在网站根目录下创建新文件夹 `my-framework` （My First Framework based on Composer），然后在此文件夹内创建 `composer.json` 文件\n~~~\n{\n\t\"require\":{\n\t\t\n\t}\n}\n~~~\n### 初始化composer\n打开命令行cmd，进入刚刚新建的目录 `my_framework`，执行命令\n~~~\ncomposer update\n~~~\n执行成功后生成了扩展包` vendor`\n<center>\n![](/img/composer-2-1.png)\n</center>\n此时目录为：\n<center>\n![](/img/composer-2-2.png)\n</center>\n\n到此，composer初始化完成！","source":"_posts/composer-2.md","raw":"---\ntitle: composer构建PHP框架——初始化\ndate: 2017-04-21 19:21:01\ntags: Composer\ncategories: composer使用\n---\n>“一个时代结束了，另一个时代开始了。”\nFramework Interoperability Group（框架可互用性小组），简称 FIG，成立于 2009 年。FIG 最初由几位知名 PHP 框架开发者发起，在吸纳了许多优秀的大脑和强健的体魄后，提出了 PSR-0 到 PSR-4 五套 PHP 非官方规范：\n\n~~~\n* PSR-0 (Autoloading Standard) 自动加载标准\n\n* PSR-1 (Basic Coding Standard) 基础编码标准\n\n* PSR-2 (Coding Style Guide) 编码风格向导\n\n* PSR-3 (Logger Interface) 日志接口\n\n* PSR-4 (Improved Autoloading) 自动加载优化标准\n~~~\n\n### 创建composer.json\n在网站根目录下创建新文件夹 `my-framework` （My First Framework based on Composer），然后在此文件夹内创建 `composer.json` 文件\n~~~\n{\n\t\"require\":{\n\t\t\n\t}\n}\n~~~\n### 初始化composer\n打开命令行cmd，进入刚刚新建的目录 `my_framework`，执行命令\n~~~\ncomposer update\n~~~\n执行成功后生成了扩展包` vendor`\n<center>\n![](/img/composer-2-1.png)\n</center>\n此时目录为：\n<center>\n![](/img/composer-2-2.png)\n</center>\n\n到此，composer初始化完成！","slug":"composer-2","published":1,"updated":"2019-04-09T14:02:03.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmah000cvjcgcg9njmmw","content":"<blockquote>\n<p>“一个时代结束了，另一个时代开始了。”<br>Framework Interoperability Group（框架可互用性小组），简称 FIG，成立于 2009 年。FIG 最初由几位知名 PHP 框架开发者发起，在吸纳了许多优秀的大脑和强健的体魄后，提出了 PSR-0 到 PSR-4 五套 PHP 非官方规范：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* PSR-0 (Autoloading Standard) 自动加载标准</span><br><span class=\"line\"></span><br><span class=\"line\">* PSR-1 (Basic Coding Standard) 基础编码标准</span><br><span class=\"line\"></span><br><span class=\"line\">* PSR-2 (Coding Style Guide) 编码风格向导</span><br><span class=\"line\"></span><br><span class=\"line\">* PSR-3 (Logger Interface) 日志接口</span><br><span class=\"line\"></span><br><span class=\"line\">* PSR-4 (Improved Autoloading) 自动加载优化标准</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建composer-json\"><a href=\"#创建composer-json\" class=\"headerlink\" title=\"创建composer.json\"></a>创建composer.json</h3><p>在网站根目录下创建新文件夹 <code>my-framework</code> （My First Framework based on Composer），然后在此文件夹内创建 <code>composer.json</code> 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;require&quot;:&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化composer\"><a href=\"#初始化composer\" class=\"headerlink\" title=\"初始化composer\"></a>初始化composer</h3><p>打开命令行cmd，进入刚刚新建的目录 <code>my_framework</code>，执行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer update</span><br></pre></td></tr></table></figure></p>\n<p>执行成功后生成了扩展包<code>vendor</code></p>\n<center><br><img src=\"/img/composer-2-1.png\" alt=\"\"><br></center><br>此时目录为：<br><center><br><img src=\"/img/composer-2-2.png\" alt=\"\"><br></center>\n\n<p>到此，composer初始化完成！</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>“一个时代结束了，另一个时代开始了。”<br>Framework Interoperability Group（框架可互用性小组），简称 FIG，成立于 2009 年。FIG 最初由几位知名 PHP 框架开发者发起，在吸纳了许多优秀的大脑和强健的体魄后，提出了 PSR-0 到 PSR-4 五套 PHP 非官方规范：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* PSR-0 (Autoloading Standard) 自动加载标准</span><br><span class=\"line\"></span><br><span class=\"line\">* PSR-1 (Basic Coding Standard) 基础编码标准</span><br><span class=\"line\"></span><br><span class=\"line\">* PSR-2 (Coding Style Guide) 编码风格向导</span><br><span class=\"line\"></span><br><span class=\"line\">* PSR-3 (Logger Interface) 日志接口</span><br><span class=\"line\"></span><br><span class=\"line\">* PSR-4 (Improved Autoloading) 自动加载优化标准</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建composer-json\"><a href=\"#创建composer-json\" class=\"headerlink\" title=\"创建composer.json\"></a>创建composer.json</h3><p>在网站根目录下创建新文件夹 <code>my-framework</code> （My First Framework based on Composer），然后在此文件夹内创建 <code>composer.json</code> 文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;require&quot;:&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"初始化composer\"><a href=\"#初始化composer\" class=\"headerlink\" title=\"初始化composer\"></a>初始化composer</h3><p>打开命令行cmd，进入刚刚新建的目录 <code>my_framework</code>，执行命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer update</span><br></pre></td></tr></table></figure></p>\n<p>执行成功后生成了扩展包<code>vendor</code></p>\n<center><br><img src=\"/img/composer-2-1.png\" alt=\"\"><br></center><br>此时目录为：<br><center><br><img src=\"/img/composer-2-2.png\" alt=\"\"><br></center>\n\n<p>到此，composer初始化完成！</p>\n"},{"title":"composer安装与使用","date":"2017-04-21T11:21:01.000Z","_content":"## 安装\n1、点击下载：[composer](https://getcomposer.org/download/)\n\n<center>\n![](/img/composer-1-1.png)\n</center>\n2、下载好之后双击直接安装，Next即可：\n\n<center>\n![](/img/composer-1-2.png)\n</center>\n3、然后选择php.exe文件：\n\n<center>\n![](/img/composer-1-3.png)\n</center>\n\n接下来就一直next到安装完成即可。\n\n## 使用\n>[info]使用composer安装ThinkPHP5\n\n通过[composer中国镜像](https://pkg.phpcomposer.com/)进行初步了解\n![](/img/composer-1-4.png)\n\n##开始命令行操作\n### 1、中国镜像下载\n参考[tp5看云文档](http://www.kancloud.cn/thinkphp/thinkphp5_quickstart/145249)\n\n由于国外网站访问很慢，国内提供了很好的镜像，所以使用国内镜像：\n~~~\nComposer config -g repo.packagist composer https://packagist.phpcomposer.com\n~~~\n![](/img/composer-1-5.png)\n\n### 2、下载tp5框架\n进入站点根目录www操作命令行：\n~~~\ncomposer create-project topthink/think tp5  --prefer-dist\n~~~\n其中tp5可写填写任何你愿意的名称\n![](/img/composer-1-6.png)\n\n## 框架安装完成\n耐心等待几分钟的安装过程，安装完成之后本地已经生成了tp5的新框架内容\n![](/img/composer-1-7.png)\n\n## composer主要的功能：安装扩展包\ncomposer的最主要的功能：dependency manager for PHP\n进入项目目录tp5，执行命令：\n~~~\ncomposer require riverslei/payment\n~~~\n下载riverslei/payment 集成支付宝、微信支付等流行的支付接口到项目中：\nComposer.json中新增了这一句：\n![](/img/composer-1-8.png)\n\n项目目录中也已经安装好了扩展包：\n![](/img/composer-1-9.png)","source":"_posts/composer-1.md","raw":"---\ntitle: composer安装与使用\ndate: 2017-04-21 19:21:01\ntags: Composer\ncategories: composer使用\n---\n## 安装\n1、点击下载：[composer](https://getcomposer.org/download/)\n\n<center>\n![](/img/composer-1-1.png)\n</center>\n2、下载好之后双击直接安装，Next即可：\n\n<center>\n![](/img/composer-1-2.png)\n</center>\n3、然后选择php.exe文件：\n\n<center>\n![](/img/composer-1-3.png)\n</center>\n\n接下来就一直next到安装完成即可。\n\n## 使用\n>[info]使用composer安装ThinkPHP5\n\n通过[composer中国镜像](https://pkg.phpcomposer.com/)进行初步了解\n![](/img/composer-1-4.png)\n\n##开始命令行操作\n### 1、中国镜像下载\n参考[tp5看云文档](http://www.kancloud.cn/thinkphp/thinkphp5_quickstart/145249)\n\n由于国外网站访问很慢，国内提供了很好的镜像，所以使用国内镜像：\n~~~\nComposer config -g repo.packagist composer https://packagist.phpcomposer.com\n~~~\n![](/img/composer-1-5.png)\n\n### 2、下载tp5框架\n进入站点根目录www操作命令行：\n~~~\ncomposer create-project topthink/think tp5  --prefer-dist\n~~~\n其中tp5可写填写任何你愿意的名称\n![](/img/composer-1-6.png)\n\n## 框架安装完成\n耐心等待几分钟的安装过程，安装完成之后本地已经生成了tp5的新框架内容\n![](/img/composer-1-7.png)\n\n## composer主要的功能：安装扩展包\ncomposer的最主要的功能：dependency manager for PHP\n进入项目目录tp5，执行命令：\n~~~\ncomposer require riverslei/payment\n~~~\n下载riverslei/payment 集成支付宝、微信支付等流行的支付接口到项目中：\nComposer.json中新增了这一句：\n![](/img/composer-1-8.png)\n\n项目目录中也已经安装好了扩展包：\n![](/img/composer-1-9.png)","slug":"composer-1","published":1,"updated":"2019-04-09T14:02:03.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmak000dvjcg7wvggn36","content":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>1、点击下载：<a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"noopener\">composer</a></p>\n<center><br><img src=\"/img/composer-1-1.png\" alt=\"\"><br></center><br>2、下载好之后双击直接安装，Next即可：<br><br><center><br><img src=\"/img/composer-1-2.png\" alt=\"\"><br></center><br>3、然后选择php.exe文件：<br><br><center><br><img src=\"/img/composer-1-3.png\" alt=\"\"><br></center>\n\n<p>接下来就一直next到安装完成即可。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><blockquote>\n<p>[info]使用composer安装ThinkPHP5</p>\n</blockquote>\n<p>通过<a href=\"https://pkg.phpcomposer.com/\" target=\"_blank\" rel=\"noopener\">composer中国镜像</a>进行初步了解<br><img src=\"/img/composer-1-4.png\" alt=\"\"></p>\n<p>##开始命令行操作</p>\n<h3 id=\"1、中国镜像下载\"><a href=\"#1、中国镜像下载\" class=\"headerlink\" title=\"1、中国镜像下载\"></a>1、中国镜像下载</h3><p>参考<a href=\"http://www.kancloud.cn/thinkphp/thinkphp5_quickstart/145249\" target=\"_blank\" rel=\"noopener\">tp5看云文档</a></p>\n<p>由于国外网站访问很慢，国内提供了很好的镜像，所以使用国内镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/composer-1-5.png\" alt=\"\"></p>\n<h3 id=\"2、下载tp5框架\"><a href=\"#2、下载tp5框架\" class=\"headerlink\" title=\"2、下载tp5框架\"></a>2、下载tp5框架</h3><p>进入站点根目录www操作命令行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project topthink/think tp5  --prefer-dist</span><br></pre></td></tr></table></figure></p>\n<p>其中tp5可写填写任何你愿意的名称<br><img src=\"/img/composer-1-6.png\" alt=\"\"></p>\n<h2 id=\"框架安装完成\"><a href=\"#框架安装完成\" class=\"headerlink\" title=\"框架安装完成\"></a>框架安装完成</h2><p>耐心等待几分钟的安装过程，安装完成之后本地已经生成了tp5的新框架内容<br><img src=\"/img/composer-1-7.png\" alt=\"\"></p>\n<h2 id=\"composer主要的功能：安装扩展包\"><a href=\"#composer主要的功能：安装扩展包\" class=\"headerlink\" title=\"composer主要的功能：安装扩展包\"></a>composer主要的功能：安装扩展包</h2><p>composer的最主要的功能：dependency manager for PHP<br>进入项目目录tp5，执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require riverslei/payment</span><br></pre></td></tr></table></figure></p>\n<p>下载riverslei/payment 集成支付宝、微信支付等流行的支付接口到项目中：<br>Composer.json中新增了这一句：<br><img src=\"/img/composer-1-8.png\" alt=\"\"></p>\n<p>项目目录中也已经安装好了扩展包：<br><img src=\"/img/composer-1-9.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>1、点击下载：<a href=\"https://getcomposer.org/download/\" target=\"_blank\" rel=\"noopener\">composer</a></p>\n<center><br><img src=\"/img/composer-1-1.png\" alt=\"\"><br></center><br>2、下载好之后双击直接安装，Next即可：<br><br><center><br><img src=\"/img/composer-1-2.png\" alt=\"\"><br></center><br>3、然后选择php.exe文件：<br><br><center><br><img src=\"/img/composer-1-3.png\" alt=\"\"><br></center>\n\n<p>接下来就一直next到安装完成即可。</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><blockquote>\n<p>[info]使用composer安装ThinkPHP5</p>\n</blockquote>\n<p>通过<a href=\"https://pkg.phpcomposer.com/\" target=\"_blank\" rel=\"noopener\">composer中国镜像</a>进行初步了解<br><img src=\"/img/composer-1-4.png\" alt=\"\"></p>\n<p>##开始命令行操作</p>\n<h3 id=\"1、中国镜像下载\"><a href=\"#1、中国镜像下载\" class=\"headerlink\" title=\"1、中国镜像下载\"></a>1、中国镜像下载</h3><p>参考<a href=\"http://www.kancloud.cn/thinkphp/thinkphp5_quickstart/145249\" target=\"_blank\" rel=\"noopener\">tp5看云文档</a></p>\n<p>由于国外网站访问很慢，国内提供了很好的镜像，所以使用国内镜像：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Composer config -g repo.packagist composer https://packagist.phpcomposer.com</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"/img/composer-1-5.png\" alt=\"\"></p>\n<h3 id=\"2、下载tp5框架\"><a href=\"#2、下载tp5框架\" class=\"headerlink\" title=\"2、下载tp5框架\"></a>2、下载tp5框架</h3><p>进入站点根目录www操作命令行：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer create-project topthink/think tp5  --prefer-dist</span><br></pre></td></tr></table></figure></p>\n<p>其中tp5可写填写任何你愿意的名称<br><img src=\"/img/composer-1-6.png\" alt=\"\"></p>\n<h2 id=\"框架安装完成\"><a href=\"#框架安装完成\" class=\"headerlink\" title=\"框架安装完成\"></a>框架安装完成</h2><p>耐心等待几分钟的安装过程，安装完成之后本地已经生成了tp5的新框架内容<br><img src=\"/img/composer-1-7.png\" alt=\"\"></p>\n<h2 id=\"composer主要的功能：安装扩展包\"><a href=\"#composer主要的功能：安装扩展包\" class=\"headerlink\" title=\"composer主要的功能：安装扩展包\"></a>composer主要的功能：安装扩展包</h2><p>composer的最主要的功能：dependency manager for PHP<br>进入项目目录tp5，执行命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">composer require riverslei/payment</span><br></pre></td></tr></table></figure></p>\n<p>下载riverslei/payment 集成支付宝、微信支付等流行的支付接口到项目中：<br>Composer.json中新增了这一句：<br><img src=\"/img/composer-1-8.png\" alt=\"\"></p>\n<p>项目目录中也已经安装好了扩展包：<br><img src=\"/img/composer-1-9.png\" alt=\"\"></p>\n"},{"title":"composer构建PHP框架——构建路由","date":"2017-04-21T11:21:01.000Z","_content":"## 路由选择安装\n本节开始构建路由，先去 GitHub 搜一下：[点此查看搜索结果](https://github.com/search?l=PHP&o=desc&q=router&ref=searchresults&s=stars&type=Repositories&utf8=%E2%9C%93)\n\n推荐 [https://github.com/NoahBuscher/Macaw](https://github.com/NoahBuscher/Macaw)，对应的 Composer 包为 noahbuscher/macaw 。\n\n下面开始安装它，更改 composer.json：\n~~~\n{\n\t\"require\":{\n\t\t\"noahbuscher/macaw\": \"dev-master\"\n\t}\n}\n~~~\n运行 composer update，成功之后将得到以下目录：\n<center>\n![](/img/composer-3-1.png)\n</center>\n至此，Macaw安装成功！\n\n## 站点入口文件与环境\n在项目目录下新建public 文件夹，这个文件夹将是用户唯一可见的部分。在文件夹下新建 index.php 文件：\n~~~\n<?php\n\n// Autoload 自动载入\nrequire '../vendor/autoload.php';\n\n// 路由配置\nrequire '../config/routes.php';\n~~~\n上面一行表示引入 Composer 的自动载入功能，下面一行表示载入路由配置文件。\n然后继续在项目目录下新建config文件夹，在config文件夹内新建 routs.php 文件，内容如下：\n~~~\n<?php\n\nuse NoahBuscher\\Macaw\\Macaw;\n\nMacaw::get('fuck', function() {\n  echo \"成功！\";\n});\n\nMacaw::get('(:all)', function($fu) {\n  echo '未匹配到路由<br>'.$fu;\n});\n\nMacaw::dispatch();\n~~~\n\n然后访问你的地址即可：http://127.0.0.66/index.php/fuck\n\n注意：如果要配置域名地址进行映射要指向 `public/index.php` 文件\n![](/img/composer-3-2.png)","source":"_posts/composer-3.md","raw":"---\ntitle: composer构建PHP框架——构建路由\ndate: 2017-04-21 19:21:01\ntags: Composer\ncategories: composer使用\n---\n## 路由选择安装\n本节开始构建路由，先去 GitHub 搜一下：[点此查看搜索结果](https://github.com/search?l=PHP&o=desc&q=router&ref=searchresults&s=stars&type=Repositories&utf8=%E2%9C%93)\n\n推荐 [https://github.com/NoahBuscher/Macaw](https://github.com/NoahBuscher/Macaw)，对应的 Composer 包为 noahbuscher/macaw 。\n\n下面开始安装它，更改 composer.json：\n~~~\n{\n\t\"require\":{\n\t\t\"noahbuscher/macaw\": \"dev-master\"\n\t}\n}\n~~~\n运行 composer update，成功之后将得到以下目录：\n<center>\n![](/img/composer-3-1.png)\n</center>\n至此，Macaw安装成功！\n\n## 站点入口文件与环境\n在项目目录下新建public 文件夹，这个文件夹将是用户唯一可见的部分。在文件夹下新建 index.php 文件：\n~~~\n<?php\n\n// Autoload 自动载入\nrequire '../vendor/autoload.php';\n\n// 路由配置\nrequire '../config/routes.php';\n~~~\n上面一行表示引入 Composer 的自动载入功能，下面一行表示载入路由配置文件。\n然后继续在项目目录下新建config文件夹，在config文件夹内新建 routs.php 文件，内容如下：\n~~~\n<?php\n\nuse NoahBuscher\\Macaw\\Macaw;\n\nMacaw::get('fuck', function() {\n  echo \"成功！\";\n});\n\nMacaw::get('(:all)', function($fu) {\n  echo '未匹配到路由<br>'.$fu;\n});\n\nMacaw::dispatch();\n~~~\n\n然后访问你的地址即可：http://127.0.0.66/index.php/fuck\n\n注意：如果要配置域名地址进行映射要指向 `public/index.php` 文件\n![](/img/composer-3-2.png)","slug":"composer-3","published":1,"updated":"2019-04-09T14:02:03.292Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmam000hvjcgwqzpcl24","content":"<h2 id=\"路由选择安装\"><a href=\"#路由选择安装\" class=\"headerlink\" title=\"路由选择安装\"></a>路由选择安装</h2><p>本节开始构建路由，先去 GitHub 搜一下：<a href=\"https://github.com/search?l=PHP&amp;o=desc&amp;q=router&amp;ref=searchresults&amp;s=stars&amp;type=Repositories&amp;utf8=%E2%9C%93\" target=\"_blank\" rel=\"noopener\">点此查看搜索结果</a></p>\n<p>推荐 <a href=\"https://github.com/NoahBuscher/Macaw\" target=\"_blank\" rel=\"noopener\">https://github.com/NoahBuscher/Macaw</a>，对应的 Composer 包为 noahbuscher/macaw 。</p>\n<p>下面开始安装它，更改 composer.json：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;require&quot;:&#123;</span><br><span class=\"line\">\t\t&quot;noahbuscher/macaw&quot;: &quot;dev-master&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行 composer update，成功之后将得到以下目录：</p>\n<p><center><br><img src=\"/img/composer-3-1.png\" alt=\"\"><br></center><br>至此，Macaw安装成功！</p>\n<h2 id=\"站点入口文件与环境\"><a href=\"#站点入口文件与环境\" class=\"headerlink\" title=\"站点入口文件与环境\"></a>站点入口文件与环境</h2><p>在项目目录下新建public 文件夹，这个文件夹将是用户唯一可见的部分。在文件夹下新建 index.php 文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">// Autoload 自动载入</span><br><span class=\"line\">require &apos;../vendor/autoload.php&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 路由配置</span><br><span class=\"line\">require &apos;../config/routes.php&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>上面一行表示引入 Composer 的自动载入功能，下面一行表示载入路由配置文件。<br>然后继续在项目目录下新建config文件夹，在config文件夹内新建 routs.php 文件，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">use NoahBuscher\\Macaw\\Macaw;</span><br><span class=\"line\"></span><br><span class=\"line\">Macaw::get(&apos;fuck&apos;, function() &#123;</span><br><span class=\"line\">  echo &quot;成功！&quot;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Macaw::get(&apos;(:all)&apos;, function($fu) &#123;</span><br><span class=\"line\">  echo &apos;未匹配到路由&lt;br&gt;&apos;.$fu;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Macaw::dispatch();</span><br></pre></td></tr></table></figure></p>\n<p>然后访问你的地址即可：<a href=\"http://127.0.0.66/index.php/fuck\" target=\"_blank\" rel=\"noopener\">http://127.0.0.66/index.php/fuck</a></p>\n<p>注意：如果要配置域名地址进行映射要指向 <code>public/index.php</code> 文件<br><img src=\"/img/composer-3-2.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"路由选择安装\"><a href=\"#路由选择安装\" class=\"headerlink\" title=\"路由选择安装\"></a>路由选择安装</h2><p>本节开始构建路由，先去 GitHub 搜一下：<a href=\"https://github.com/search?l=PHP&amp;o=desc&amp;q=router&amp;ref=searchresults&amp;s=stars&amp;type=Repositories&amp;utf8=%E2%9C%93\" target=\"_blank\" rel=\"noopener\">点此查看搜索结果</a></p>\n<p>推荐 <a href=\"https://github.com/NoahBuscher/Macaw\" target=\"_blank\" rel=\"noopener\">https://github.com/NoahBuscher/Macaw</a>，对应的 Composer 包为 noahbuscher/macaw 。</p>\n<p>下面开始安装它，更改 composer.json：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;require&quot;:&#123;</span><br><span class=\"line\">\t\t&quot;noahbuscher/macaw&quot;: &quot;dev-master&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>运行 composer update，成功之后将得到以下目录：</p>\n<p><center><br><img src=\"/img/composer-3-1.png\" alt=\"\"><br></center><br>至此，Macaw安装成功！</p>\n<h2 id=\"站点入口文件与环境\"><a href=\"#站点入口文件与环境\" class=\"headerlink\" title=\"站点入口文件与环境\"></a>站点入口文件与环境</h2><p>在项目目录下新建public 文件夹，这个文件夹将是用户唯一可见的部分。在文件夹下新建 index.php 文件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">// Autoload 自动载入</span><br><span class=\"line\">require &apos;../vendor/autoload.php&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 路由配置</span><br><span class=\"line\">require &apos;../config/routes.php&apos;;</span><br></pre></td></tr></table></figure></p>\n<p>上面一行表示引入 Composer 的自动载入功能，下面一行表示载入路由配置文件。<br>然后继续在项目目录下新建config文件夹，在config文件夹内新建 routs.php 文件，内容如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">use NoahBuscher\\Macaw\\Macaw;</span><br><span class=\"line\"></span><br><span class=\"line\">Macaw::get(&apos;fuck&apos;, function() &#123;</span><br><span class=\"line\">  echo &quot;成功！&quot;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Macaw::get(&apos;(:all)&apos;, function($fu) &#123;</span><br><span class=\"line\">  echo &apos;未匹配到路由&lt;br&gt;&apos;.$fu;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">Macaw::dispatch();</span><br></pre></td></tr></table></figure></p>\n<p>然后访问你的地址即可：<a href=\"http://127.0.0.66/index.php/fuck\" target=\"_blank\" rel=\"noopener\">http://127.0.0.66/index.php/fuck</a></p>\n<p>注意：如果要配置域名地址进行映射要指向 <code>public/index.php</code> 文件<br><img src=\"/img/composer-3-2.png\" alt=\"\"></p>\n"},{"title":"Hexo NexT主题内接入网页在线联系功能","date":"2017-04-20T11:12:49.000Z","_content":"Hexo博客如何添加在线联系功能呢,发现了一个不错的网站可以提供在线联系的服务，当有用户在网页上给你留言后会通过邮件或者微信通知你，可以及时的解答用户的疑问。\n\n### 注册\n首先在(DaoVoice)[http://www.daovoice.io/]注册个账号。\n登录上去之后进行配置，配置方法如下:\n首先到DaoVoice上注册一个账号,注册完成后会得到一个app_id，获取appid的步骤如下图所示:\n![](/img/daovoice.png)\n\n以next主题为例,打开/themes/next/layout/_partials/head.swig文件添加如下代码：\n```\n{% if theme.daovoice %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n      app_id: \"{{theme.daovoice_app_id}}\"\n    });\n  daovoice('update');\n  </script>\n{% endif %}\n```\n接着打开主题配置文件_config.yml，添加如下代码：\n```\n# Online contact \ndaovoice: true\ndaovoice_app_id: 这里输入前面获取的app_id\n```\n需要注意的是,next主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置:\n![](/img/chat.png)\n最后到右上角选择管理员，微信绑定,可以绑定你的微信号，关注公众号后打开小程序，就可以实时收发消息，有新的消息也会通过微信通知，设置页面如下:\n![](/img/wechat.png)","source":"_posts/connect.md","raw":"---\ntitle: Hexo NexT主题内接入网页在线联系功能\ndate: 2017-04-20 19:12:49\ntags: [hexo,next]\ncategories: 搭建博客\n---\nHexo博客如何添加在线联系功能呢,发现了一个不错的网站可以提供在线联系的服务，当有用户在网页上给你留言后会通过邮件或者微信通知你，可以及时的解答用户的疑问。\n\n### 注册\n首先在(DaoVoice)[http://www.daovoice.io/]注册个账号。\n登录上去之后进行配置，配置方法如下:\n首先到DaoVoice上注册一个账号,注册完成后会得到一个app_id，获取appid的步骤如下图所示:\n![](/img/daovoice.png)\n\n以next主题为例,打开/themes/next/layout/_partials/head.swig文件添加如下代码：\n```\n{% if theme.daovoice %}\n  <script>\n  (function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n      app_id: \"{{theme.daovoice_app_id}}\"\n    });\n  daovoice('update');\n  </script>\n{% endif %}\n```\n接着打开主题配置文件_config.yml，添加如下代码：\n```\n# Online contact \ndaovoice: true\ndaovoice_app_id: 这里输入前面获取的app_id\n```\n需要注意的是,next主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置:\n![](/img/chat.png)\n最后到右上角选择管理员，微信绑定,可以绑定你的微信号，关注公众号后打开小程序，就可以实时收发消息，有新的消息也会通过微信通知，设置页面如下:\n![](/img/wechat.png)","slug":"connect","published":1,"updated":"2019-04-09T14:02:03.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmao000jvjcg427b9xu9","content":"<p>Hexo博客如何添加在线联系功能呢,发现了一个不错的网站可以提供在线联系的服务，当有用户在网页上给你留言后会通过邮件或者微信通知你，可以及时的解答用户的疑问。</p>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>首先在(DaoVoice)[<a href=\"http://www.daovoice.io/]注册个账号。\" target=\"_blank\" rel=\"noopener\">http://www.daovoice.io/]注册个账号。</a><br>登录上去之后进行配置，配置方法如下:<br>首先到DaoVoice上注册一个账号,注册完成后会得到一个app_id，获取appid的步骤如下图所示:<br><img src=\"/img/daovoice.png\" alt=\"\"></p>\n<p>以next主题为例,打开/themes/next/layout/_partials/head.swig文件添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.daovoice %&#125;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class=\"line\">  daovoice(&apos;init&apos;, &#123;</span><br><span class=\"line\">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  daovoice(&apos;update&apos;);</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着打开主题配置文件_config.yml，添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Online contact </span><br><span class=\"line\">daovoice: true</span><br><span class=\"line\">daovoice_app_id: 这里输入前面获取的app_id</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是,next主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置:<br><img src=\"/img/chat.png\" alt=\"\"><br>最后到右上角选择管理员，微信绑定,可以绑定你的微信号，关注公众号后打开小程序，就可以实时收发消息，有新的消息也会通过微信通知，设置页面如下:<br><img src=\"/img/wechat.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hexo博客如何添加在线联系功能呢,发现了一个不错的网站可以提供在线联系的服务，当有用户在网页上给你留言后会通过邮件或者微信通知你，可以及时的解答用户的疑问。</p>\n<h3 id=\"注册\"><a href=\"#注册\" class=\"headerlink\" title=\"注册\"></a>注册</h3><p>首先在(DaoVoice)[<a href=\"http://www.daovoice.io/]注册个账号。\" target=\"_blank\" rel=\"noopener\">http://www.daovoice.io/]注册个账号。</a><br>登录上去之后进行配置，配置方法如下:<br>首先到DaoVoice上注册一个账号,注册完成后会得到一个app_id，获取appid的步骤如下图所示:<br><img src=\"/img/daovoice.png\" alt=\"\"></p>\n<p>以next主题为例,打开/themes/next/layout/_partials/head.swig文件添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.daovoice %&#125;</span><br><span class=\"line\">  &lt;script&gt;</span><br><span class=\"line\">  (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class=\"line\">  daovoice(&apos;init&apos;, &#123;</span><br><span class=\"line\">      app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  daovoice(&apos;update&apos;);</span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p>接着打开主题配置文件_config.yml，添加如下代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Online contact </span><br><span class=\"line\">daovoice: true</span><br><span class=\"line\">daovoice_app_id: 这里输入前面获取的app_id</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是,next主题下聊天的按钮会和其他按钮重叠到一起，可以到聊天设置，修改下按钮的位置:<br><img src=\"/img/chat.png\" alt=\"\"><br>最后到右上角选择管理员，微信绑定,可以绑定你的微信号，关注公众号后打开小程序，就可以实时收发消息，有新的消息也会通过微信通知，设置页面如下:<br><img src=\"/img/wechat.png\" alt=\"\"></p>\n"},{"title":"github+hexo搭建个人博客","date":"2017-03-18T11:21:01.000Z","_content":"**各位有兴趣搭建博客或者正在搭建博客却遇到问题的朋友们，不妨抽空来围观一下我搭建的过程中遇到的坑和填的土。。**\n\n*声明一点，以下所有步骤都是基于Windows系统的搭建，由于本人没有真正在其他系统上搭建过，就不画蛇添足了，所以其他系统的小心不要入错入坑咯*\n\n下面先说一下基本思路（给大家一个清晰的搭建过程）：\n\n> 1、在Windows系统下搭建运行hexo环境的前提是先搭建**nodejs**跟**git**\n> 2、搭建好nodejs跟git后就可以在系统中搭建hexo环境\n> 3、申请github.com帐号，创建自己的repository（仓库）——注意仓库名必须是：yourusername.github.io，具体原因及内容后面细讲、\n> 4、本地hexo环境部署到github上 5、yourusername.github.io查看自己的博客，成功！\n\n### 第一步：搭建nodejs环境\n参考菜鸟教程的nodejs，很是详细：[nodejs-菜鸟教程](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n大家可以去[nodejs](https://nodejs.org/en/download/)官网下载，记得要下载跟自己Windows系统一致的版本。（64bit的下载window-install的64-bit；同理：32bit的下载32-bit的）。\n下载之后双击安装，选择自己要安装的路径地址，一直next到finish就可以了\n![](/img/install-node-msi-version-on-windows-step5.png)\n安装后检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入\"cmd\" => 输入命令\"path\"，输出结果中有nodejs的环境变量说明安装成功。（如下我的环境变量已经有nodejs了）\n~~~\nPATH=C:\\oraclexe\\app\\oracle\\product\\10.2.0\\server\\bin;C:\\Windows\\system32;\nC:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;\nc:\\python32\\python;C:\\MinGW\\bin;C:\\Program Files\\GTK2-Runtime\\lib;\nC:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;C:\\Program Files\\nodejs\\;\n~~~\n然后可以检查一下Node.js版本，直接命令行输入 node --version\n![](/img/node-version.png)\nok，nodejs环境到此完成。\n### 第二步：搭建GIT环境\n同样，大家可以参考[百度经验](http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html)\n\n下载地址可以前往[git官网](http://msysgit.github.io/)进行下载，同样下载跟自己系统位数一致的版本\n下载之后双击选择自己要安装的路径地址一键next安装就好了\n![](/img/git-install.jpg)\n安装好之后在任意位置右键都可以看到关于git的一些菜单选项：\n![](/img/git_menu.png)\nok，至此git安装完成。\n\n### 第三步：搭建hexo环境\n在E盘下建立hexo文件夹（或者你选择的任何路径）\n在nodejs和git环境都搭建完成后，在刚刚建立好的hexo文件夹中点击鼠标右键，选择**git bash**，\n输入以下命令安装hexo\n~~~\nnpm install -g hexo\n~~~\n接下来是比较重要的步骤，都是在git bash命令行操作，要认真看清楚：\n* 1、初始化你的博客\n~~~php\n\thexo init\n~~~\n>执行后hexo会在你的站点目录下生成网站所需的文件\n\n* 2、安装node_modules：\n~~~\nnpm install\n~~~\n>在此目录中生成node_modules\n\n* 3、本地浏览器查看：\n~~~\nhexo server  (此命令也可以简写为 hexo s)\n~~~\n>这时候会出现如下信息：\n[info] Hexo is running at http://localhost:4000/. \nPress Ctrl+C to stop. \n\n这个时候在你的浏览器输入http://localhost:4000/你就可以看到本地的博客搭建成功。\n这个时候可以轻松一下，随便浏览一下自己的博客熟悉一下\n\n### 第四步：本地hexo部署到github上\n1、首先要有github帐号，可以前往[github官网](http://www.github.com/)注册一个自己的github帐号，登录成功后，点击右上角的+号新建一个仓库\n![](/img/new_repository.png)\n注意，仓库名必须跟自己的username一致，格式是username.github.io\n![](/img/username_git.png)","source":"_posts/create-blog.md","raw":"---\ntitle: github+hexo搭建个人博客\ndate: 2017-03-18 19:21:01\ntags: Article\ncategories: 搭建博客\n---\n**各位有兴趣搭建博客或者正在搭建博客却遇到问题的朋友们，不妨抽空来围观一下我搭建的过程中遇到的坑和填的土。。**\n\n*声明一点，以下所有步骤都是基于Windows系统的搭建，由于本人没有真正在其他系统上搭建过，就不画蛇添足了，所以其他系统的小心不要入错入坑咯*\n\n下面先说一下基本思路（给大家一个清晰的搭建过程）：\n\n> 1、在Windows系统下搭建运行hexo环境的前提是先搭建**nodejs**跟**git**\n> 2、搭建好nodejs跟git后就可以在系统中搭建hexo环境\n> 3、申请github.com帐号，创建自己的repository（仓库）——注意仓库名必须是：yourusername.github.io，具体原因及内容后面细讲、\n> 4、本地hexo环境部署到github上 5、yourusername.github.io查看自己的博客，成功！\n\n### 第一步：搭建nodejs环境\n参考菜鸟教程的nodejs，很是详细：[nodejs-菜鸟教程](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n\n大家可以去[nodejs](https://nodejs.org/en/download/)官网下载，记得要下载跟自己Windows系统一致的版本。（64bit的下载window-install的64-bit；同理：32bit的下载32-bit的）。\n下载之后双击安装，选择自己要安装的路径地址，一直next到finish就可以了\n![](/img/install-node-msi-version-on-windows-step5.png)\n安装后检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入\"cmd\" => 输入命令\"path\"，输出结果中有nodejs的环境变量说明安装成功。（如下我的环境变量已经有nodejs了）\n~~~\nPATH=C:\\oraclexe\\app\\oracle\\product\\10.2.0\\server\\bin;C:\\Windows\\system32;\nC:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;\nc:\\python32\\python;C:\\MinGW\\bin;C:\\Program Files\\GTK2-Runtime\\lib;\nC:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;C:\\Program Files\\nodejs\\;\n~~~\n然后可以检查一下Node.js版本，直接命令行输入 node --version\n![](/img/node-version.png)\nok，nodejs环境到此完成。\n### 第二步：搭建GIT环境\n同样，大家可以参考[百度经验](http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html)\n\n下载地址可以前往[git官网](http://msysgit.github.io/)进行下载，同样下载跟自己系统位数一致的版本\n下载之后双击选择自己要安装的路径地址一键next安装就好了\n![](/img/git-install.jpg)\n安装好之后在任意位置右键都可以看到关于git的一些菜单选项：\n![](/img/git_menu.png)\nok，至此git安装完成。\n\n### 第三步：搭建hexo环境\n在E盘下建立hexo文件夹（或者你选择的任何路径）\n在nodejs和git环境都搭建完成后，在刚刚建立好的hexo文件夹中点击鼠标右键，选择**git bash**，\n输入以下命令安装hexo\n~~~\nnpm install -g hexo\n~~~\n接下来是比较重要的步骤，都是在git bash命令行操作，要认真看清楚：\n* 1、初始化你的博客\n~~~php\n\thexo init\n~~~\n>执行后hexo会在你的站点目录下生成网站所需的文件\n\n* 2、安装node_modules：\n~~~\nnpm install\n~~~\n>在此目录中生成node_modules\n\n* 3、本地浏览器查看：\n~~~\nhexo server  (此命令也可以简写为 hexo s)\n~~~\n>这时候会出现如下信息：\n[info] Hexo is running at http://localhost:4000/. \nPress Ctrl+C to stop. \n\n这个时候在你的浏览器输入http://localhost:4000/你就可以看到本地的博客搭建成功。\n这个时候可以轻松一下，随便浏览一下自己的博客熟悉一下\n\n### 第四步：本地hexo部署到github上\n1、首先要有github帐号，可以前往[github官网](http://www.github.com/)注册一个自己的github帐号，登录成功后，点击右上角的+号新建一个仓库\n![](/img/new_repository.png)\n注意，仓库名必须跟自己的username一致，格式是username.github.io\n![](/img/username_git.png)","slug":"create-blog","published":1,"updated":"2019-04-09T14:02:03.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmaq000ovjcgwzmht8h4","content":"<p><strong>各位有兴趣搭建博客或者正在搭建博客却遇到问题的朋友们，不妨抽空来围观一下我搭建的过程中遇到的坑和填的土。。</strong></p>\n<p><em>声明一点，以下所有步骤都是基于Windows系统的搭建，由于本人没有真正在其他系统上搭建过，就不画蛇添足了，所以其他系统的小心不要入错入坑咯</em></p>\n<p>下面先说一下基本思路（给大家一个清晰的搭建过程）：</p>\n<blockquote>\n<p>1、在Windows系统下搭建运行hexo环境的前提是先搭建<strong>nodejs</strong>跟<strong>git</strong><br>2、搭建好nodejs跟git后就可以在系统中搭建hexo环境<br>3、申请github.com帐号，创建自己的repository（仓库）——注意仓库名必须是：yourusername.github.io，具体原因及内容后面细讲、<br>4、本地hexo环境部署到github上 5、yourusername.github.io查看自己的博客，成功！</p>\n</blockquote>\n<h3 id=\"第一步：搭建nodejs环境\"><a href=\"#第一步：搭建nodejs环境\" class=\"headerlink\" title=\"第一步：搭建nodejs环境\"></a>第一步：搭建nodejs环境</h3><p>参考菜鸟教程的nodejs，很是详细：<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">nodejs-菜鸟教程</a></p>\n<p>大家可以去<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">nodejs</a>官网下载，记得要下载跟自己Windows系统一致的版本。（64bit的下载window-install的64-bit；同理：32bit的下载32-bit的）。<br>下载之后双击安装，选择自己要安装的路径地址，一直next到finish就可以了<br><img src=\"/img/install-node-msi-version-on-windows-step5.png\" alt=\"\"><br>安装后检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入”cmd” =&gt; 输入命令”path”，输出结果中有nodejs的环境变量说明安装成功。（如下我的环境变量已经有nodejs了）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=C:\\oraclexe\\app\\oracle\\product\\10.2.0\\server\\bin;C:\\Windows\\system32;</span><br><span class=\"line\">C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;</span><br><span class=\"line\">c:\\python32\\python;C:\\MinGW\\bin;C:\\Program Files\\GTK2-Runtime\\lib;</span><br><span class=\"line\">C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;C:\\Program Files\\nodejs\\;</span><br></pre></td></tr></table></figure></p>\n<p>然后可以检查一下Node.js版本，直接命令行输入 node –version<br><img src=\"/img/node-version.png\" alt=\"\"><br>ok，nodejs环境到此完成。</p>\n<h3 id=\"第二步：搭建GIT环境\"><a href=\"#第二步：搭建GIT环境\" class=\"headerlink\" title=\"第二步：搭建GIT环境\"></a>第二步：搭建GIT环境</h3><p>同样，大家可以参考<a href=\"http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html\" target=\"_blank\" rel=\"noopener\">百度经验</a></p>\n<p>下载地址可以前往<a href=\"http://msysgit.github.io/\" target=\"_blank\" rel=\"noopener\">git官网</a>进行下载，同样下载跟自己系统位数一致的版本<br>下载之后双击选择自己要安装的路径地址一键next安装就好了<br><img src=\"/img/git-install.jpg\" alt=\"\"><br>安装好之后在任意位置右键都可以看到关于git的一些菜单选项：<br><img src=\"/img/git_menu.png\" alt=\"\"><br>ok，至此git安装完成。</p>\n<h3 id=\"第三步：搭建hexo环境\"><a href=\"#第三步：搭建hexo环境\" class=\"headerlink\" title=\"第三步：搭建hexo环境\"></a>第三步：搭建hexo环境</h3><p>在E盘下建立hexo文件夹（或者你选择的任何路径）<br>在nodejs和git环境都搭建完成后，在刚刚建立好的hexo文件夹中点击鼠标右键，选择<strong>git bash</strong>，<br>输入以下命令安装hexo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<p>接下来是比较重要的步骤，都是在git bash命令行操作，要认真看清楚：</p>\n<ul>\n<li>1、初始化你的博客<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>执行后hexo会在你的站点目录下生成网站所需的文件</p>\n</blockquote>\n<ul>\n<li>2、安装node_modules：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>在此目录中生成node_modules</p>\n</blockquote>\n<ul>\n<li>3、本地浏览器查看：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server  (此命令也可以简写为 hexo s)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>这时候会出现如下信息：<br>[info] Hexo is running at <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>.<br>Press Ctrl+C to stop. </p>\n</blockquote>\n<p>这个时候在你的浏览器输入<a href=\"http://localhost:4000/你就可以看到本地的博客搭建成功。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/你就可以看到本地的博客搭建成功。</a><br>这个时候可以轻松一下，随便浏览一下自己的博客熟悉一下</p>\n<h3 id=\"第四步：本地hexo部署到github上\"><a href=\"#第四步：本地hexo部署到github上\" class=\"headerlink\" title=\"第四步：本地hexo部署到github上\"></a>第四步：本地hexo部署到github上</h3><p>1、首先要有github帐号，可以前往<a href=\"http://www.github.com/\" target=\"_blank\" rel=\"noopener\">github官网</a>注册一个自己的github帐号，登录成功后，点击右上角的+号新建一个仓库<br><img src=\"/img/new_repository.png\" alt=\"\"><br>注意，仓库名必须跟自己的username一致，格式是username.github.io<br><img src=\"/img/username_git.png\" alt=\"\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>各位有兴趣搭建博客或者正在搭建博客却遇到问题的朋友们，不妨抽空来围观一下我搭建的过程中遇到的坑和填的土。。</strong></p>\n<p><em>声明一点，以下所有步骤都是基于Windows系统的搭建，由于本人没有真正在其他系统上搭建过，就不画蛇添足了，所以其他系统的小心不要入错入坑咯</em></p>\n<p>下面先说一下基本思路（给大家一个清晰的搭建过程）：</p>\n<blockquote>\n<p>1、在Windows系统下搭建运行hexo环境的前提是先搭建<strong>nodejs</strong>跟<strong>git</strong><br>2、搭建好nodejs跟git后就可以在系统中搭建hexo环境<br>3、申请github.com帐号，创建自己的repository（仓库）——注意仓库名必须是：yourusername.github.io，具体原因及内容后面细讲、<br>4、本地hexo环境部署到github上 5、yourusername.github.io查看自己的博客，成功！</p>\n</blockquote>\n<h3 id=\"第一步：搭建nodejs环境\"><a href=\"#第一步：搭建nodejs环境\" class=\"headerlink\" title=\"第一步：搭建nodejs环境\"></a>第一步：搭建nodejs环境</h3><p>参考菜鸟教程的nodejs，很是详细：<a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\" target=\"_blank\" rel=\"noopener\">nodejs-菜鸟教程</a></p>\n<p>大家可以去<a href=\"https://nodejs.org/en/download/\" target=\"_blank\" rel=\"noopener\">nodejs</a>官网下载，记得要下载跟自己Windows系统一致的版本。（64bit的下载window-install的64-bit；同理：32bit的下载32-bit的）。<br>下载之后双击安装，选择自己要安装的路径地址，一直next到finish就可以了<br><img src=\"/img/install-node-msi-version-on-windows-step5.png\" alt=\"\"><br>安装后检测PATH环境变量是否配置了Node.js，点击开始=》运行=》输入”cmd” =&gt; 输入命令”path”，输出结果中有nodejs的环境变量说明安装成功。（如下我的环境变量已经有nodejs了）<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=C:\\oraclexe\\app\\oracle\\product\\10.2.0\\server\\bin;C:\\Windows\\system32;</span><br><span class=\"line\">C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;</span><br><span class=\"line\">c:\\python32\\python;C:\\MinGW\\bin;C:\\Program Files\\GTK2-Runtime\\lib;</span><br><span class=\"line\">C:\\Program Files\\MySQL\\MySQL Server 5.5\\bin;C:\\Program Files\\nodejs\\;</span><br></pre></td></tr></table></figure></p>\n<p>然后可以检查一下Node.js版本，直接命令行输入 node –version<br><img src=\"/img/node-version.png\" alt=\"\"><br>ok，nodejs环境到此完成。</p>\n<h3 id=\"第二步：搭建GIT环境\"><a href=\"#第二步：搭建GIT环境\" class=\"headerlink\" title=\"第二步：搭建GIT环境\"></a>第二步：搭建GIT环境</h3><p>同样，大家可以参考<a href=\"http://jingyan.baidu.com/article/90895e0fb3495f64ed6b0b50.html\" target=\"_blank\" rel=\"noopener\">百度经验</a></p>\n<p>下载地址可以前往<a href=\"http://msysgit.github.io/\" target=\"_blank\" rel=\"noopener\">git官网</a>进行下载，同样下载跟自己系统位数一致的版本<br>下载之后双击选择自己要安装的路径地址一键next安装就好了<br><img src=\"/img/git-install.jpg\" alt=\"\"><br>安装好之后在任意位置右键都可以看到关于git的一些菜单选项：<br><img src=\"/img/git_menu.png\" alt=\"\"><br>ok，至此git安装完成。</p>\n<h3 id=\"第三步：搭建hexo环境\"><a href=\"#第三步：搭建hexo环境\" class=\"headerlink\" title=\"第三步：搭建hexo环境\"></a>第三步：搭建hexo环境</h3><p>在E盘下建立hexo文件夹（或者你选择的任何路径）<br>在nodejs和git环境都搭建完成后，在刚刚建立好的hexo文件夹中点击鼠标右键，选择<strong>git bash</strong>，<br>输入以下命令安装hexo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo</span><br></pre></td></tr></table></figure></p>\n<p>接下来是比较重要的步骤，都是在git bash命令行操作，要认真看清楚：</p>\n<ul>\n<li>1、初始化你的博客<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>执行后hexo会在你的站点目录下生成网站所需的文件</p>\n</blockquote>\n<ul>\n<li>2、安装node_modules：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>在此目录中生成node_modules</p>\n</blockquote>\n<ul>\n<li>3、本地浏览器查看：<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server  (此命令也可以简写为 hexo s)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>这时候会出现如下信息：<br>[info] Hexo is running at <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/</a>.<br>Press Ctrl+C to stop. </p>\n</blockquote>\n<p>这个时候在你的浏览器输入<a href=\"http://localhost:4000/你就可以看到本地的博客搭建成功。\" target=\"_blank\" rel=\"noopener\">http://localhost:4000/你就可以看到本地的博客搭建成功。</a><br>这个时候可以轻松一下，随便浏览一下自己的博客熟悉一下</p>\n<h3 id=\"第四步：本地hexo部署到github上\"><a href=\"#第四步：本地hexo部署到github上\" class=\"headerlink\" title=\"第四步：本地hexo部署到github上\"></a>第四步：本地hexo部署到github上</h3><p>1、首先要有github帐号，可以前往<a href=\"http://www.github.com/\" target=\"_blank\" rel=\"noopener\">github官网</a>注册一个自己的github帐号，登录成功后，点击右上角的+号新建一个仓库<br><img src=\"/img/new_repository.png\" alt=\"\"><br>注意，仓库名必须跟自己的username一致，格式是username.github.io<br><img src=\"/img/username_git.png\" alt=\"\"></p>\n"},{"title":"git 误删分支恢复方法","date":"2018-03-28T10:21:01.000Z","_content":"* 在使用git的时候，有时候会因为人为因素导致分支（commit）被删除，可以使用如下步骤进行恢复。\n\n### 首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复\n1、创建分支hexo\n```\n\tgit branch hexo\n```\n2、查看分支列表\n```\n\tgit branch -a\n\t  * master\n\t\thexo\n```\n3、切换到hexo分支，随便修改一下东西后commit\n```\n\tgit checkout hexo\n\n\techo 'hexo' > test.txt\n\n\tgit add .\n\tgit commit -m 'add test.txt'\n```\n4、删除分支\n```\n\tgit branch -D hexo\n```\n5、查看分支列表，hexo分支已经不存在\n```\n\tgit branch -a\n\t  * master\n```\n\n## 恢复步骤如下\n1、使用git log -g 找回之前提交的commit\n```\ncommit 3eac14d05bc1264cda54a7c21f04c3892f32406a\nReflog: HEAD@{1} (fdipzone <fdipzone@sina.com>)\nReflog message: commit: add test.txt\nAuthor: fdipzone <fdipzone@sina.com>\nDate:   Sun Jan 31 22:26:33 2016 +0800\n\n    add test.txt\n\n```\n2、使用 git branch recover_branch[新分支] commit_id 命令，用这个commit创建一个分支\n```\ngit branch recover_branch_hexo 3eac14d05bc1264cda54a7c21f04c3892f32406a\n\ngit branch -a\n* master\n  recover_branch_hexo\n```\n这个时候，可以看到 recover_branch_hexo分支已经创建了。\n3、切换到recover_branch_hexo分支，检查文件是否存在\n```\ngit checkout recover_branch_hexo\nls -lt\n```\n这样就可以恢复误删除的分支了。","source":"_posts/git_recover_branch.md","raw":"---\ntitle: git 误删分支恢复方法\ndate: 2018-03-28 18:21:01\ntags: GIT\ncategories: GIT\n---\n* 在使用git的时候，有时候会因为人为因素导致分支（commit）被删除，可以使用如下步骤进行恢复。\n\n### 首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复\n1、创建分支hexo\n```\n\tgit branch hexo\n```\n2、查看分支列表\n```\n\tgit branch -a\n\t  * master\n\t\thexo\n```\n3、切换到hexo分支，随便修改一下东西后commit\n```\n\tgit checkout hexo\n\n\techo 'hexo' > test.txt\n\n\tgit add .\n\tgit commit -m 'add test.txt'\n```\n4、删除分支\n```\n\tgit branch -D hexo\n```\n5、查看分支列表，hexo分支已经不存在\n```\n\tgit branch -a\n\t  * master\n```\n\n## 恢复步骤如下\n1、使用git log -g 找回之前提交的commit\n```\ncommit 3eac14d05bc1264cda54a7c21f04c3892f32406a\nReflog: HEAD@{1} (fdipzone <fdipzone@sina.com>)\nReflog message: commit: add test.txt\nAuthor: fdipzone <fdipzone@sina.com>\nDate:   Sun Jan 31 22:26:33 2016 +0800\n\n    add test.txt\n\n```\n2、使用 git branch recover_branch[新分支] commit_id 命令，用这个commit创建一个分支\n```\ngit branch recover_branch_hexo 3eac14d05bc1264cda54a7c21f04c3892f32406a\n\ngit branch -a\n* master\n  recover_branch_hexo\n```\n这个时候，可以看到 recover_branch_hexo分支已经创建了。\n3、切换到recover_branch_hexo分支，检查文件是否存在\n```\ngit checkout recover_branch_hexo\nls -lt\n```\n这样就可以恢复误删除的分支了。","slug":"git_recover_branch","published":1,"updated":"2019-04-09T14:02:03.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmas000qvjcgihp2bmgh","content":"<ul>\n<li>在使用git的时候，有时候会因为人为因素导致分支（commit）被删除，可以使用如下步骤进行恢复。</li>\n</ul>\n<h3 id=\"首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复\"><a href=\"#首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复\" class=\"headerlink\" title=\"首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复\"></a>首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复</h3><p>1、创建分支hexo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch hexo</span><br></pre></td></tr></table></figure></p>\n<p>2、查看分支列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br><span class=\"line\">  * master</span><br><span class=\"line\">\thexo</span><br></pre></td></tr></table></figure></p>\n<p>3、切换到hexo分支，随便修改一下东西后commit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout hexo</span><br><span class=\"line\"></span><br><span class=\"line\">echo &apos;hexo&apos; &gt; test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;add test.txt&apos;</span><br></pre></td></tr></table></figure></p>\n<p>4、删除分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D hexo</span><br></pre></td></tr></table></figure></p>\n<p>5、查看分支列表，hexo分支已经不存在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br><span class=\"line\">  * master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"恢复步骤如下\"><a href=\"#恢复步骤如下\" class=\"headerlink\" title=\"恢复步骤如下\"></a>恢复步骤如下</h2><p>1、使用git log -g 找回之前提交的commit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3eac14d05bc1264cda54a7c21f04c3892f32406a</span><br><span class=\"line\">Reflog: HEAD@&#123;1&#125; (fdipzone &lt;fdipzone@sina.com&gt;)</span><br><span class=\"line\">Reflog message: commit: add test.txt</span><br><span class=\"line\">Author: fdipzone &lt;fdipzone@sina.com&gt;</span><br><span class=\"line\">Date:   Sun Jan 31 22:26:33 2016 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add test.txt</span><br></pre></td></tr></table></figure></p>\n<p>2、使用 git branch recover_branch[新分支] commit_id 命令，用这个commit创建一个分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch recover_branch_hexo 3eac14d05bc1264cda54a7c21f04c3892f32406a</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\">* master</span><br><span class=\"line\">  recover_branch_hexo</span><br></pre></td></tr></table></figure></p>\n<p>这个时候，可以看到 recover_branch_hexo分支已经创建了。<br>3、切换到recover_branch_hexo分支，检查文件是否存在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout recover_branch_hexo</span><br><span class=\"line\">ls -lt</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以恢复误删除的分支了。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>在使用git的时候，有时候会因为人为因素导致分支（commit）被删除，可以使用如下步骤进行恢复。</li>\n</ul>\n<h3 id=\"首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复\"><a href=\"#首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复\" class=\"headerlink\" title=\"首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复\"></a>首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复</h3><p>1、创建分支hexo<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch hexo</span><br></pre></td></tr></table></figure></p>\n<p>2、查看分支列表<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br><span class=\"line\">  * master</span><br><span class=\"line\">\thexo</span><br></pre></td></tr></table></figure></p>\n<p>3、切换到hexo分支，随便修改一下东西后commit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout hexo</span><br><span class=\"line\"></span><br><span class=\"line\">echo &apos;hexo&apos; &gt; test.txt</span><br><span class=\"line\"></span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &apos;add test.txt&apos;</span><br></pre></td></tr></table></figure></p>\n<p>4、删除分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -D hexo</span><br></pre></td></tr></table></figure></p>\n<p>5、查看分支列表，hexo分支已经不存在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch -a</span><br><span class=\"line\">  * master</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"恢复步骤如下\"><a href=\"#恢复步骤如下\" class=\"headerlink\" title=\"恢复步骤如下\"></a>恢复步骤如下</h2><p>1、使用git log -g 找回之前提交的commit<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commit 3eac14d05bc1264cda54a7c21f04c3892f32406a</span><br><span class=\"line\">Reflog: HEAD@&#123;1&#125; (fdipzone &lt;fdipzone@sina.com&gt;)</span><br><span class=\"line\">Reflog message: commit: add test.txt</span><br><span class=\"line\">Author: fdipzone &lt;fdipzone@sina.com&gt;</span><br><span class=\"line\">Date:   Sun Jan 31 22:26:33 2016 +0800</span><br><span class=\"line\"></span><br><span class=\"line\">    add test.txt</span><br></pre></td></tr></table></figure></p>\n<p>2、使用 git branch recover_branch[新分支] commit_id 命令，用这个commit创建一个分支<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch recover_branch_hexo 3eac14d05bc1264cda54a7c21f04c3892f32406a</span><br><span class=\"line\"></span><br><span class=\"line\">git branch -a</span><br><span class=\"line\">* master</span><br><span class=\"line\">  recover_branch_hexo</span><br></pre></td></tr></table></figure></p>\n<p>这个时候，可以看到 recover_branch_hexo分支已经创建了。<br>3、切换到recover_branch_hexo分支，检查文件是否存在<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout recover_branch_hexo</span><br><span class=\"line\">ls -lt</span><br></pre></td></tr></table></figure></p>\n<p>这样就可以恢复误删除的分支了。</p>\n"},{"title":"PHP设计模式（design patterns of PHP）","date":"2018-06-16T09:21:01.000Z","_content":"### 23种设计模式  \n\n> 以下包含java设计模式的思想（共25种设计模式）\n> 三大类：创建型模式（creational patterns）、结构型模式（structural patterns）、行为型模式（behavioral patterns）  \n\n### **创建型模式（creational patterns）:**：  \n>1. 工厂模式 -- factory pattern  \n>2. 抽象工厂模式 -- abstract factory pattern  \n>3. 单例模式 -- singleton pattern  \n>4. 建造者模式 -- builder pattern  \n>5. 原型模式 -- prototype pattern  \n\n### **结构型模式（structural patterns）:**  \n>1. 适配器模式  --  adapter pattern\n>2. 桥接模式    --  bridge pattern\n>3. 过滤器模式/标准模式  --  filter pattern / criteria pattern\n>4. 组合模式    --  composite pattern\n>5. 装饰器模式  --  decorator pattern\n>6. 外观模/门面模式  --  facade pattern\n>7. 享元模式    --  flyweight pattern\n>8. 代理模式    --  proxy pattern\n\n### **行为型模式（behavioral patterns）：**  \n>1. 责任链模式  --  responsibility pattern\n>2. 命令模式    --  command pattern\n>3. 解释器模式  --  expression pattern\n>4. 迭代器模式  --  iterator pattern\n>5. 中介者模式  -- mediator pattern\n>6. 备忘录模式  --  memento pattern\n>7. 观察者模式  --  observer pattern\n>8. 状态模式    --  state pattern\n>9. 空对象模式  --  null object pattern\n>10. 策略模式   --  strategy pattern\n>11. 模板模式   --  template pattern\n>12. 访问者模式 --  visitor pattern","source":"_posts/design_patterns.md","raw":"---\ntitle: PHP设计模式（design patterns of PHP）\ndate: 2018-06-16 17:21:01\ntags: 设计模式\ncategories: 设计模式\n---\n### 23种设计模式  \n\n> 以下包含java设计模式的思想（共25种设计模式）\n> 三大类：创建型模式（creational patterns）、结构型模式（structural patterns）、行为型模式（behavioral patterns）  \n\n### **创建型模式（creational patterns）:**：  \n>1. 工厂模式 -- factory pattern  \n>2. 抽象工厂模式 -- abstract factory pattern  \n>3. 单例模式 -- singleton pattern  \n>4. 建造者模式 -- builder pattern  \n>5. 原型模式 -- prototype pattern  \n\n### **结构型模式（structural patterns）:**  \n>1. 适配器模式  --  adapter pattern\n>2. 桥接模式    --  bridge pattern\n>3. 过滤器模式/标准模式  --  filter pattern / criteria pattern\n>4. 组合模式    --  composite pattern\n>5. 装饰器模式  --  decorator pattern\n>6. 外观模/门面模式  --  facade pattern\n>7. 享元模式    --  flyweight pattern\n>8. 代理模式    --  proxy pattern\n\n### **行为型模式（behavioral patterns）：**  \n>1. 责任链模式  --  responsibility pattern\n>2. 命令模式    --  command pattern\n>3. 解释器模式  --  expression pattern\n>4. 迭代器模式  --  iterator pattern\n>5. 中介者模式  -- mediator pattern\n>6. 备忘录模式  --  memento pattern\n>7. 观察者模式  --  observer pattern\n>8. 状态模式    --  state pattern\n>9. 空对象模式  --  null object pattern\n>10. 策略模式   --  strategy pattern\n>11. 模板模式   --  template pattern\n>12. 访问者模式 --  visitor pattern","slug":"design_patterns","published":1,"updated":"2019-04-09T14:32:02.790Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmat000vvjcgjy0o8ajy","content":"<h3 id=\"23种设计模式\"><a href=\"#23种设计模式\" class=\"headerlink\" title=\"23种设计模式\"></a>23种设计模式</h3><blockquote>\n<p>以下包含java设计模式的思想（共25种设计模式）<br>三大类：创建型模式（creational patterns）、结构型模式（structural patterns）、行为型模式（behavioral patterns）  </p>\n</blockquote>\n<h3 id=\"创建型模式（creational-patterns）-：\"><a href=\"#创建型模式（creational-patterns）-：\" class=\"headerlink\" title=\"创建型模式（creational patterns）:：\"></a><strong>创建型模式（creational patterns）:</strong>：</h3><blockquote>\n<ol>\n<li>工厂模式 – factory pattern  </li>\n<li>抽象工厂模式 – abstract factory pattern  </li>\n<li>单例模式 – singleton pattern  </li>\n<li>建造者模式 – builder pattern  </li>\n<li>原型模式 – prototype pattern  </li>\n</ol>\n</blockquote>\n<h3 id=\"结构型模式（structural-patterns）\"><a href=\"#结构型模式（structural-patterns）\" class=\"headerlink\" title=\"结构型模式（structural patterns）:\"></a><strong>结构型模式（structural patterns）:</strong></h3><blockquote>\n<ol>\n<li>适配器模式  –  adapter pattern</li>\n<li>桥接模式    –  bridge pattern</li>\n<li>过滤器模式/标准模式  –  filter pattern / criteria pattern</li>\n<li>组合模式    –  composite pattern</li>\n<li>装饰器模式  –  decorator pattern</li>\n<li>外观模/门面模式  –  facade pattern</li>\n<li>享元模式    –  flyweight pattern</li>\n<li>代理模式    –  proxy pattern</li>\n</ol>\n</blockquote>\n<h3 id=\"行为型模式（behavioral-patterns）：\"><a href=\"#行为型模式（behavioral-patterns）：\" class=\"headerlink\" title=\"行为型模式（behavioral patterns）：\"></a><strong>行为型模式（behavioral patterns）：</strong></h3><blockquote>\n<ol>\n<li>责任链模式  –  responsibility pattern</li>\n<li>命令模式    –  command pattern</li>\n<li>解释器模式  –  expression pattern</li>\n<li>迭代器模式  –  iterator pattern</li>\n<li>中介者模式  – mediator pattern</li>\n<li>备忘录模式  –  memento pattern</li>\n<li>观察者模式  –  observer pattern</li>\n<li>状态模式    –  state pattern</li>\n<li>空对象模式  –  null object pattern</li>\n<li>策略模式   –  strategy pattern</li>\n<li>模板模式   –  template pattern</li>\n<li>访问者模式 –  visitor pattern</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"23种设计模式\"><a href=\"#23种设计模式\" class=\"headerlink\" title=\"23种设计模式\"></a>23种设计模式</h3><blockquote>\n<p>以下包含java设计模式的思想（共25种设计模式）<br>三大类：创建型模式（creational patterns）、结构型模式（structural patterns）、行为型模式（behavioral patterns）  </p>\n</blockquote>\n<h3 id=\"创建型模式（creational-patterns）-：\"><a href=\"#创建型模式（creational-patterns）-：\" class=\"headerlink\" title=\"创建型模式（creational patterns）:：\"></a><strong>创建型模式（creational patterns）:</strong>：</h3><blockquote>\n<ol>\n<li>工厂模式 – factory pattern  </li>\n<li>抽象工厂模式 – abstract factory pattern  </li>\n<li>单例模式 – singleton pattern  </li>\n<li>建造者模式 – builder pattern  </li>\n<li>原型模式 – prototype pattern  </li>\n</ol>\n</blockquote>\n<h3 id=\"结构型模式（structural-patterns）\"><a href=\"#结构型模式（structural-patterns）\" class=\"headerlink\" title=\"结构型模式（structural patterns）:\"></a><strong>结构型模式（structural patterns）:</strong></h3><blockquote>\n<ol>\n<li>适配器模式  –  adapter pattern</li>\n<li>桥接模式    –  bridge pattern</li>\n<li>过滤器模式/标准模式  –  filter pattern / criteria pattern</li>\n<li>组合模式    –  composite pattern</li>\n<li>装饰器模式  –  decorator pattern</li>\n<li>外观模/门面模式  –  facade pattern</li>\n<li>享元模式    –  flyweight pattern</li>\n<li>代理模式    –  proxy pattern</li>\n</ol>\n</blockquote>\n<h3 id=\"行为型模式（behavioral-patterns）：\"><a href=\"#行为型模式（behavioral-patterns）：\" class=\"headerlink\" title=\"行为型模式（behavioral patterns）：\"></a><strong>行为型模式（behavioral patterns）：</strong></h3><blockquote>\n<ol>\n<li>责任链模式  –  responsibility pattern</li>\n<li>命令模式    –  command pattern</li>\n<li>解释器模式  –  expression pattern</li>\n<li>迭代器模式  –  iterator pattern</li>\n<li>中介者模式  – mediator pattern</li>\n<li>备忘录模式  –  memento pattern</li>\n<li>观察者模式  –  observer pattern</li>\n<li>状态模式    –  state pattern</li>\n<li>空对象模式  –  null object pattern</li>\n<li>策略模式   –  strategy pattern</li>\n<li>模板模式   –  template pattern</li>\n<li>访问者模式 –  visitor pattern</li>\n</ol>\n</blockquote>\n"},{"title":"PHP设计模式之创建型模式（creational patterns）","date":"2018-06-16T12:21:01.000Z","_content":"### 工厂模式\n>定义一个创建对象的接口，让其子类决定去实例化哪一个工厂类  \n创建的过程是在子类中执行  \n**优点**：  \n>1. 调用者想创建一个对象只需要知道名称即可  \n>2. 扩展性高，想增加一个产品，只需要扩展一个工厂类就可以  \n>3. 屏蔽产品具体实现，调用者只关心产品的接口  \n>\n>**缺点**：  \n>1. 每增加一个产品，都需要增加一个具体类和对象实现工厂，使得系统类的个数成倍增加，一定程度上增加了系统复杂度，同时也增加了系统具体类的依赖\n\n```\n/*** ------------工厂模式  factory-----------------------  ***/\n\nclass DB\n{\n    public function __construct()\n    {\n        echo get_class();\n    }\n    public function die()\n    {\n\n    }\n}\nclass Mysql extends DB{}\nclass SqlSrv extends DB{}\nclass Odbc extends DB{}\n\n\ninterface TestFactory\n{\n    public function toString();\n}\n\nclass Factory implements TestFactory\n{\n    public function toString(){\n\n    }\n    public function do($type)\n    {\n        switch($type){\n            case 'Mysql':\n                return new Mysql();\n            case 'SqlSrv':\n                return new SqlSrv();\n            case 'Odbc':\n                return new Odbc();\n        }\n    }\n}\n\n$test = new Factory();\n$test->do('Mysql');\n$test->do('SqlSrv');\n$test->do('Odbc');\n```\n\n### 抽象工厂模式\n>围绕一个超级工厂创建其他工厂，该超级工厂是其他工厂的工厂  \n一个工厂中聚合多个同类产品  \n**优点**：  \n    当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。  \n**缺点**：  \n    产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。  \n**注意事项**：  \n    产品族难扩展，产品等级易扩展。\n\n```\n/*** ------------抽象工厂模式  abstract factory-----------------------  ***/\nclass Cache{}\nclass CacheDie{}\nclass FileCache extends Cache\n{\n    public function __construct()\n    {\n        echo \"filecache\";\n    }\n}\nclass RedisCache extends Cache{\n    public function __construct()\n    {\n        echo \"rediscache\";\n    }\n}\nclass FileCacheDie extends CacheDie\n{\n    public function __construct()\n    {\n        echo \"FileCacheDie\";\n    }\n}\nclass RedisCacheDie extends CacheDie\n{\n    public function __construct()\n    {\n        echo \"RedisCacheDie\";\n    }\n}\n\nclass CacheAbstractFactory\n{\n    public function createCache($type){\n        switch ($type) {\n            case 'file':\n                return new FileCache();\n            case 'redis':\n                return new RedisCache();\n            default:\n                break;\n        }\n    }\n}\nclass CacheDieAbstractFactory\n{\n    public function createCache($type){\n        switch ($type) {\n            case 'file':\n                return new FileCacheDie();\n            case 'redis':\n                return new RedisCacheDie();\n            default:\n                break;\n        }\n    }\n}\n\nclass TestAbstractFactory\n{\n    public function createType($type)\n    {\n        switch ($type) {\n            case 'cache':\n                return new CacheAbstractFactory();\n            case 'cacheDie':\n                return new CacheDieAbstractFactory();\n            default:\n                break;\n        }\n    }\n}\n\n$testAbstractFactory = new TestAbstractFactory();\n$cache = $testAbstractFactory->createType('cache');\n$cache->createCache('file');\n$cache->createCache('redis');\n$cacheDie = $testAbstractFactory->createType('cacheDie');\n$cacheDie->createCache('file');\n$cacheDie->createCache('redis');\n\n/*** -----------------------------------  ***/\n```\n\n### 单例模式\n>负责创建自己的对象，同时确保只有单个对象被创建。  \n这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。  \n**注意**：  \n>1. 单例类只能有一个实例。  \n>2. 单例类必须自己创建自己的唯一实例。  \n>3. 单例类必须给所有其他对象提供这一实例。  \n>\n>**优点**：  \n>1. 在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例  \n>2. 避免对资源的多重占用（比如写文件操作）。  \n>\n>**缺点**：  \n    没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。  \n**注意事项**：  \n    getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。\n\n```\n<?php\n\n/*** -----------单例模式  singleton------------  ***/\nfinal class TestSingle\n{\n\n    private static $instance;\n    public static function getInstance()\n    {\n        if(!(self::$instance instanceof self )){\n            self::$instance = new self();\n        }\n        return self::$instance;\n    }\n\n    private function __construct()\n    {\n\n    }\n\n    public function toString()\n    {\n        echo \"string\";\n    }\n}\n\n\n$test = TestSingle::getInstance();\n$test->toString();\n\n/*** -----------------------------------  ***/\n```\n\n### 建造者模式\n>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。  \n**优点**：  \n>1. 建造者独立，易扩展。  \n>2. 便于控制细节风险。  \n>\n>**缺点**：  \n>1. 产品必须有共同点，范围有限制。  \n>2. 如内部变化复杂，会有很多的建造类。  \n>\n>**注意事项**：  \n    与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。\n\n```\n/*** --------------建造者模式  builder---------------------  ***/\n\nclass Product\n{\n    private $_arr;\n    public function __construct()\n    {\n        $this->_arr = array();\n    }\n    public function add($part)\n    {\n        return array_push($this->_arr, $part);\n    }\n}\n\nclass Builder\n{\n    private $_product;\n    public function __construct()\n    {\n        $this->_product = new Product();\n    }\n    public function add1($part)\n    {\n        $this->_product->add($part);\n    }\n    public function add2($part)\n    {\n        $this->_product->add($part);\n    }\n    public function getPart()\n    {\n        return $this->_product;\n    }\n}\n\nclass Director\n{\n    public function __construct(Builder $builder)\n    {\n        $builder->add1('arr1');\n        $builder->add2('add2');\n    }\n}\n\n$test_builder = new Builder();\n$test_director = new Director($test_builder);\nprint_r($test_builder->getPart());\n\n/*** -----------------------------------  ***/\n```\n\n### 原型模式\n>实现了一个原型接口，该接口用于创建当前对象的克隆。  \n实现克隆 clone  \n**优点**：  \n>1. 性能提高。  \n>2. 逃避构造函数的约束。  \n>\n>**缺点**：  \n>1. 配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。  \n>2. 必须实现 Cloneable 接口。  \n>\n>**注意事项**：  \n    与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。\n    \n```\n/*** --------------原型模式  prototype---------------------  ***/\n\nclass ProtoType\n{\n    private $_name;\n    public function __construct($obj)\n    {\n        $this->_name = $obj;\n    }\n    public function copy()\n    {\n        return clone $this;\n    }\n}\nclass TestProto{}\n$testProto = new ProtoType(new TestProto());\nprint_r($testProto);\n$testProtoCopy = $testProto->copy();\nprint_r($testProtoCopy);\n\n/*** -----------------------------------  ***/\n```","source":"_posts/creational_patterns.md","raw":"---\ntitle: PHP设计模式之创建型模式（creational patterns）\ndate: 2018-06-16 20:21:01\ntags: 设计模式\ncategories: 设计模式\n---\n### 工厂模式\n>定义一个创建对象的接口，让其子类决定去实例化哪一个工厂类  \n创建的过程是在子类中执行  \n**优点**：  \n>1. 调用者想创建一个对象只需要知道名称即可  \n>2. 扩展性高，想增加一个产品，只需要扩展一个工厂类就可以  \n>3. 屏蔽产品具体实现，调用者只关心产品的接口  \n>\n>**缺点**：  \n>1. 每增加一个产品，都需要增加一个具体类和对象实现工厂，使得系统类的个数成倍增加，一定程度上增加了系统复杂度，同时也增加了系统具体类的依赖\n\n```\n/*** ------------工厂模式  factory-----------------------  ***/\n\nclass DB\n{\n    public function __construct()\n    {\n        echo get_class();\n    }\n    public function die()\n    {\n\n    }\n}\nclass Mysql extends DB{}\nclass SqlSrv extends DB{}\nclass Odbc extends DB{}\n\n\ninterface TestFactory\n{\n    public function toString();\n}\n\nclass Factory implements TestFactory\n{\n    public function toString(){\n\n    }\n    public function do($type)\n    {\n        switch($type){\n            case 'Mysql':\n                return new Mysql();\n            case 'SqlSrv':\n                return new SqlSrv();\n            case 'Odbc':\n                return new Odbc();\n        }\n    }\n}\n\n$test = new Factory();\n$test->do('Mysql');\n$test->do('SqlSrv');\n$test->do('Odbc');\n```\n\n### 抽象工厂模式\n>围绕一个超级工厂创建其他工厂，该超级工厂是其他工厂的工厂  \n一个工厂中聚合多个同类产品  \n**优点**：  \n    当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。  \n**缺点**：  \n    产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。  \n**注意事项**：  \n    产品族难扩展，产品等级易扩展。\n\n```\n/*** ------------抽象工厂模式  abstract factory-----------------------  ***/\nclass Cache{}\nclass CacheDie{}\nclass FileCache extends Cache\n{\n    public function __construct()\n    {\n        echo \"filecache\";\n    }\n}\nclass RedisCache extends Cache{\n    public function __construct()\n    {\n        echo \"rediscache\";\n    }\n}\nclass FileCacheDie extends CacheDie\n{\n    public function __construct()\n    {\n        echo \"FileCacheDie\";\n    }\n}\nclass RedisCacheDie extends CacheDie\n{\n    public function __construct()\n    {\n        echo \"RedisCacheDie\";\n    }\n}\n\nclass CacheAbstractFactory\n{\n    public function createCache($type){\n        switch ($type) {\n            case 'file':\n                return new FileCache();\n            case 'redis':\n                return new RedisCache();\n            default:\n                break;\n        }\n    }\n}\nclass CacheDieAbstractFactory\n{\n    public function createCache($type){\n        switch ($type) {\n            case 'file':\n                return new FileCacheDie();\n            case 'redis':\n                return new RedisCacheDie();\n            default:\n                break;\n        }\n    }\n}\n\nclass TestAbstractFactory\n{\n    public function createType($type)\n    {\n        switch ($type) {\n            case 'cache':\n                return new CacheAbstractFactory();\n            case 'cacheDie':\n                return new CacheDieAbstractFactory();\n            default:\n                break;\n        }\n    }\n}\n\n$testAbstractFactory = new TestAbstractFactory();\n$cache = $testAbstractFactory->createType('cache');\n$cache->createCache('file');\n$cache->createCache('redis');\n$cacheDie = $testAbstractFactory->createType('cacheDie');\n$cacheDie->createCache('file');\n$cacheDie->createCache('redis');\n\n/*** -----------------------------------  ***/\n```\n\n### 单例模式\n>负责创建自己的对象，同时确保只有单个对象被创建。  \n这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。  \n**注意**：  \n>1. 单例类只能有一个实例。  \n>2. 单例类必须自己创建自己的唯一实例。  \n>3. 单例类必须给所有其他对象提供这一实例。  \n>\n>**优点**：  \n>1. 在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例  \n>2. 避免对资源的多重占用（比如写文件操作）。  \n>\n>**缺点**：  \n    没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。  \n**注意事项**：  \n    getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。\n\n```\n<?php\n\n/*** -----------单例模式  singleton------------  ***/\nfinal class TestSingle\n{\n\n    private static $instance;\n    public static function getInstance()\n    {\n        if(!(self::$instance instanceof self )){\n            self::$instance = new self();\n        }\n        return self::$instance;\n    }\n\n    private function __construct()\n    {\n\n    }\n\n    public function toString()\n    {\n        echo \"string\";\n    }\n}\n\n\n$test = TestSingle::getInstance();\n$test->toString();\n\n/*** -----------------------------------  ***/\n```\n\n### 建造者模式\n>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。  \n**优点**：  \n>1. 建造者独立，易扩展。  \n>2. 便于控制细节风险。  \n>\n>**缺点**：  \n>1. 产品必须有共同点，范围有限制。  \n>2. 如内部变化复杂，会有很多的建造类。  \n>\n>**注意事项**：  \n    与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。\n\n```\n/*** --------------建造者模式  builder---------------------  ***/\n\nclass Product\n{\n    private $_arr;\n    public function __construct()\n    {\n        $this->_arr = array();\n    }\n    public function add($part)\n    {\n        return array_push($this->_arr, $part);\n    }\n}\n\nclass Builder\n{\n    private $_product;\n    public function __construct()\n    {\n        $this->_product = new Product();\n    }\n    public function add1($part)\n    {\n        $this->_product->add($part);\n    }\n    public function add2($part)\n    {\n        $this->_product->add($part);\n    }\n    public function getPart()\n    {\n        return $this->_product;\n    }\n}\n\nclass Director\n{\n    public function __construct(Builder $builder)\n    {\n        $builder->add1('arr1');\n        $builder->add2('add2');\n    }\n}\n\n$test_builder = new Builder();\n$test_director = new Director($test_builder);\nprint_r($test_builder->getPart());\n\n/*** -----------------------------------  ***/\n```\n\n### 原型模式\n>实现了一个原型接口，该接口用于创建当前对象的克隆。  \n实现克隆 clone  \n**优点**：  \n>1. 性能提高。  \n>2. 逃避构造函数的约束。  \n>\n>**缺点**：  \n>1. 配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。  \n>2. 必须实现 Cloneable 接口。  \n>\n>**注意事项**：  \n    与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。\n    \n```\n/*** --------------原型模式  prototype---------------------  ***/\n\nclass ProtoType\n{\n    private $_name;\n    public function __construct($obj)\n    {\n        $this->_name = $obj;\n    }\n    public function copy()\n    {\n        return clone $this;\n    }\n}\nclass TestProto{}\n$testProto = new ProtoType(new TestProto());\nprint_r($testProto);\n$testProtoCopy = $testProto->copy();\nprint_r($testProtoCopy);\n\n/*** -----------------------------------  ***/\n```","slug":"creational_patterns","published":1,"updated":"2019-04-09T14:31:30.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmav000xvjcg1n7prh8y","content":"<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><blockquote>\n<p>定义一个创建对象的接口，让其子类决定去实例化哪一个工厂类<br>创建的过程是在子类中执行<br><strong>优点</strong>：  </p>\n<ol>\n<li>调用者想创建一个对象只需要知道名称即可  </li>\n<li>扩展性高，想增加一个产品，只需要扩展一个工厂类就可以  </li>\n<li>屏蔽产品具体实现，调用者只关心产品的接口  </li>\n</ol>\n<p><strong>缺点</strong>：  </p>\n<ol>\n<li>每增加一个产品，都需要增加一个具体类和对象实现工厂，使得系统类的个数成倍增加，一定程度上增加了系统复杂度，同时也增加了系统具体类的依赖</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*** ------------工厂模式  factory-----------------------  ***/</span><br><span class=\"line\"></span><br><span class=\"line\">class DB</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo get_class();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function die()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Mysql extends DB&#123;&#125;</span><br><span class=\"line\">class SqlSrv extends DB&#123;&#125;</span><br><span class=\"line\">class Odbc extends DB&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">interface TestFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Factory implements TestFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function toString()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function do($type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch($type)&#123;</span><br><span class=\"line\">            case &apos;Mysql&apos;:</span><br><span class=\"line\">                return new Mysql();</span><br><span class=\"line\">            case &apos;SqlSrv&apos;:</span><br><span class=\"line\">                return new SqlSrv();</span><br><span class=\"line\">            case &apos;Odbc&apos;:</span><br><span class=\"line\">                return new Odbc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = new Factory();</span><br><span class=\"line\">$test-&gt;do(&apos;Mysql&apos;);</span><br><span class=\"line\">$test-&gt;do(&apos;SqlSrv&apos;);</span><br><span class=\"line\">$test-&gt;do(&apos;Odbc&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><blockquote>\n<p>围绕一个超级工厂创建其他工厂，该超级工厂是其他工厂的工厂<br>一个工厂中聚合多个同类产品<br><strong>优点</strong>：<br>    当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点</strong>：<br>    产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。<br><strong>注意事项</strong>：<br>    产品族难扩展，产品等级易扩展。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*** ------------抽象工厂模式  abstract factory-----------------------  ***/</span><br><span class=\"line\">class Cache&#123;&#125;</span><br><span class=\"line\">class CacheDie&#123;&#125;</span><br><span class=\"line\">class FileCache extends Cache</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;filecache&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RedisCache extends Cache&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;rediscache&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class FileCacheDie extends CacheDie</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;FileCacheDie&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RedisCacheDie extends CacheDie</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;RedisCacheDie&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class CacheAbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function createCache($type)&#123;</span><br><span class=\"line\">        switch ($type) &#123;</span><br><span class=\"line\">            case &apos;file&apos;:</span><br><span class=\"line\">                return new FileCache();</span><br><span class=\"line\">            case &apos;redis&apos;:</span><br><span class=\"line\">                return new RedisCache();</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class CacheDieAbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function createCache($type)&#123;</span><br><span class=\"line\">        switch ($type) &#123;</span><br><span class=\"line\">            case &apos;file&apos;:</span><br><span class=\"line\">                return new FileCacheDie();</span><br><span class=\"line\">            case &apos;redis&apos;:</span><br><span class=\"line\">                return new RedisCacheDie();</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class TestAbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function createType($type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch ($type) &#123;</span><br><span class=\"line\">            case &apos;cache&apos;:</span><br><span class=\"line\">                return new CacheAbstractFactory();</span><br><span class=\"line\">            case &apos;cacheDie&apos;:</span><br><span class=\"line\">                return new CacheDieAbstractFactory();</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$testAbstractFactory = new TestAbstractFactory();</span><br><span class=\"line\">$cache = $testAbstractFactory-&gt;createType(&apos;cache&apos;);</span><br><span class=\"line\">$cache-&gt;createCache(&apos;file&apos;);</span><br><span class=\"line\">$cache-&gt;createCache(&apos;redis&apos;);</span><br><span class=\"line\">$cacheDie = $testAbstractFactory-&gt;createType(&apos;cacheDie&apos;);</span><br><span class=\"line\">$cacheDie-&gt;createCache(&apos;file&apos;);</span><br><span class=\"line\">$cacheDie-&gt;createCache(&apos;redis&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><blockquote>\n<p>负责创建自己的对象，同时确保只有单个对象被创建。<br>这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br><strong>注意</strong>：  </p>\n<ol>\n<li>单例类只能有一个实例。  </li>\n<li>单例类必须自己创建自己的唯一实例。  </li>\n<li>单例类必须给所有其他对象提供这一实例。  </li>\n</ol>\n<p><strong>优点</strong>：  </p>\n<ol>\n<li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例  </li>\n<li>避免对资源的多重占用（比如写文件操作）。  </li>\n</ol>\n<p><strong>缺点</strong>：<br>    没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br><strong>注意事项</strong>：<br>    getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------单例模式  singleton------------  ***/</span><br><span class=\"line\">final class TestSingle</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static $instance;</span><br><span class=\"line\">    public static function getInstance()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(!(self::$instance instanceof self ))&#123;</span><br><span class=\"line\">            self::$instance = new self();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self::$instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function toString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;string&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$test = TestSingle::getInstance();</span><br><span class=\"line\">$test-&gt;toString();</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><blockquote>\n<p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。<br><strong>优点</strong>：  </p>\n<ol>\n<li>建造者独立，易扩展。  </li>\n<li>便于控制细节风险。  </li>\n</ol>\n<p><strong>缺点</strong>：  </p>\n<ol>\n<li>产品必须有共同点，范围有限制。  </li>\n<li>如内部变化复杂，会有很多的建造类。  </li>\n</ol>\n<p><strong>注意事项</strong>：<br>    与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*** --------------建造者模式  builder---------------------  ***/</span><br><span class=\"line\"></span><br><span class=\"line\">class Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_arr;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_arr = array();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function add($part)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return array_push($this-&gt;_arr, $part);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Builder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_product;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_product = new Product();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function add1($part)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_product-&gt;add($part);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function add2($part)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_product-&gt;add($part);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function getPart()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;_product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Director</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct(Builder $builder)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $builder-&gt;add1(&apos;arr1&apos;);</span><br><span class=\"line\">        $builder-&gt;add2(&apos;add2&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test_builder = new Builder();</span><br><span class=\"line\">$test_director = new Director($test_builder);</span><br><span class=\"line\">print_r($test_builder-&gt;getPart());</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><blockquote>\n<p>实现了一个原型接口，该接口用于创建当前对象的克隆。<br>实现克隆 clone<br><strong>优点</strong>：  </p>\n<ol>\n<li>性能提高。  </li>\n<li>逃避构造函数的约束。  </li>\n</ol>\n<p><strong>缺点</strong>：  </p>\n<ol>\n<li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。  </li>\n<li>必须实现 Cloneable 接口。  </li>\n</ol>\n<p><strong>注意事项</strong>：<br>    与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*** --------------原型模式  prototype---------------------  ***/</span><br><span class=\"line\"></span><br><span class=\"line\">class ProtoType</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_name;</span><br><span class=\"line\">    public function __construct($obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_name = $obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function copy()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return clone $this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class TestProto&#123;&#125;</span><br><span class=\"line\">$testProto = new ProtoType(new TestProto());</span><br><span class=\"line\">print_r($testProto);</span><br><span class=\"line\">$testProtoCopy = $testProto-&gt;copy();</span><br><span class=\"line\">print_r($testProtoCopy);</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"工厂模式\"><a href=\"#工厂模式\" class=\"headerlink\" title=\"工厂模式\"></a>工厂模式</h3><blockquote>\n<p>定义一个创建对象的接口，让其子类决定去实例化哪一个工厂类<br>创建的过程是在子类中执行<br><strong>优点</strong>：  </p>\n<ol>\n<li>调用者想创建一个对象只需要知道名称即可  </li>\n<li>扩展性高，想增加一个产品，只需要扩展一个工厂类就可以  </li>\n<li>屏蔽产品具体实现，调用者只关心产品的接口  </li>\n</ol>\n<p><strong>缺点</strong>：  </p>\n<ol>\n<li>每增加一个产品，都需要增加一个具体类和对象实现工厂，使得系统类的个数成倍增加，一定程度上增加了系统复杂度，同时也增加了系统具体类的依赖</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*** ------------工厂模式  factory-----------------------  ***/</span><br><span class=\"line\"></span><br><span class=\"line\">class DB</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo get_class();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function die()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Mysql extends DB&#123;&#125;</span><br><span class=\"line\">class SqlSrv extends DB&#123;&#125;</span><br><span class=\"line\">class Odbc extends DB&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">interface TestFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function toString();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Factory implements TestFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function toString()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function do($type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch($type)&#123;</span><br><span class=\"line\">            case &apos;Mysql&apos;:</span><br><span class=\"line\">                return new Mysql();</span><br><span class=\"line\">            case &apos;SqlSrv&apos;:</span><br><span class=\"line\">                return new SqlSrv();</span><br><span class=\"line\">            case &apos;Odbc&apos;:</span><br><span class=\"line\">                return new Odbc();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test = new Factory();</span><br><span class=\"line\">$test-&gt;do(&apos;Mysql&apos;);</span><br><span class=\"line\">$test-&gt;do(&apos;SqlSrv&apos;);</span><br><span class=\"line\">$test-&gt;do(&apos;Odbc&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"抽象工厂模式\"><a href=\"#抽象工厂模式\" class=\"headerlink\" title=\"抽象工厂模式\"></a>抽象工厂模式</h3><blockquote>\n<p>围绕一个超级工厂创建其他工厂，该超级工厂是其他工厂的工厂<br>一个工厂中聚合多个同类产品<br><strong>优点</strong>：<br>    当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点</strong>：<br>    产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。<br><strong>注意事项</strong>：<br>    产品族难扩展，产品等级易扩展。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*** ------------抽象工厂模式  abstract factory-----------------------  ***/</span><br><span class=\"line\">class Cache&#123;&#125;</span><br><span class=\"line\">class CacheDie&#123;&#125;</span><br><span class=\"line\">class FileCache extends Cache</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;filecache&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RedisCache extends Cache&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;rediscache&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class FileCacheDie extends CacheDie</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;FileCacheDie&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RedisCacheDie extends CacheDie</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;RedisCacheDie&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class CacheAbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function createCache($type)&#123;</span><br><span class=\"line\">        switch ($type) &#123;</span><br><span class=\"line\">            case &apos;file&apos;:</span><br><span class=\"line\">                return new FileCache();</span><br><span class=\"line\">            case &apos;redis&apos;:</span><br><span class=\"line\">                return new RedisCache();</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class CacheDieAbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function createCache($type)&#123;</span><br><span class=\"line\">        switch ($type) &#123;</span><br><span class=\"line\">            case &apos;file&apos;:</span><br><span class=\"line\">                return new FileCacheDie();</span><br><span class=\"line\">            case &apos;redis&apos;:</span><br><span class=\"line\">                return new RedisCacheDie();</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class TestAbstractFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function createType($type)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        switch ($type) &#123;</span><br><span class=\"line\">            case &apos;cache&apos;:</span><br><span class=\"line\">                return new CacheAbstractFactory();</span><br><span class=\"line\">            case &apos;cacheDie&apos;:</span><br><span class=\"line\">                return new CacheDieAbstractFactory();</span><br><span class=\"line\">            default:</span><br><span class=\"line\">                break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$testAbstractFactory = new TestAbstractFactory();</span><br><span class=\"line\">$cache = $testAbstractFactory-&gt;createType(&apos;cache&apos;);</span><br><span class=\"line\">$cache-&gt;createCache(&apos;file&apos;);</span><br><span class=\"line\">$cache-&gt;createCache(&apos;redis&apos;);</span><br><span class=\"line\">$cacheDie = $testAbstractFactory-&gt;createType(&apos;cacheDie&apos;);</span><br><span class=\"line\">$cacheDie-&gt;createCache(&apos;file&apos;);</span><br><span class=\"line\">$cacheDie-&gt;createCache(&apos;redis&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure>\n<h3 id=\"单例模式\"><a href=\"#单例模式\" class=\"headerlink\" title=\"单例模式\"></a>单例模式</h3><blockquote>\n<p>负责创建自己的对象，同时确保只有单个对象被创建。<br>这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br><strong>注意</strong>：  </p>\n<ol>\n<li>单例类只能有一个实例。  </li>\n<li>单例类必须自己创建自己的唯一实例。  </li>\n<li>单例类必须给所有其他对象提供这一实例。  </li>\n</ol>\n<p><strong>优点</strong>：  </p>\n<ol>\n<li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例  </li>\n<li>避免对资源的多重占用（比如写文件操作）。  </li>\n</ol>\n<p><strong>缺点</strong>：<br>    没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br><strong>注意事项</strong>：<br>    getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------单例模式  singleton------------  ***/</span><br><span class=\"line\">final class TestSingle</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static $instance;</span><br><span class=\"line\">    public static function getInstance()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        if(!(self::$instance instanceof self ))&#123;</span><br><span class=\"line\">            self::$instance = new self();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return self::$instance;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public function toString()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        echo &quot;string&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">$test = TestSingle::getInstance();</span><br><span class=\"line\">$test-&gt;toString();</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure>\n<h3 id=\"建造者模式\"><a href=\"#建造者模式\" class=\"headerlink\" title=\"建造者模式\"></a>建造者模式</h3><blockquote>\n<p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。<br><strong>优点</strong>：  </p>\n<ol>\n<li>建造者独立，易扩展。  </li>\n<li>便于控制细节风险。  </li>\n</ol>\n<p><strong>缺点</strong>：  </p>\n<ol>\n<li>产品必须有共同点，范围有限制。  </li>\n<li>如内部变化复杂，会有很多的建造类。  </li>\n</ol>\n<p><strong>注意事项</strong>：<br>    与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*** --------------建造者模式  builder---------------------  ***/</span><br><span class=\"line\"></span><br><span class=\"line\">class Product</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_arr;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_arr = array();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function add($part)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return array_push($this-&gt;_arr, $part);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Builder</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_product;</span><br><span class=\"line\">    public function __construct()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_product = new Product();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function add1($part)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_product-&gt;add($part);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function add2($part)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_product-&gt;add($part);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function getPart()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return $this-&gt;_product;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Director</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    public function __construct(Builder $builder)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $builder-&gt;add1(&apos;arr1&apos;);</span><br><span class=\"line\">        $builder-&gt;add2(&apos;add2&apos;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$test_builder = new Builder();</span><br><span class=\"line\">$test_director = new Director($test_builder);</span><br><span class=\"line\">print_r($test_builder-&gt;getPart());</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure>\n<h3 id=\"原型模式\"><a href=\"#原型模式\" class=\"headerlink\" title=\"原型模式\"></a>原型模式</h3><blockquote>\n<p>实现了一个原型接口，该接口用于创建当前对象的克隆。<br>实现克隆 clone<br><strong>优点</strong>：  </p>\n<ol>\n<li>性能提高。  </li>\n<li>逃避构造函数的约束。  </li>\n</ol>\n<p><strong>缺点</strong>：  </p>\n<ol>\n<li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。  </li>\n<li>必须实现 Cloneable 接口。  </li>\n</ol>\n<p><strong>注意事项</strong>：<br>    与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*** --------------原型模式  prototype---------------------  ***/</span><br><span class=\"line\"></span><br><span class=\"line\">class ProtoType</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    private $_name;</span><br><span class=\"line\">    public function __construct($obj)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        $this-&gt;_name = $obj;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public function copy()</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        return clone $this;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class TestProto&#123;&#125;</span><br><span class=\"line\">$testProto = new ProtoType(new TestProto());</span><br><span class=\"line\">print_r($testProto);</span><br><span class=\"line\">$testProtoCopy = $testProto-&gt;copy();</span><br><span class=\"line\">print_r($testProtoCopy);</span><br><span class=\"line\"></span><br><span class=\"line\">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure>"},{"title":"hexo发布文章","date":"2017-03-19T10:21:01.000Z","_content":"* 在部署和搭建好hexo博客后，怎么写好一篇博客并发布到在线地址呢？\n\n1、找到你本地的博客地址，在source/_posts目录下新建新文件，后缀为md，写一篇markdown文章\n2、打开git bash命令端\n本地预览：\n```\nhexo server\n```\n提交到git仓库，同步到在线博客\n```\nhexo clean\nhexo generate\nhexo deploy\n```\n然后就可以在你的博客看到更新的文章了。","source":"_posts/hexo_new_blog.md","raw":"---\ntitle: hexo发布文章\ndate: 2017-03-19 18:21:01\ntags: Article\ncategories: 搭建博客\n---\n* 在部署和搭建好hexo博客后，怎么写好一篇博客并发布到在线地址呢？\n\n1、找到你本地的博客地址，在source/_posts目录下新建新文件，后缀为md，写一篇markdown文章\n2、打开git bash命令端\n本地预览：\n```\nhexo server\n```\n提交到git仓库，同步到在线博客\n```\nhexo clean\nhexo generate\nhexo deploy\n```\n然后就可以在你的博客看到更新的文章了。","slug":"hexo_new_blog","published":1,"updated":"2019-04-09T14:02:03.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmax0010vjcgcsge1dko","content":"<ul>\n<li>在部署和搭建好hexo博客后，怎么写好一篇博客并发布到在线地址呢？</li>\n</ul>\n<p>1、找到你本地的博客地址，在source/_posts目录下新建新文件，后缀为md，写一篇markdown文章<br>2、打开git bash命令端<br>本地预览：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></p>\n<p>提交到git仓库，同步到在线博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以在你的博客看到更新的文章了。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>在部署和搭建好hexo博客后，怎么写好一篇博客并发布到在线地址呢？</li>\n</ul>\n<p>1、找到你本地的博客地址，在source/_posts目录下新建新文件，后缀为md，写一篇markdown文章<br>2、打开git bash命令端<br>本地预览：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo server</span><br></pre></td></tr></table></figure></p>\n<p>提交到git仓库，同步到在线博客<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean</span><br><span class=\"line\">hexo generate</span><br><span class=\"line\">hexo deploy</span><br></pre></td></tr></table></figure></p>\n<p>然后就可以在你的博客看到更新的文章了。</p>\n"},{"title":"hexo在其他设备或系统上续写","date":"2017-03-20T10:21:01.000Z","_content":">注意：需要将原系统中的原项目所有内容都发布到github上  \n> 新系统需要安装node、git\n\n>1. 新系统中git clone blog@github.com到本地  \n>2. 新系统中切换分支 git checkou branch  \n>3. 安装hexo：npm install hexo\n>4. 初始化：npm install; npm install hexo-deployer-git  \n>5. 然后就可以执行hexo：hexo clean; hexo g; hexo s","source":"_posts/hexo_change_system.md","raw":"---\ntitle: hexo在其他设备或系统上续写\ndate: 2017-03-20 18:21:01\ntags: Article\ncategories: 搭建博客\n---\n>注意：需要将原系统中的原项目所有内容都发布到github上  \n> 新系统需要安装node、git\n\n>1. 新系统中git clone blog@github.com到本地  \n>2. 新系统中切换分支 git checkou branch  \n>3. 安装hexo：npm install hexo\n>4. 初始化：npm install; npm install hexo-deployer-git  \n>5. 然后就可以执行hexo：hexo clean; hexo g; hexo s","slug":"hexo_change_system","published":1,"updated":"2019-04-09T14:17:18.641Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmay0014vjcgey3q0lws","content":"<blockquote>\n<p>注意：需要将原系统中的原项目所有内容都发布到github上<br>新系统需要安装node、git</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>新系统中git clone <a href=\"mailto:blog@github.com\" target=\"_blank\" rel=\"noopener\">blog@github.com</a>到本地  </li>\n<li>新系统中切换分支 git checkou branch  </li>\n<li>安装hexo：npm install hexo</li>\n<li>初始化：npm install; npm install hexo-deployer-git  </li>\n<li>然后就可以执行hexo：hexo clean; hexo g; hexo s</li>\n</ol>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>注意：需要将原系统中的原项目所有内容都发布到github上<br>新系统需要安装node、git</p>\n</blockquote>\n<blockquote>\n<ol>\n<li>新系统中git clone <a href=\"mailto:blog@github.com\" target=\"_blank\" rel=\"noopener\">blog@github.com</a>到本地  </li>\n<li>新系统中切换分支 git checkou branch  </li>\n<li>安装hexo：npm install hexo</li>\n<li>初始化：npm install; npm install hexo-deployer-git  </li>\n<li>然后就可以执行hexo：hexo clean; hexo g; hexo s</li>\n</ol>\n</blockquote>\n"},{"title":"Hexo NexT主题内给每篇文章后添加结束标语","date":"2017-04-18T11:21:01.000Z","_content":"给文章后面添加结束标语\n\n### 新建文件\n在`\\themes\\next\\layout\\_macro`中新建`passage-end-tag.swig`文件，添加代码至该文件中：\n```\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:22px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    {% endif %}\n</div>\n```\n### 修改post.swig\n打开\\themes\\next\\layout\\_macro\\post.swig文件，在post-body后，post-footer前，添加下面内容：\n```\n<div>\n  {% if not is_index %}\n    {% include 'passage-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n### 修改_config\n打开主题配置文件（_config.yml),在末尾添加：\n```\n# 文章末尾添加“本文结束”标记\npassage_end_tag:\n  enabled: true\n```\n至此，就完成了关于添加文章结束标语的功能，具体的效果，此刻，想必你也看到了，就在下边。\n","source":"_posts/hexo_next_end.md","raw":"---\ntitle: Hexo NexT主题内给每篇文章后添加结束标语\ndate: 2017-04-18 19:21:01\ntags: [hexo,next]\ncategories: 搭建博客\n---\n给文章后面添加结束标语\n\n### 新建文件\n在`\\themes\\next\\layout\\_macro`中新建`passage-end-tag.swig`文件，添加代码至该文件中：\n```\n<div>\n    {% if not is_index %}\n        <div style=\"text-align:center;color: #ccc;font-size:22px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    {% endif %}\n</div>\n```\n### 修改post.swig\n打开\\themes\\next\\layout\\_macro\\post.swig文件，在post-body后，post-footer前，添加下面内容：\n```\n<div>\n  {% if not is_index %}\n    {% include 'passage-end-tag.swig' %}\n  {% endif %}\n</div>\n```\n### 修改_config\n打开主题配置文件（_config.yml),在末尾添加：\n```\n# 文章末尾添加“本文结束”标记\npassage_end_tag:\n  enabled: true\n```\n至此，就完成了关于添加文章结束标语的功能，具体的效果，此刻，想必你也看到了，就在下边。\n","slug":"hexo_next_end","published":1,"updated":"2019-04-09T14:02:03.293Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmaz0018vjcgbuwb7bm3","content":"<p>给文章后面添加结束标语</p>\n<h3 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h3><p>在<code>\\themes\\next\\layout\\_macro</code>中新建<code>passage-end-tag.swig</code>文件，添加代码至该文件中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:22px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改post-swig\"><a href=\"#修改post-swig\" class=\"headerlink\" title=\"修改post.swig\"></a>修改post.swig</h3><p>打开\\themes\\next\\layout_macro\\post.swig文件，在post-body后，post-footer前，添加下面内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改-config\"><a href=\"#修改-config\" class=\"headerlink\" title=\"修改_config\"></a>修改_config</h3><p>打开主题配置文件（_config.yml),在末尾添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\">passage_end_tag:</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure></p>\n<p>至此，就完成了关于添加文章结束标语的功能，具体的效果，此刻，想必你也看到了，就在下边。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>给文章后面添加结束标语</p>\n<h3 id=\"新建文件\"><a href=\"#新建文件\" class=\"headerlink\" title=\"新建文件\"></a>新建文件</h3><p>在<code>\\themes\\next\\layout\\_macro</code>中新建<code>passage-end-tag.swig</code>文件，添加代码至该文件中：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">    &#123;% if not is_index %&#125;</span><br><span class=\"line\">        &lt;div style=&quot;text-align:center;color: #ccc;font-size:22px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">    &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改post-swig\"><a href=\"#修改post-swig\" class=\"headerlink\" title=\"修改post.swig\"></a>修改post.swig</h3><p>打开\\themes\\next\\layout_macro\\post.swig文件，在post-body后，post-footer前，添加下面内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &#123;% include &apos;passage-end-tag.swig&apos; %&#125;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"修改-config\"><a href=\"#修改-config\" class=\"headerlink\" title=\"修改_config\"></a>修改_config</h3><p>打开主题配置文件（_config.yml),在末尾添加：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 文章末尾添加“本文结束”标记</span><br><span class=\"line\">passage_end_tag:</span><br><span class=\"line\">  enabled: true</span><br></pre></td></tr></table></figure></p>\n<p>至此，就完成了关于添加文章结束标语的功能，具体的效果，此刻，想必你也看到了，就在下边。</p>\n"},{"title":"jQuery获取表单值及属性内容","date":"2018-04-21T12:21:01.000Z","_content":">平时前端在处理表单数据的时候，总是需要通过表单属性或者值来进行一些用户看不到的处理。\n>比如：联动选项的处理、数据的验证过滤等。\n>本节针对不同的表单内容进行了不同的获取方式。\n\n### 获取当前表单元素的值\n```\n<input type=\"text\" name=\"name\" onblur=\"getValue(this)\">\n<script type=\"text/javascript\">\n\tfunction getValue(obj){\n\t    // 获取值\n\t\t$(obj).val();\n\t}\n</script>\n```\n\n### 获取表单元素值及属性内容\n```\n<input type=\"text\" name=\"name\">\n<select name=\"sex\" data-type=\"sex\" field=\"sex\">\n\t<option value=\"man\">男</option>\n\t<option value=\"woman\">女</option>\n</select>\n<script type=\"text/javascript\">\n\tfunction do_submit(obj){\n\t    // 获取值\n\t\tvar name = $(\"input[name='name']\").val();\n\t\tvar sex_value = $(\"select[name='sex']\").val();\n\t\t// 获取特定文本值的数据\n\t    $('select[name=\"data[select]\"] [value=\"man\"]').val();\n\t\t// 获取文本值\n\t\tvar sex_text = $(\"select[name='sex']\").find('option:selected').text();\n\t\t// 获取data-type属性值\n\t\tvar sex_type = $(\"select[name='sex']\").data('type');\n\t\tvar sex_type = $(\"select[name='sex']\").attr('data-type');\n\t\t// 获取field属性值\n\t\tvar sex_field = $(\"select[name='sex']\").attr('field');\n\t}\n</script>\n```\n\n### 获取多个多行文本框内容值\n```\n<textarea name=\"formula[]\" class=\"text\"></textarea>\n<textarea name=\"formula[]\" class=\"text\"></textarea>\n<textarea name=\"formula[]\" class=\"text\"></textarea>\n<script type=\"text/javascript\">\n    var formula = new Array();\n\t$(\".text,textarea\").each(function(e){\n\t    formula.push($(this).val());\n\t})\n</script>\n```","source":"_posts/js_1.md","raw":"---\ntitle: jQuery获取表单值及属性内容\ndate: 2018-04-21 20:21:01\ntags: Web前端\ncategories: jQuery\n---\n>平时前端在处理表单数据的时候，总是需要通过表单属性或者值来进行一些用户看不到的处理。\n>比如：联动选项的处理、数据的验证过滤等。\n>本节针对不同的表单内容进行了不同的获取方式。\n\n### 获取当前表单元素的值\n```\n<input type=\"text\" name=\"name\" onblur=\"getValue(this)\">\n<script type=\"text/javascript\">\n\tfunction getValue(obj){\n\t    // 获取值\n\t\t$(obj).val();\n\t}\n</script>\n```\n\n### 获取表单元素值及属性内容\n```\n<input type=\"text\" name=\"name\">\n<select name=\"sex\" data-type=\"sex\" field=\"sex\">\n\t<option value=\"man\">男</option>\n\t<option value=\"woman\">女</option>\n</select>\n<script type=\"text/javascript\">\n\tfunction do_submit(obj){\n\t    // 获取值\n\t\tvar name = $(\"input[name='name']\").val();\n\t\tvar sex_value = $(\"select[name='sex']\").val();\n\t\t// 获取特定文本值的数据\n\t    $('select[name=\"data[select]\"] [value=\"man\"]').val();\n\t\t// 获取文本值\n\t\tvar sex_text = $(\"select[name='sex']\").find('option:selected').text();\n\t\t// 获取data-type属性值\n\t\tvar sex_type = $(\"select[name='sex']\").data('type');\n\t\tvar sex_type = $(\"select[name='sex']\").attr('data-type');\n\t\t// 获取field属性值\n\t\tvar sex_field = $(\"select[name='sex']\").attr('field');\n\t}\n</script>\n```\n\n### 获取多个多行文本框内容值\n```\n<textarea name=\"formula[]\" class=\"text\"></textarea>\n<textarea name=\"formula[]\" class=\"text\"></textarea>\n<textarea name=\"formula[]\" class=\"text\"></textarea>\n<script type=\"text/javascript\">\n    var formula = new Array();\n\t$(\".text,textarea\").each(function(e){\n\t    formula.push($(this).val());\n\t})\n</script>\n```","slug":"js_1","published":1,"updated":"2019-04-09T14:02:03.294Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmb0001bvjcgkeqehlfy","content":"<blockquote>\n<p>平时前端在处理表单数据的时候，总是需要通过表单属性或者值来进行一些用户看不到的处理。<br>比如：联动选项的处理、数据的验证过滤等。<br>本节针对不同的表单内容进行了不同的获取方式。</p>\n</blockquote>\n<h3 id=\"获取当前表单元素的值\"><a href=\"#获取当前表单元素的值\" class=\"headerlink\" title=\"获取当前表单元素的值\"></a>获取当前表单元素的值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;name&quot; onblur=&quot;getValue(this)&quot;&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tfunction getValue(obj)&#123;</span><br><span class=\"line\">\t    // 获取值</span><br><span class=\"line\">\t\t$(obj).val();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取表单元素值及属性内容\"><a href=\"#获取表单元素值及属性内容\" class=\"headerlink\" title=\"获取表单元素值及属性内容\"></a>获取表单元素值及属性内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class=\"line\">&lt;select name=&quot;sex&quot; data-type=&quot;sex&quot; field=&quot;sex&quot;&gt;</span><br><span class=\"line\">\t&lt;option value=&quot;man&quot;&gt;男&lt;/option&gt;</span><br><span class=\"line\">\t&lt;option value=&quot;woman&quot;&gt;女&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tfunction do_submit(obj)&#123;</span><br><span class=\"line\">\t    // 获取值</span><br><span class=\"line\">\t\tvar name = $(&quot;input[name=&apos;name&apos;]&quot;).val();</span><br><span class=\"line\">\t\tvar sex_value = $(&quot;select[name=&apos;sex&apos;]&quot;).val();</span><br><span class=\"line\">\t\t// 获取特定文本值的数据</span><br><span class=\"line\">\t    $(&apos;select[name=&quot;data[select]&quot;] [value=&quot;man&quot;]&apos;).val();</span><br><span class=\"line\">\t\t// 获取文本值</span><br><span class=\"line\">\t\tvar sex_text = $(&quot;select[name=&apos;sex&apos;]&quot;).find(&apos;option:selected&apos;).text();</span><br><span class=\"line\">\t\t// 获取data-type属性值</span><br><span class=\"line\">\t\tvar sex_type = $(&quot;select[name=&apos;sex&apos;]&quot;).data(&apos;type&apos;);</span><br><span class=\"line\">\t\tvar sex_type = $(&quot;select[name=&apos;sex&apos;]&quot;).attr(&apos;data-type&apos;);</span><br><span class=\"line\">\t\t// 获取field属性值</span><br><span class=\"line\">\t\tvar sex_field = $(&quot;select[name=&apos;sex&apos;]&quot;).attr(&apos;field&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取多个多行文本框内容值\"><a href=\"#获取多个多行文本框内容值\" class=\"headerlink\" title=\"获取多个多行文本框内容值\"></a>获取多个多行文本框内容值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;textarea name=&quot;formula[]&quot; class=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">&lt;textarea name=&quot;formula[]&quot; class=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">&lt;textarea name=&quot;formula[]&quot; class=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var formula = new Array();</span><br><span class=\"line\">\t$(&quot;.text,textarea&quot;).each(function(e)&#123;</span><br><span class=\"line\">\t    formula.push($(this).val());</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>平时前端在处理表单数据的时候，总是需要通过表单属性或者值来进行一些用户看不到的处理。<br>比如：联动选项的处理、数据的验证过滤等。<br>本节针对不同的表单内容进行了不同的获取方式。</p>\n</blockquote>\n<h3 id=\"获取当前表单元素的值\"><a href=\"#获取当前表单元素的值\" class=\"headerlink\" title=\"获取当前表单元素的值\"></a>获取当前表单元素的值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;name&quot; onblur=&quot;getValue(this)&quot;&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tfunction getValue(obj)&#123;</span><br><span class=\"line\">\t    // 获取值</span><br><span class=\"line\">\t\t$(obj).val();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取表单元素值及属性内容\"><a href=\"#获取表单元素值及属性内容\" class=\"headerlink\" title=\"获取表单元素值及属性内容\"></a>获取表单元素值及属性内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class=\"line\">&lt;select name=&quot;sex&quot; data-type=&quot;sex&quot; field=&quot;sex&quot;&gt;</span><br><span class=\"line\">\t&lt;option value=&quot;man&quot;&gt;男&lt;/option&gt;</span><br><span class=\"line\">\t&lt;option value=&quot;woman&quot;&gt;女&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">\tfunction do_submit(obj)&#123;</span><br><span class=\"line\">\t    // 获取值</span><br><span class=\"line\">\t\tvar name = $(&quot;input[name=&apos;name&apos;]&quot;).val();</span><br><span class=\"line\">\t\tvar sex_value = $(&quot;select[name=&apos;sex&apos;]&quot;).val();</span><br><span class=\"line\">\t\t// 获取特定文本值的数据</span><br><span class=\"line\">\t    $(&apos;select[name=&quot;data[select]&quot;] [value=&quot;man&quot;]&apos;).val();</span><br><span class=\"line\">\t\t// 获取文本值</span><br><span class=\"line\">\t\tvar sex_text = $(&quot;select[name=&apos;sex&apos;]&quot;).find(&apos;option:selected&apos;).text();</span><br><span class=\"line\">\t\t// 获取data-type属性值</span><br><span class=\"line\">\t\tvar sex_type = $(&quot;select[name=&apos;sex&apos;]&quot;).data(&apos;type&apos;);</span><br><span class=\"line\">\t\tvar sex_type = $(&quot;select[name=&apos;sex&apos;]&quot;).attr(&apos;data-type&apos;);</span><br><span class=\"line\">\t\t// 获取field属性值</span><br><span class=\"line\">\t\tvar sex_field = $(&quot;select[name=&apos;sex&apos;]&quot;).attr(&apos;field&apos;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"获取多个多行文本框内容值\"><a href=\"#获取多个多行文本框内容值\" class=\"headerlink\" title=\"获取多个多行文本框内容值\"></a>获取多个多行文本框内容值</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;textarea name=&quot;formula[]&quot; class=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">&lt;textarea name=&quot;formula[]&quot; class=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">&lt;textarea name=&quot;formula[]&quot; class=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">    var formula = new Array();</span><br><span class=\"line\">\t$(&quot;.text,textarea&quot;).each(function(e)&#123;</span><br><span class=\"line\">\t    formula.push($(this).val());</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>"},{"title":"jQuery对于父子、同级元素的处理方式","date":"2018-05-01T12:21:01.000Z","_content":">上一节介绍了一些关于表单处理的元素内容\n>本节介绍jquery对于父、同级、子元素的处理方式。\n\n### 父窗口与子窗口处理\n```\n父窗口：\n<input name='img' type='text' />\n<img id='img' src='' />\nlayer.open({\n    type: 2,\n    title: 'title',\n    area: ['500px', '350px'],\n    content 'son.html'\n})\n\n子窗口：\nvar img_url;\nparent.$(\"input[name='img']\").val(img_url);\nparent.$('#img').attr('src', img_url);\nparent.layer.closeAll();\n```\n\n## jQuery获取父元素节点、子元素节点及兄弟元素节点的方法\n```\n<ul class=\"par\">\n\t<li id=\"firstli\">\n\t\t<h3 class=\"title\">one</h3>\n\t\t<ul class=\"par\">\n\t\t\t<li id=\"one\">one_first</li>\n\t\t\t<li>two_first</li>\n\t\t</ul>\n\t</li>\n</ul>\n```\n### jquery父节点的获取\n#### 使用parent()获取父节点\n```\n$(\"#one\").parent().parent();  // 获取 id为firstli的li标签节点\n$(\"#one\").parent().parent('.par'); // 获取最上面 class为par的ul节点\n$(\"#one\").parent('.par'); // 获取 id为one的上一级class为par的ul节点\n```\n\n#### 使用parents()和closest()获取父节点\n>1. closest从当前元素开始匹配寻找，逐级向上寻找直到找到匹配的元素后就停止了，返回0或者1个元素\n>2. parents从父元素开始匹配寻找，一直向上查找直到找到根元素，将所有元素放到另外一个集合中，返回0、1或者更多元素\n```\n$(\"#one\").parnets('.par');  // 找出所有class为par的父节点/父父节点\n$(\"one\").closest('.par');  // 获取最近一层的父级class为par的ul节点\n```\n\n### jquery兄弟节点的获取\n#### parent父节点再find子节点\n```\n$('.title').parent().find('ul');  // 找到class为title的兄弟节点ul，即class为par的ul\n```\n#### sibingls()获取兄弟节点\n```\n$('.title').sibings('ul');  // 找到class为title的兄弟节点ul，即class为par的ul\n```\n\n### jquery子节点的获取\n####  :first方式\n```\n$('.par:first-child');  // 获取id为firstli的li节点\n```\n#### 选择器获取\n```\n$('#firstli h3.title');  // 获取class为title的h3节点\n```\n#### find()函数\n```\n$('#firstli').find('h3');  // 获取class为title的h3节点\n```\n#### children()函数\n```\n$('#firstli').children('h3.title');   // 获取class为title的h3节点\n```","source":"_posts/js_2.md","raw":"---\ntitle: jQuery对于父子、同级元素的处理方式\ndate: 2018-05-01 20:21:01\ntags: Web前端\ncategories: jQuery\n---\n>上一节介绍了一些关于表单处理的元素内容\n>本节介绍jquery对于父、同级、子元素的处理方式。\n\n### 父窗口与子窗口处理\n```\n父窗口：\n<input name='img' type='text' />\n<img id='img' src='' />\nlayer.open({\n    type: 2,\n    title: 'title',\n    area: ['500px', '350px'],\n    content 'son.html'\n})\n\n子窗口：\nvar img_url;\nparent.$(\"input[name='img']\").val(img_url);\nparent.$('#img').attr('src', img_url);\nparent.layer.closeAll();\n```\n\n## jQuery获取父元素节点、子元素节点及兄弟元素节点的方法\n```\n<ul class=\"par\">\n\t<li id=\"firstli\">\n\t\t<h3 class=\"title\">one</h3>\n\t\t<ul class=\"par\">\n\t\t\t<li id=\"one\">one_first</li>\n\t\t\t<li>two_first</li>\n\t\t</ul>\n\t</li>\n</ul>\n```\n### jquery父节点的获取\n#### 使用parent()获取父节点\n```\n$(\"#one\").parent().parent();  // 获取 id为firstli的li标签节点\n$(\"#one\").parent().parent('.par'); // 获取最上面 class为par的ul节点\n$(\"#one\").parent('.par'); // 获取 id为one的上一级class为par的ul节点\n```\n\n#### 使用parents()和closest()获取父节点\n>1. closest从当前元素开始匹配寻找，逐级向上寻找直到找到匹配的元素后就停止了，返回0或者1个元素\n>2. parents从父元素开始匹配寻找，一直向上查找直到找到根元素，将所有元素放到另外一个集合中，返回0、1或者更多元素\n```\n$(\"#one\").parnets('.par');  // 找出所有class为par的父节点/父父节点\n$(\"one\").closest('.par');  // 获取最近一层的父级class为par的ul节点\n```\n\n### jquery兄弟节点的获取\n#### parent父节点再find子节点\n```\n$('.title').parent().find('ul');  // 找到class为title的兄弟节点ul，即class为par的ul\n```\n#### sibingls()获取兄弟节点\n```\n$('.title').sibings('ul');  // 找到class为title的兄弟节点ul，即class为par的ul\n```\n\n### jquery子节点的获取\n####  :first方式\n```\n$('.par:first-child');  // 获取id为firstli的li节点\n```\n#### 选择器获取\n```\n$('#firstli h3.title');  // 获取class为title的h3节点\n```\n#### find()函数\n```\n$('#firstli').find('h3');  // 获取class为title的h3节点\n```\n#### children()函数\n```\n$('#firstli').children('h3.title');   // 获取class为title的h3节点\n```","slug":"js_2","published":1,"updated":"2019-04-09T14:33:07.058Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmb2001fvjcglfo4u3ao","content":"<blockquote>\n<p>上一节介绍了一些关于表单处理的元素内容<br>本节介绍jquery对于父、同级、子元素的处理方式。</p>\n</blockquote>\n<h3 id=\"父窗口与子窗口处理\"><a href=\"#父窗口与子窗口处理\" class=\"headerlink\" title=\"父窗口与子窗口处理\"></a>父窗口与子窗口处理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父窗口：</span><br><span class=\"line\">&lt;input name=&apos;img&apos; type=&apos;text&apos; /&gt;</span><br><span class=\"line\">&lt;img id=&apos;img&apos; src=&apos;&apos; /&gt;</span><br><span class=\"line\">layer.open(&#123;</span><br><span class=\"line\">    type: 2,</span><br><span class=\"line\">    title: &apos;title&apos;,</span><br><span class=\"line\">    area: [&apos;500px&apos;, &apos;350px&apos;],</span><br><span class=\"line\">    content &apos;son.html&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">子窗口：</span><br><span class=\"line\">var img_url;</span><br><span class=\"line\">parent.$(&quot;input[name=&apos;img&apos;]&quot;).val(img_url);</span><br><span class=\"line\">parent.$(&apos;#img&apos;).attr(&apos;src&apos;, img_url);</span><br><span class=\"line\">parent.layer.closeAll();</span><br></pre></td></tr></table></figure>\n<h2 id=\"jQuery获取父元素节点、子元素节点及兄弟元素节点的方法\"><a href=\"#jQuery获取父元素节点、子元素节点及兄弟元素节点的方法\" class=\"headerlink\" title=\"jQuery获取父元素节点、子元素节点及兄弟元素节点的方法\"></a>jQuery获取父元素节点、子元素节点及兄弟元素节点的方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;par&quot;&gt;</span><br><span class=\"line\">\t&lt;li id=&quot;firstli&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h3 class=&quot;title&quot;&gt;one&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;ul class=&quot;par&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;li id=&quot;one&quot;&gt;one_first&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;two_first&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ul&gt;</span><br><span class=\"line\">\t&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"jquery父节点的获取\"><a href=\"#jquery父节点的获取\" class=\"headerlink\" title=\"jquery父节点的获取\"></a>jquery父节点的获取</h3><h4 id=\"使用parent-获取父节点\"><a href=\"#使用parent-获取父节点\" class=\"headerlink\" title=\"使用parent()获取父节点\"></a>使用parent()获取父节点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#one&quot;).parent().parent();  // 获取 id为firstli的li标签节点</span><br><span class=\"line\">$(&quot;#one&quot;).parent().parent(&apos;.par&apos;); // 获取最上面 class为par的ul节点</span><br><span class=\"line\">$(&quot;#one&quot;).parent(&apos;.par&apos;); // 获取 id为one的上一级class为par的ul节点</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用parents-和closest-获取父节点\"><a href=\"#使用parents-和closest-获取父节点\" class=\"headerlink\" title=\"使用parents()和closest()获取父节点\"></a>使用parents()和closest()获取父节点</h4><blockquote>\n<ol>\n<li>closest从当前元素开始匹配寻找，逐级向上寻找直到找到匹配的元素后就停止了，返回0或者1个元素</li>\n<li>parents从父元素开始匹配寻找，一直向上查找直到找到根元素，将所有元素放到另外一个集合中，返回0、1或者更多元素<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#one&quot;).parnets(&apos;.par&apos;);  // 找出所有class为par的父节点/父父节点</span><br><span class=\"line\">$(&quot;one&quot;).closest(&apos;.par&apos;);  // 获取最近一层的父级class为par的ul节点</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"jquery兄弟节点的获取\"><a href=\"#jquery兄弟节点的获取\" class=\"headerlink\" title=\"jquery兄弟节点的获取\"></a>jquery兄弟节点的获取</h3><h4 id=\"parent父节点再find子节点\"><a href=\"#parent父节点再find子节点\" class=\"headerlink\" title=\"parent父节点再find子节点\"></a>parent父节点再find子节点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.title&apos;).parent().find(&apos;ul&apos;);  // 找到class为title的兄弟节点ul，即class为par的ul</span><br></pre></td></tr></table></figure>\n<h4 id=\"sibingls-获取兄弟节点\"><a href=\"#sibingls-获取兄弟节点\" class=\"headerlink\" title=\"sibingls()获取兄弟节点\"></a>sibingls()获取兄弟节点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.title&apos;).sibings(&apos;ul&apos;);  // 找到class为title的兄弟节点ul，即class为par的ul</span><br></pre></td></tr></table></figure>\n<h3 id=\"jquery子节点的获取\"><a href=\"#jquery子节点的获取\" class=\"headerlink\" title=\"jquery子节点的获取\"></a>jquery子节点的获取</h3><h4 id=\"first方式\"><a href=\"#first方式\" class=\"headerlink\" title=\":first方式\"></a>:first方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.par:first-child&apos;);  // 获取id为firstli的li节点</span><br></pre></td></tr></table></figure>\n<h4 id=\"选择器获取\"><a href=\"#选择器获取\" class=\"headerlink\" title=\"选择器获取\"></a>选择器获取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#firstli h3.title&apos;);  // 获取class为title的h3节点</span><br></pre></td></tr></table></figure>\n<h4 id=\"find-函数\"><a href=\"#find-函数\" class=\"headerlink\" title=\"find()函数\"></a>find()函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#firstli&apos;).find(&apos;h3&apos;);  // 获取class为title的h3节点</span><br></pre></td></tr></table></figure>\n<h4 id=\"children-函数\"><a href=\"#children-函数\" class=\"headerlink\" title=\"children()函数\"></a>children()函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#firstli&apos;).children(&apos;h3.title&apos;);   // 获取class为title的h3节点</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>上一节介绍了一些关于表单处理的元素内容<br>本节介绍jquery对于父、同级、子元素的处理方式。</p>\n</blockquote>\n<h3 id=\"父窗口与子窗口处理\"><a href=\"#父窗口与子窗口处理\" class=\"headerlink\" title=\"父窗口与子窗口处理\"></a>父窗口与子窗口处理</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父窗口：</span><br><span class=\"line\">&lt;input name=&apos;img&apos; type=&apos;text&apos; /&gt;</span><br><span class=\"line\">&lt;img id=&apos;img&apos; src=&apos;&apos; /&gt;</span><br><span class=\"line\">layer.open(&#123;</span><br><span class=\"line\">    type: 2,</span><br><span class=\"line\">    title: &apos;title&apos;,</span><br><span class=\"line\">    area: [&apos;500px&apos;, &apos;350px&apos;],</span><br><span class=\"line\">    content &apos;son.html&apos;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">子窗口：</span><br><span class=\"line\">var img_url;</span><br><span class=\"line\">parent.$(&quot;input[name=&apos;img&apos;]&quot;).val(img_url);</span><br><span class=\"line\">parent.$(&apos;#img&apos;).attr(&apos;src&apos;, img_url);</span><br><span class=\"line\">parent.layer.closeAll();</span><br></pre></td></tr></table></figure>\n<h2 id=\"jQuery获取父元素节点、子元素节点及兄弟元素节点的方法\"><a href=\"#jQuery获取父元素节点、子元素节点及兄弟元素节点的方法\" class=\"headerlink\" title=\"jQuery获取父元素节点、子元素节点及兄弟元素节点的方法\"></a>jQuery获取父元素节点、子元素节点及兄弟元素节点的方法</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul class=&quot;par&quot;&gt;</span><br><span class=\"line\">\t&lt;li id=&quot;firstli&quot;&gt;</span><br><span class=\"line\">\t\t&lt;h3 class=&quot;title&quot;&gt;one&lt;/h3&gt;</span><br><span class=\"line\">\t\t&lt;ul class=&quot;par&quot;&gt;</span><br><span class=\"line\">\t\t\t&lt;li id=&quot;one&quot;&gt;one_first&lt;/li&gt;</span><br><span class=\"line\">\t\t\t&lt;li&gt;two_first&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;/ul&gt;</span><br><span class=\"line\">\t&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"jquery父节点的获取\"><a href=\"#jquery父节点的获取\" class=\"headerlink\" title=\"jquery父节点的获取\"></a>jquery父节点的获取</h3><h4 id=\"使用parent-获取父节点\"><a href=\"#使用parent-获取父节点\" class=\"headerlink\" title=\"使用parent()获取父节点\"></a>使用parent()获取父节点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#one&quot;).parent().parent();  // 获取 id为firstli的li标签节点</span><br><span class=\"line\">$(&quot;#one&quot;).parent().parent(&apos;.par&apos;); // 获取最上面 class为par的ul节点</span><br><span class=\"line\">$(&quot;#one&quot;).parent(&apos;.par&apos;); // 获取 id为one的上一级class为par的ul节点</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用parents-和closest-获取父节点\"><a href=\"#使用parents-和closest-获取父节点\" class=\"headerlink\" title=\"使用parents()和closest()获取父节点\"></a>使用parents()和closest()获取父节点</h4><blockquote>\n<ol>\n<li>closest从当前元素开始匹配寻找，逐级向上寻找直到找到匹配的元素后就停止了，返回0或者1个元素</li>\n<li>parents从父元素开始匹配寻找，一直向上查找直到找到根元素，将所有元素放到另外一个集合中，返回0、1或者更多元素<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&quot;#one&quot;).parnets(&apos;.par&apos;);  // 找出所有class为par的父节点/父父节点</span><br><span class=\"line\">$(&quot;one&quot;).closest(&apos;.par&apos;);  // 获取最近一层的父级class为par的ul节点</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</blockquote>\n<h3 id=\"jquery兄弟节点的获取\"><a href=\"#jquery兄弟节点的获取\" class=\"headerlink\" title=\"jquery兄弟节点的获取\"></a>jquery兄弟节点的获取</h3><h4 id=\"parent父节点再find子节点\"><a href=\"#parent父节点再find子节点\" class=\"headerlink\" title=\"parent父节点再find子节点\"></a>parent父节点再find子节点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.title&apos;).parent().find(&apos;ul&apos;);  // 找到class为title的兄弟节点ul，即class为par的ul</span><br></pre></td></tr></table></figure>\n<h4 id=\"sibingls-获取兄弟节点\"><a href=\"#sibingls-获取兄弟节点\" class=\"headerlink\" title=\"sibingls()获取兄弟节点\"></a>sibingls()获取兄弟节点</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.title&apos;).sibings(&apos;ul&apos;);  // 找到class为title的兄弟节点ul，即class为par的ul</span><br></pre></td></tr></table></figure>\n<h3 id=\"jquery子节点的获取\"><a href=\"#jquery子节点的获取\" class=\"headerlink\" title=\"jquery子节点的获取\"></a>jquery子节点的获取</h3><h4 id=\"first方式\"><a href=\"#first方式\" class=\"headerlink\" title=\":first方式\"></a>:first方式</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;.par:first-child&apos;);  // 获取id为firstli的li节点</span><br></pre></td></tr></table></figure>\n<h4 id=\"选择器获取\"><a href=\"#选择器获取\" class=\"headerlink\" title=\"选择器获取\"></a>选择器获取</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#firstli h3.title&apos;);  // 获取class为title的h3节点</span><br></pre></td></tr></table></figure>\n<h4 id=\"find-函数\"><a href=\"#find-函数\" class=\"headerlink\" title=\"find()函数\"></a>find()函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#firstli&apos;).find(&apos;h3&apos;);  // 获取class为title的h3节点</span><br></pre></td></tr></table></figure>\n<h4 id=\"children-函数\"><a href=\"#children-函数\" class=\"headerlink\" title=\"children()函数\"></a>children()函数</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#firstli&apos;).children(&apos;h3.title&apos;);   // 获取class为title的h3节点</span><br></pre></td></tr></table></figure>"},{"title":"js与jquery关于验证页面元素存在的方法及不同之处","date":"2018-05-05T12:21:01.000Z","_content":">在javascript中我们可以通过以下代码判断页面中是否存在某个元素\n\n```\nobj = document.getElementById(\"someID\");\nif (obj) {\n     obj.innerText(\"Extsts\");\n}\n```\n\n>那么在jQuery，我们如何判断页面元素存在与否呢？如果参照上面的传统Javascript的写法，我们第一个想到的办法会是：\n\n```\nif ($(\"#someID\")){\n      $(\"#someID\").text(\"hi\");\n}\n```\n\n可是这么写是不对的！因为<strong>jQuery对象永远都有返回值</strong>，所以$(\"someID\") 总是TRUE ，IF语句没有起到任何判断作用。\n我们知道，jQuery选择器获取页面的element时，无论element是否存在，都会返回一个对象。例如：\n```\nvar my_element = $(\"#element_Id\" );\n```\n此时的变量my_element就是一个对象，既然是一个对象，这个对象就具有length的属性，因此，用以下代码可以判断元素（对象）是否存在\n\n正确的写法应该是：\n```\nif ( $(\"#someID\").length > 0 ) {\n     $(\"#someID\").text(\"Extsts\");\n}\n```\n\n\n>注意 ：判断某个页面元素存在与否在jQuery实际上是没有必要的，jQuery本身会忽略 对一个不存在的元素进行操作，并且不会报错, 所以这么写代码会存在bug。\n假如不存在someID这个元素，我们照样可以执行一下代码，并不会报错。\n\n```\nvar value=$('#someID').length;\nif(value>0){\n     alert('Extsts');\n}else{\n      alert('not Extsts');\n}\n```\n\n>JS判断变量是否为空或是否null\n```\n/** \n* 判断是否null \n* @param data \n*/ \nfunction isNull(data){ \n\treturn (data == \"\" || data == undefined || data == null) ? \"暂无\" : data; \n}\n```","source":"_posts/js_3.md","raw":"---\ntitle: js与jquery关于验证页面元素存在的方法及不同之处\ndate: 2018-05-05 20:21:01\ntags: Web前端\ncategories: jQuery\n---\n>在javascript中我们可以通过以下代码判断页面中是否存在某个元素\n\n```\nobj = document.getElementById(\"someID\");\nif (obj) {\n     obj.innerText(\"Extsts\");\n}\n```\n\n>那么在jQuery，我们如何判断页面元素存在与否呢？如果参照上面的传统Javascript的写法，我们第一个想到的办法会是：\n\n```\nif ($(\"#someID\")){\n      $(\"#someID\").text(\"hi\");\n}\n```\n\n可是这么写是不对的！因为<strong>jQuery对象永远都有返回值</strong>，所以$(\"someID\") 总是TRUE ，IF语句没有起到任何判断作用。\n我们知道，jQuery选择器获取页面的element时，无论element是否存在，都会返回一个对象。例如：\n```\nvar my_element = $(\"#element_Id\" );\n```\n此时的变量my_element就是一个对象，既然是一个对象，这个对象就具有length的属性，因此，用以下代码可以判断元素（对象）是否存在\n\n正确的写法应该是：\n```\nif ( $(\"#someID\").length > 0 ) {\n     $(\"#someID\").text(\"Extsts\");\n}\n```\n\n\n>注意 ：判断某个页面元素存在与否在jQuery实际上是没有必要的，jQuery本身会忽略 对一个不存在的元素进行操作，并且不会报错, 所以这么写代码会存在bug。\n假如不存在someID这个元素，我们照样可以执行一下代码，并不会报错。\n\n```\nvar value=$('#someID').length;\nif(value>0){\n     alert('Extsts');\n}else{\n      alert('not Extsts');\n}\n```\n\n>JS判断变量是否为空或是否null\n```\n/** \n* 判断是否null \n* @param data \n*/ \nfunction isNull(data){ \n\treturn (data == \"\" || data == undefined || data == null) ? \"暂无\" : data; \n}\n```","slug":"js_3","published":1,"updated":"2019-04-09T14:32:56.349Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmb3001jvjcg7xezpeug","content":"<blockquote>\n<p>在javascript中我们可以通过以下代码判断页面中是否存在某个元素</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj = document.getElementById(&quot;someID&quot;);</span><br><span class=\"line\">if (obj) &#123;</span><br><span class=\"line\">     obj.innerText(&quot;Extsts&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>那么在jQuery，我们如何判断页面元素存在与否呢？如果参照上面的传统Javascript的写法，我们第一个想到的办法会是：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($(&quot;#someID&quot;))&#123;</span><br><span class=\"line\">      $(&quot;#someID&quot;).text(&quot;hi&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可是这么写是不对的！因为<strong>jQuery对象永远都有返回值</strong>，所以$(“someID”) 总是TRUE ，IF语句没有起到任何判断作用。<br>我们知道，jQuery选择器获取页面的element时，无论element是否存在，都会返回一个对象。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var my_element = $(&quot;#element_Id&quot; );</span><br></pre></td></tr></table></figure></p>\n<p>此时的变量my_element就是一个对象，既然是一个对象，这个对象就具有length的属性，因此，用以下代码可以判断元素（对象）是否存在</p>\n<p>正确的写法应该是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ( $(&quot;#someID&quot;).length &gt; 0 ) &#123;</span><br><span class=\"line\">     $(&quot;#someID&quot;).text(&quot;Extsts&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意 ：判断某个页面元素存在与否在jQuery实际上是没有必要的，jQuery本身会忽略 对一个不存在的元素进行操作，并且不会报错, 所以这么写代码会存在bug。<br>假如不存在someID这个元素，我们照样可以执行一下代码，并不会报错。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var value=$(&apos;#someID&apos;).length;</span><br><span class=\"line\">if(value&gt;0)&#123;</span><br><span class=\"line\">     alert(&apos;Extsts&apos;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">      alert(&apos;not Extsts&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>JS判断变量是否为空或是否null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\">* 判断是否null </span><br><span class=\"line\">* @param data </span><br><span class=\"line\">*/ </span><br><span class=\"line\">function isNull(data)&#123; </span><br><span class=\"line\">\treturn (data == &quot;&quot; || data == undefined || data == null) ? &quot;暂无&quot; : data; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在javascript中我们可以通过以下代码判断页面中是否存在某个元素</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj = document.getElementById(&quot;someID&quot;);</span><br><span class=\"line\">if (obj) &#123;</span><br><span class=\"line\">     obj.innerText(&quot;Extsts&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>那么在jQuery，我们如何判断页面元素存在与否呢？如果参照上面的传统Javascript的写法，我们第一个想到的办法会是：</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ($(&quot;#someID&quot;))&#123;</span><br><span class=\"line\">      $(&quot;#someID&quot;).text(&quot;hi&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可是这么写是不对的！因为<strong>jQuery对象永远都有返回值</strong>，所以$(“someID”) 总是TRUE ，IF语句没有起到任何判断作用。<br>我们知道，jQuery选择器获取页面的element时，无论element是否存在，都会返回一个对象。例如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var my_element = $(&quot;#element_Id&quot; );</span><br></pre></td></tr></table></figure></p>\n<p>此时的变量my_element就是一个对象，既然是一个对象，这个对象就具有length的属性，因此，用以下代码可以判断元素（对象）是否存在</p>\n<p>正确的写法应该是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if ( $(&quot;#someID&quot;).length &gt; 0 ) &#123;</span><br><span class=\"line\">     $(&quot;#someID&quot;).text(&quot;Extsts&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>注意 ：判断某个页面元素存在与否在jQuery实际上是没有必要的，jQuery本身会忽略 对一个不存在的元素进行操作，并且不会报错, 所以这么写代码会存在bug。<br>假如不存在someID这个元素，我们照样可以执行一下代码，并不会报错。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var value=$(&apos;#someID&apos;).length;</span><br><span class=\"line\">if(value&gt;0)&#123;</span><br><span class=\"line\">     alert(&apos;Extsts&apos;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">      alert(&apos;not Extsts&apos;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>JS判断变量是否为空或是否null<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/** </span><br><span class=\"line\">* 判断是否null </span><br><span class=\"line\">* @param data </span><br><span class=\"line\">*/ </span><br><span class=\"line\">function isNull(data)&#123; </span><br><span class=\"line\">\treturn (data == &quot;&quot; || data == undefined || data == null) ? &quot;暂无&quot; : data; </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n"},{"title":"jQuery的三种bind/One/Live/On事件绑定使用方法","date":"2018-05-20T12:21:01.000Z","_content":"### on(events,[selector],[data],fn)\n> events:一个或多个用空格分隔的事件类型和可选的命名空间，如\"click\"或\"keydown.myPlugin\" 。\n> selector:一个选择器字符串用于过滤器的触发事件的选择器元素的后代。如果选择器为null或省略，当它到达选定的元素，事件总是触发。\n> data:当一个事件被触发时要传递event.data给事件处理函数。\n> fn:该事件被触发时执行的函数。 false 值也可以做一个函数的简写，返回false\n\n#### 替换bind()\n> 当第二个参数'selector'为null时，on()和bind()其实在用法上基本上没有任何区别了，所以我们可以认为on()只是比bind()多了一个可选的'selector'参数，所以on()可以非常方便的换掉bind()\n\n#### 替换live()\n> 在1.4之前相信大家非常喜欢使用live(),因为它可以把事件绑定到当前以及以后添加的元素上面，当然在1.4之后delegate()也可以做类似的事情了。live()的原理很简单，它是通过document进行事件委派的，因此我们也可以使用on()通过将事件绑定到document来达到live()一样的效果。\n\n#### live()写法\n```\n$('#list li').live('click', '#list li', \n\tfunction() {\n\t//function code here.\n});\n```\n\n#### on()写法\n```\n$(document).on('click', '#list li', \nfunction() {\n //function code \nhere.\n});\n```\n> 这里的关键就是第二个参数'selector'在起作用了。它是一个过滤器的作用，只有被选中元素的后代元素才会触发事件。\n\n#### 替换delegate()\n> delegate()是1.4引入的，目的是通过祖先元素来代理委派后代元素的事件绑定问题，某种程度上和live()优点相似。只不过live()是通过document元素委派，而delegate则可以是任意的祖先节点。使用on()实现代理的写法和delegate()基本一致。\n\n#### delegate()的写法\n```\n$('#list').delegate('li', 'click', \nfunction() {\n //function code here.\n});\n```\n#### on()写法\n```\n$('#list').on('click', 'li', function() \n{\n //function code here.\n});\n```\n> 貌似第一个和第二个参数的顺序颠倒了一下，别的基本一样。\n\n### 总结\n> jQuery推出on()的目的有2个，一是为了统一接口，二是为了提高性能，所以从现在开始用on()替换bind(), \nlive(), \ndelegate吧。尤其是不要再用live()了，因为它已经处于不推荐使用列表了，随时会被干掉。如果只绑定一次事件，那接着用one()吧，这个没有变化。\njQuery是 一款优秀的JavaScript框架,在旧版里主要用bind()方法，在新版里又多了两种One(),Live()\n>下面介绍这几种方法的使用：\n\n#### 1. bind/Unbind\n> 在jquery的事件模型中，有两个基本的事件绑 定函数，bind与unbind，这两个函数的含义就是匹配页面元素进行相关事件的处理。比如我们在JS中经常使用到的 onfocus，onblur，onmouseover，onmousedown等事件都可以作为bind的参数进行传递。\n$(\"#id\").bind('click',function(){alert('tt!')});\n其中bind的第一个参数代表的含义是：事件类型(注意不需要加on)，function中的代码就是你要执行的逻辑 代码\n多个事件绑定：bind还允许你绑定多个事件，事件名字之间用空格隔开，例如：\n$('a').bind('click mouseover',function(){\n在最新的jquery1.4版本中，对bind方法进行了改进，你可以在bind方法传入一个类JSON对象来一次绑定多 个事件处理函数。\n```\n$('a').bind({\n\tclick:function(){\n\t\talert('a');\n\t},\n\tmouseover:function(){\n\t\talert('a again!')\n\t}\n})\n```\n> 在function函数中，你还可以通过传递一个javaScript对 象给function方法，这个事件对象通常是可以省略的。\nbind中还有一个参数data， 该参数一般情况下很少使用，通常为了解决在同一个方法中处理同一个变量时有很好的处理。\n```\nvar productname=\"Sports Shoes\";\n\t$('#Area').bind('click',function(){\n\talert(productname);\n});\nproductname=\"necklace\",\n$('#Area').bind('click',function(){\n\talert(productname);\n});\n```\n> 由于变量productname被重新赋值，所以输出的消息都是”necklace”,这里不了解可以去查阅下关于JavaScript的变量作用域,要 解决这个问题就必须使用到data参数，\n```\nvar productname=\"Sports Shoes\";\n$('#Area').bind('click',{pn:productname},function(){\n\talert(event.data.pn);\n});\nproductname=\"necklace\",\n$('#Area').bind('click',{pn:productname},function(){\n\talert(event.data.pn);\n});\n```\n\n#### 2. One\n为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。该方法与bind方法的参数一样，与bind方法的区别就是只对匹配元素的事 件处理执行一次，执行完之后，以后再也不会执行,当然重新发起web请求时它又会执行一次。\n```\n$('a').one('click',function(){\n\talert('a');\n})\n```\n> 单击页面上的a元素后，弹出消息，除非用户发起第二次请求，否则再次点击a元素不会弹出消息对话框。\n\n#### 3. live\n该方法主要是能处理动态添加的元素，给那些后添加的元素也一样绑定事件。\n```\n$('a').live('click,function(){\n\talert('show message!');\n})\n```\n> 然后如果我添加一个元素，\n$('body').appnend('Another Element');\n那么该元素也会被触发事件处理函数alert。\n另外，jQuery还提供了一些绑定这些标准事件类型的简单方式，比如.click()用于简化.bind(‘click')。\n一共有以下这些事件名称：blur, focus, focusin, focusout, load, resize, scroll, unload, click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, error 等。\n下面看下jQuery中绑定事件bind() on() live() one()的异同\njQuery中绑定事件的四种方法，他们可以同时绑定一个或多个事件\n```\nbind()----------版本号小于3.0（在Jquery3.0中已经移除，相应unbind()也移除）\nlive()----------版本号小于1.7（在Jquery1.7中已经移除，相应die()也移除）\ndelegate()------版本号小于1.7（在Jquery1.7中已经移除）\non()------------版本号大于1.7（在Jquery1.7中添加，相应off()也添加）\n```\n\n> A：bind()事件的用法\n```\n<title>绑定事件</title>\n <script src=\"js/jQuery1.11.1.js\" type=\"text/javascript\"></script>\n <script>\n  $(function () {\n   $(\"p\").bind({\n    \"mouseover\": function () {\n     $(\"p\").css(\"background-color\", \"red\");\n    },\n    \"mouseout\": function () {\n     $(\"p\").css(\"background-color\", \"\");\n    }\n   });\n  });\n </script>\n</head>\n<body>\n <p>what are you doing?</p>\n</body>\n</html>\n```\n>第一个最大的区别就是：bind()的事件绑定是只对当前页面选中的元素有效。如果你想对动态创建的元素bind()事件，是没有办法达到效果的。\n在后面的动态生成DOM元素绑定事件就要使用on();","source":"_posts/js_5.md","raw":"---\ntitle: jQuery的三种bind/One/Live/On事件绑定使用方法\ndate: 2018-05-20 20:21:01\ntags: Web前端\ncategories: jQuery\n---\n### on(events,[selector],[data],fn)\n> events:一个或多个用空格分隔的事件类型和可选的命名空间，如\"click\"或\"keydown.myPlugin\" 。\n> selector:一个选择器字符串用于过滤器的触发事件的选择器元素的后代。如果选择器为null或省略，当它到达选定的元素，事件总是触发。\n> data:当一个事件被触发时要传递event.data给事件处理函数。\n> fn:该事件被触发时执行的函数。 false 值也可以做一个函数的简写，返回false\n\n#### 替换bind()\n> 当第二个参数'selector'为null时，on()和bind()其实在用法上基本上没有任何区别了，所以我们可以认为on()只是比bind()多了一个可选的'selector'参数，所以on()可以非常方便的换掉bind()\n\n#### 替换live()\n> 在1.4之前相信大家非常喜欢使用live(),因为它可以把事件绑定到当前以及以后添加的元素上面，当然在1.4之后delegate()也可以做类似的事情了。live()的原理很简单，它是通过document进行事件委派的，因此我们也可以使用on()通过将事件绑定到document来达到live()一样的效果。\n\n#### live()写法\n```\n$('#list li').live('click', '#list li', \n\tfunction() {\n\t//function code here.\n});\n```\n\n#### on()写法\n```\n$(document).on('click', '#list li', \nfunction() {\n //function code \nhere.\n});\n```\n> 这里的关键就是第二个参数'selector'在起作用了。它是一个过滤器的作用，只有被选中元素的后代元素才会触发事件。\n\n#### 替换delegate()\n> delegate()是1.4引入的，目的是通过祖先元素来代理委派后代元素的事件绑定问题，某种程度上和live()优点相似。只不过live()是通过document元素委派，而delegate则可以是任意的祖先节点。使用on()实现代理的写法和delegate()基本一致。\n\n#### delegate()的写法\n```\n$('#list').delegate('li', 'click', \nfunction() {\n //function code here.\n});\n```\n#### on()写法\n```\n$('#list').on('click', 'li', function() \n{\n //function code here.\n});\n```\n> 貌似第一个和第二个参数的顺序颠倒了一下，别的基本一样。\n\n### 总结\n> jQuery推出on()的目的有2个，一是为了统一接口，二是为了提高性能，所以从现在开始用on()替换bind(), \nlive(), \ndelegate吧。尤其是不要再用live()了，因为它已经处于不推荐使用列表了，随时会被干掉。如果只绑定一次事件，那接着用one()吧，这个没有变化。\njQuery是 一款优秀的JavaScript框架,在旧版里主要用bind()方法，在新版里又多了两种One(),Live()\n>下面介绍这几种方法的使用：\n\n#### 1. bind/Unbind\n> 在jquery的事件模型中，有两个基本的事件绑 定函数，bind与unbind，这两个函数的含义就是匹配页面元素进行相关事件的处理。比如我们在JS中经常使用到的 onfocus，onblur，onmouseover，onmousedown等事件都可以作为bind的参数进行传递。\n$(\"#id\").bind('click',function(){alert('tt!')});\n其中bind的第一个参数代表的含义是：事件类型(注意不需要加on)，function中的代码就是你要执行的逻辑 代码\n多个事件绑定：bind还允许你绑定多个事件，事件名字之间用空格隔开，例如：\n$('a').bind('click mouseover',function(){\n在最新的jquery1.4版本中，对bind方法进行了改进，你可以在bind方法传入一个类JSON对象来一次绑定多 个事件处理函数。\n```\n$('a').bind({\n\tclick:function(){\n\t\talert('a');\n\t},\n\tmouseover:function(){\n\t\talert('a again!')\n\t}\n})\n```\n> 在function函数中，你还可以通过传递一个javaScript对 象给function方法，这个事件对象通常是可以省略的。\nbind中还有一个参数data， 该参数一般情况下很少使用，通常为了解决在同一个方法中处理同一个变量时有很好的处理。\n```\nvar productname=\"Sports Shoes\";\n\t$('#Area').bind('click',function(){\n\talert(productname);\n});\nproductname=\"necklace\",\n$('#Area').bind('click',function(){\n\talert(productname);\n});\n```\n> 由于变量productname被重新赋值，所以输出的消息都是”necklace”,这里不了解可以去查阅下关于JavaScript的变量作用域,要 解决这个问题就必须使用到data参数，\n```\nvar productname=\"Sports Shoes\";\n$('#Area').bind('click',{pn:productname},function(){\n\talert(event.data.pn);\n});\nproductname=\"necklace\",\n$('#Area').bind('click',{pn:productname},function(){\n\talert(event.data.pn);\n});\n```\n\n#### 2. One\n为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。该方法与bind方法的参数一样，与bind方法的区别就是只对匹配元素的事 件处理执行一次，执行完之后，以后再也不会执行,当然重新发起web请求时它又会执行一次。\n```\n$('a').one('click',function(){\n\talert('a');\n})\n```\n> 单击页面上的a元素后，弹出消息，除非用户发起第二次请求，否则再次点击a元素不会弹出消息对话框。\n\n#### 3. live\n该方法主要是能处理动态添加的元素，给那些后添加的元素也一样绑定事件。\n```\n$('a').live('click,function(){\n\talert('show message!');\n})\n```\n> 然后如果我添加一个元素，\n$('body').appnend('Another Element');\n那么该元素也会被触发事件处理函数alert。\n另外，jQuery还提供了一些绑定这些标准事件类型的简单方式，比如.click()用于简化.bind(‘click')。\n一共有以下这些事件名称：blur, focus, focusin, focusout, load, resize, scroll, unload, click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, error 等。\n下面看下jQuery中绑定事件bind() on() live() one()的异同\njQuery中绑定事件的四种方法，他们可以同时绑定一个或多个事件\n```\nbind()----------版本号小于3.0（在Jquery3.0中已经移除，相应unbind()也移除）\nlive()----------版本号小于1.7（在Jquery1.7中已经移除，相应die()也移除）\ndelegate()------版本号小于1.7（在Jquery1.7中已经移除）\non()------------版本号大于1.7（在Jquery1.7中添加，相应off()也添加）\n```\n\n> A：bind()事件的用法\n```\n<title>绑定事件</title>\n <script src=\"js/jQuery1.11.1.js\" type=\"text/javascript\"></script>\n <script>\n  $(function () {\n   $(\"p\").bind({\n    \"mouseover\": function () {\n     $(\"p\").css(\"background-color\", \"red\");\n    },\n    \"mouseout\": function () {\n     $(\"p\").css(\"background-color\", \"\");\n    }\n   });\n  });\n </script>\n</head>\n<body>\n <p>what are you doing?</p>\n</body>\n</html>\n```\n>第一个最大的区别就是：bind()的事件绑定是只对当前页面选中的元素有效。如果你想对动态创建的元素bind()事件，是没有办法达到效果的。\n在后面的动态生成DOM元素绑定事件就要使用on();","slug":"js_5","published":1,"updated":"2019-04-09T14:32:35.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmb4001nvjcgkrs01oua","content":"<h3 id=\"on-events-selector-data-fn\"><a href=\"#on-events-selector-data-fn\" class=\"headerlink\" title=\"on(events,[selector],[data],fn)\"></a>on(events,[selector],[data],fn)</h3><blockquote>\n<p>events:一个或多个用空格分隔的事件类型和可选的命名空间，如”click”或”keydown.myPlugin” 。<br>selector:一个选择器字符串用于过滤器的触发事件的选择器元素的后代。如果选择器为null或省略，当它到达选定的元素，事件总是触发。<br>data:当一个事件被触发时要传递event.data给事件处理函数。<br>fn:该事件被触发时执行的函数。 false 值也可以做一个函数的简写，返回false</p>\n</blockquote>\n<h4 id=\"替换bind\"><a href=\"#替换bind\" class=\"headerlink\" title=\"替换bind()\"></a>替换bind()</h4><blockquote>\n<p>当第二个参数’selector’为null时，on()和bind()其实在用法上基本上没有任何区别了，所以我们可以认为on()只是比bind()多了一个可选的’selector’参数，所以on()可以非常方便的换掉bind()</p>\n</blockquote>\n<h4 id=\"替换live\"><a href=\"#替换live\" class=\"headerlink\" title=\"替换live()\"></a>替换live()</h4><blockquote>\n<p>在1.4之前相信大家非常喜欢使用live(),因为它可以把事件绑定到当前以及以后添加的元素上面，当然在1.4之后delegate()也可以做类似的事情了。live()的原理很简单，它是通过document进行事件委派的，因此我们也可以使用on()通过将事件绑定到document来达到live()一样的效果。</p>\n</blockquote>\n<h4 id=\"live-写法\"><a href=\"#live-写法\" class=\"headerlink\" title=\"live()写法\"></a>live()写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#list li&apos;).live(&apos;click&apos;, &apos;#list li&apos;, </span><br><span class=\"line\">\tfunction() &#123;</span><br><span class=\"line\">\t//function code here.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"on-写法\"><a href=\"#on-写法\" class=\"headerlink\" title=\"on()写法\"></a>on()写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(document).on(&apos;click&apos;, &apos;#list li&apos;, </span><br><span class=\"line\">function() &#123;</span><br><span class=\"line\"> //function code </span><br><span class=\"line\">here.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的关键就是第二个参数’selector’在起作用了。它是一个过滤器的作用，只有被选中元素的后代元素才会触发事件。</p>\n</blockquote>\n<h4 id=\"替换delegate\"><a href=\"#替换delegate\" class=\"headerlink\" title=\"替换delegate()\"></a>替换delegate()</h4><blockquote>\n<p>delegate()是1.4引入的，目的是通过祖先元素来代理委派后代元素的事件绑定问题，某种程度上和live()优点相似。只不过live()是通过document元素委派，而delegate则可以是任意的祖先节点。使用on()实现代理的写法和delegate()基本一致。</p>\n</blockquote>\n<h4 id=\"delegate-的写法\"><a href=\"#delegate-的写法\" class=\"headerlink\" title=\"delegate()的写法\"></a>delegate()的写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#list&apos;).delegate(&apos;li&apos;, &apos;click&apos;, </span><br><span class=\"line\">function() &#123;</span><br><span class=\"line\"> //function code here.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"on-写法-1\"><a href=\"#on-写法-1\" class=\"headerlink\" title=\"on()写法\"></a>on()写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#list&apos;).on(&apos;click&apos;, &apos;li&apos;, function() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> //function code here.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>貌似第一个和第二个参数的顺序颠倒了一下，别的基本一样。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>jQuery推出on()的目的有2个，一是为了统一接口，二是为了提高性能，所以从现在开始用on()替换bind(),<br>live(),<br>delegate吧。尤其是不要再用live()了，因为它已经处于不推荐使用列表了，随时会被干掉。如果只绑定一次事件，那接着用one()吧，这个没有变化。<br>jQuery是 一款优秀的JavaScript框架,在旧版里主要用bind()方法，在新版里又多了两种One(),Live()<br>下面介绍这几种方法的使用：</p>\n</blockquote>\n<h4 id=\"1-bind-Unbind\"><a href=\"#1-bind-Unbind\" class=\"headerlink\" title=\"1. bind/Unbind\"></a>1. bind/Unbind</h4><blockquote>\n<p>在jquery的事件模型中，有两个基本的事件绑 定函数，bind与unbind，这两个函数的含义就是匹配页面元素进行相关事件的处理。比如我们在JS中经常使用到的 onfocus，onblur，onmouseover，onmousedown等事件都可以作为bind的参数进行传递。<br>$(“#id”).bind(‘click’,function(){alert(‘tt!’)});<br>其中bind的第一个参数代表的含义是：事件类型(注意不需要加on)，function中的代码就是你要执行的逻辑 代码<br>多个事件绑定：bind还允许你绑定多个事件，事件名字之间用空格隔开，例如：<br>$(‘a’).bind(‘click mouseover’,function(){<br>在最新的jquery1.4版本中，对bind方法进行了改进，你可以在bind方法传入一个类JSON对象来一次绑定多 个事件处理函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;a&apos;).bind(&#123;</span><br><span class=\"line\">\tclick:function()&#123;</span><br><span class=\"line\">\t\talert(&apos;a&apos;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmouseover:function()&#123;</span><br><span class=\"line\">\t\talert(&apos;a again!&apos;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>在function函数中，你还可以通过传递一个javaScript对 象给function方法，这个事件对象通常是可以省略的。<br>bind中还有一个参数data， 该参数一般情况下很少使用，通常为了解决在同一个方法中处理同一个变量时有很好的处理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var productname=&quot;Sports Shoes&quot;;</span><br><span class=\"line\">\t$(&apos;#Area&apos;).bind(&apos;click&apos;,function()&#123;</span><br><span class=\"line\">\talert(productname);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">productname=&quot;necklace&quot;,</span><br><span class=\"line\">$(&apos;#Area&apos;).bind(&apos;click&apos;,function()&#123;</span><br><span class=\"line\">\talert(productname);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>由于变量productname被重新赋值，所以输出的消息都是”necklace”,这里不了解可以去查阅下关于JavaScript的变量作用域,要 解决这个问题就必须使用到data参数，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var productname=&quot;Sports Shoes&quot;;</span><br><span class=\"line\">$(&apos;#Area&apos;).bind(&apos;click&apos;,&#123;pn:productname&#125;,function()&#123;</span><br><span class=\"line\">\talert(event.data.pn);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">productname=&quot;necklace&quot;,</span><br><span class=\"line\">$(&apos;#Area&apos;).bind(&apos;click&apos;,&#123;pn:productname&#125;,function()&#123;</span><br><span class=\"line\">\talert(event.data.pn);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"2-One\"><a href=\"#2-One\" class=\"headerlink\" title=\"2. One\"></a>2. One</h4><p>为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。该方法与bind方法的参数一样，与bind方法的区别就是只对匹配元素的事 件处理执行一次，执行完之后，以后再也不会执行,当然重新发起web请求时它又会执行一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;a&apos;).one(&apos;click&apos;,function()&#123;</span><br><span class=\"line\">\talert(&apos;a&apos;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>单击页面上的a元素后，弹出消息，除非用户发起第二次请求，否则再次点击a元素不会弹出消息对话框。</p>\n</blockquote>\n<h4 id=\"3-live\"><a href=\"#3-live\" class=\"headerlink\" title=\"3. live\"></a>3. live</h4><p>该方法主要是能处理动态添加的元素，给那些后添加的元素也一样绑定事件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;a&apos;).live(&apos;click,function()&#123;</span><br><span class=\"line\">\talert(&apos;show message!&apos;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>然后如果我添加一个元素，<br>$(‘body’).appnend(‘Another Element’);<br>那么该元素也会被触发事件处理函数alert。<br>另外，jQuery还提供了一些绑定这些标准事件类型的简单方式，比如.click()用于简化.bind(‘click’)。<br>一共有以下这些事件名称：blur, focus, focusin, focusout, load, resize, scroll, unload, click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, error 等。<br>下面看下jQuery中绑定事件bind() on() live() one()的异同<br>jQuery中绑定事件的四种方法，他们可以同时绑定一个或多个事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind()----------版本号小于3.0（在Jquery3.0中已经移除，相应unbind()也移除）</span><br><span class=\"line\">live()----------版本号小于1.7（在Jquery1.7中已经移除，相应die()也移除）</span><br><span class=\"line\">delegate()------版本号小于1.7（在Jquery1.7中已经移除）</span><br><span class=\"line\">on()------------版本号大于1.7（在Jquery1.7中添加，相应off()也添加）</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>A：bind()事件的用法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;title&gt;绑定事件&lt;/title&gt;</span><br><span class=\"line\"> &lt;script src=&quot;js/jQuery1.11.1.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script&gt;</span><br><span class=\"line\">  $(function () &#123;</span><br><span class=\"line\">   $(&quot;p&quot;).bind(&#123;</span><br><span class=\"line\">    &quot;mouseover&quot;: function () &#123;</span><br><span class=\"line\">     $(&quot;p&quot;).css(&quot;background-color&quot;, &quot;red&quot;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;mouseout&quot;: function () &#123;</span><br><span class=\"line\">     $(&quot;p&quot;).css(&quot;background-color&quot;, &quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> &lt;p&gt;what are you doing?&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>第一个最大的区别就是：bind()的事件绑定是只对当前页面选中的元素有效。如果你想对动态创建的元素bind()事件，是没有办法达到效果的。<br>在后面的动态生成DOM元素绑定事件就要使用on();</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"on-events-selector-data-fn\"><a href=\"#on-events-selector-data-fn\" class=\"headerlink\" title=\"on(events,[selector],[data],fn)\"></a>on(events,[selector],[data],fn)</h3><blockquote>\n<p>events:一个或多个用空格分隔的事件类型和可选的命名空间，如”click”或”keydown.myPlugin” 。<br>selector:一个选择器字符串用于过滤器的触发事件的选择器元素的后代。如果选择器为null或省略，当它到达选定的元素，事件总是触发。<br>data:当一个事件被触发时要传递event.data给事件处理函数。<br>fn:该事件被触发时执行的函数。 false 值也可以做一个函数的简写，返回false</p>\n</blockquote>\n<h4 id=\"替换bind\"><a href=\"#替换bind\" class=\"headerlink\" title=\"替换bind()\"></a>替换bind()</h4><blockquote>\n<p>当第二个参数’selector’为null时，on()和bind()其实在用法上基本上没有任何区别了，所以我们可以认为on()只是比bind()多了一个可选的’selector’参数，所以on()可以非常方便的换掉bind()</p>\n</blockquote>\n<h4 id=\"替换live\"><a href=\"#替换live\" class=\"headerlink\" title=\"替换live()\"></a>替换live()</h4><blockquote>\n<p>在1.4之前相信大家非常喜欢使用live(),因为它可以把事件绑定到当前以及以后添加的元素上面，当然在1.4之后delegate()也可以做类似的事情了。live()的原理很简单，它是通过document进行事件委派的，因此我们也可以使用on()通过将事件绑定到document来达到live()一样的效果。</p>\n</blockquote>\n<h4 id=\"live-写法\"><a href=\"#live-写法\" class=\"headerlink\" title=\"live()写法\"></a>live()写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#list li&apos;).live(&apos;click&apos;, &apos;#list li&apos;, </span><br><span class=\"line\">\tfunction() &#123;</span><br><span class=\"line\">\t//function code here.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"on-写法\"><a href=\"#on-写法\" class=\"headerlink\" title=\"on()写法\"></a>on()写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(document).on(&apos;click&apos;, &apos;#list li&apos;, </span><br><span class=\"line\">function() &#123;</span><br><span class=\"line\"> //function code </span><br><span class=\"line\">here.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里的关键就是第二个参数’selector’在起作用了。它是一个过滤器的作用，只有被选中元素的后代元素才会触发事件。</p>\n</blockquote>\n<h4 id=\"替换delegate\"><a href=\"#替换delegate\" class=\"headerlink\" title=\"替换delegate()\"></a>替换delegate()</h4><blockquote>\n<p>delegate()是1.4引入的，目的是通过祖先元素来代理委派后代元素的事件绑定问题，某种程度上和live()优点相似。只不过live()是通过document元素委派，而delegate则可以是任意的祖先节点。使用on()实现代理的写法和delegate()基本一致。</p>\n</blockquote>\n<h4 id=\"delegate-的写法\"><a href=\"#delegate-的写法\" class=\"headerlink\" title=\"delegate()的写法\"></a>delegate()的写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#list&apos;).delegate(&apos;li&apos;, &apos;click&apos;, </span><br><span class=\"line\">function() &#123;</span><br><span class=\"line\"> //function code here.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"on-写法-1\"><a href=\"#on-写法-1\" class=\"headerlink\" title=\"on()写法\"></a>on()写法</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;#list&apos;).on(&apos;click&apos;, &apos;li&apos;, function() </span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> //function code here.</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>貌似第一个和第二个参数的顺序颠倒了一下，别的基本一样。</p>\n</blockquote>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><blockquote>\n<p>jQuery推出on()的目的有2个，一是为了统一接口，二是为了提高性能，所以从现在开始用on()替换bind(),<br>live(),<br>delegate吧。尤其是不要再用live()了，因为它已经处于不推荐使用列表了，随时会被干掉。如果只绑定一次事件，那接着用one()吧，这个没有变化。<br>jQuery是 一款优秀的JavaScript框架,在旧版里主要用bind()方法，在新版里又多了两种One(),Live()<br>下面介绍这几种方法的使用：</p>\n</blockquote>\n<h4 id=\"1-bind-Unbind\"><a href=\"#1-bind-Unbind\" class=\"headerlink\" title=\"1. bind/Unbind\"></a>1. bind/Unbind</h4><blockquote>\n<p>在jquery的事件模型中，有两个基本的事件绑 定函数，bind与unbind，这两个函数的含义就是匹配页面元素进行相关事件的处理。比如我们在JS中经常使用到的 onfocus，onblur，onmouseover，onmousedown等事件都可以作为bind的参数进行传递。<br>$(“#id”).bind(‘click’,function(){alert(‘tt!’)});<br>其中bind的第一个参数代表的含义是：事件类型(注意不需要加on)，function中的代码就是你要执行的逻辑 代码<br>多个事件绑定：bind还允许你绑定多个事件，事件名字之间用空格隔开，例如：<br>$(‘a’).bind(‘click mouseover’,function(){<br>在最新的jquery1.4版本中，对bind方法进行了改进，你可以在bind方法传入一个类JSON对象来一次绑定多 个事件处理函数。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;a&apos;).bind(&#123;</span><br><span class=\"line\">\tclick:function()&#123;</span><br><span class=\"line\">\t\talert(&apos;a&apos;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmouseover:function()&#123;</span><br><span class=\"line\">\t\talert(&apos;a again!&apos;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>在function函数中，你还可以通过传递一个javaScript对 象给function方法，这个事件对象通常是可以省略的。<br>bind中还有一个参数data， 该参数一般情况下很少使用，通常为了解决在同一个方法中处理同一个变量时有很好的处理。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var productname=&quot;Sports Shoes&quot;;</span><br><span class=\"line\">\t$(&apos;#Area&apos;).bind(&apos;click&apos;,function()&#123;</span><br><span class=\"line\">\talert(productname);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">productname=&quot;necklace&quot;,</span><br><span class=\"line\">$(&apos;#Area&apos;).bind(&apos;click&apos;,function()&#123;</span><br><span class=\"line\">\talert(productname);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>由于变量productname被重新赋值，所以输出的消息都是”necklace”,这里不了解可以去查阅下关于JavaScript的变量作用域,要 解决这个问题就必须使用到data参数，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var productname=&quot;Sports Shoes&quot;;</span><br><span class=\"line\">$(&apos;#Area&apos;).bind(&apos;click&apos;,&#123;pn:productname&#125;,function()&#123;</span><br><span class=\"line\">\talert(event.data.pn);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">productname=&quot;necklace&quot;,</span><br><span class=\"line\">$(&apos;#Area&apos;).bind(&apos;click&apos;,&#123;pn:productname&#125;,function()&#123;</span><br><span class=\"line\">\talert(event.data.pn);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h4 id=\"2-One\"><a href=\"#2-One\" class=\"headerlink\" title=\"2. One\"></a>2. One</h4><p>为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。该方法与bind方法的参数一样，与bind方法的区别就是只对匹配元素的事 件处理执行一次，执行完之后，以后再也不会执行,当然重新发起web请求时它又会执行一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;a&apos;).one(&apos;click&apos;,function()&#123;</span><br><span class=\"line\">\talert(&apos;a&apos;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>单击页面上的a元素后，弹出消息，除非用户发起第二次请求，否则再次点击a元素不会弹出消息对话框。</p>\n</blockquote>\n<h4 id=\"3-live\"><a href=\"#3-live\" class=\"headerlink\" title=\"3. live\"></a>3. live</h4><p>该方法主要是能处理动态添加的元素，给那些后添加的元素也一样绑定事件。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(&apos;a&apos;).live(&apos;click,function()&#123;</span><br><span class=\"line\">\talert(&apos;show message!&apos;);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>然后如果我添加一个元素，<br>$(‘body’).appnend(‘Another Element’);<br>那么该元素也会被触发事件处理函数alert。<br>另外，jQuery还提供了一些绑定这些标准事件类型的简单方式，比如.click()用于简化.bind(‘click’)。<br>一共有以下这些事件名称：blur, focus, focusin, focusout, load, resize, scroll, unload, click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, error 等。<br>下面看下jQuery中绑定事件bind() on() live() one()的异同<br>jQuery中绑定事件的四种方法，他们可以同时绑定一个或多个事件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bind()----------版本号小于3.0（在Jquery3.0中已经移除，相应unbind()也移除）</span><br><span class=\"line\">live()----------版本号小于1.7（在Jquery1.7中已经移除，相应die()也移除）</span><br><span class=\"line\">delegate()------版本号小于1.7（在Jquery1.7中已经移除）</span><br><span class=\"line\">on()------------版本号大于1.7（在Jquery1.7中添加，相应off()也添加）</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>A：bind()事件的用法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;title&gt;绑定事件&lt;/title&gt;</span><br><span class=\"line\"> &lt;script src=&quot;js/jQuery1.11.1.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\"> &lt;script&gt;</span><br><span class=\"line\">  $(function () &#123;</span><br><span class=\"line\">   $(&quot;p&quot;).bind(&#123;</span><br><span class=\"line\">    &quot;mouseover&quot;: function () &#123;</span><br><span class=\"line\">     $(&quot;p&quot;).css(&quot;background-color&quot;, &quot;red&quot;);</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;mouseout&quot;: function () &#123;</span><br><span class=\"line\">     $(&quot;p&quot;).css(&quot;background-color&quot;, &quot;&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   &#125;);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &lt;/script&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\"> &lt;p&gt;what are you doing?&lt;/p&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>第一个最大的区别就是：bind()的事件绑定是只对当前页面选中的元素有效。如果你想对动态创建的元素bind()事件，是没有办法达到效果的。<br>在后面的动态生成DOM元素绑定事件就要使用on();</p>\n</blockquote>\n"},{"title":"js 比较几种遍历数组及对象的方式","date":"2018-05-13T12:21:01.000Z","_content":">通常我们会用循环的方式来遍历数组。但是循环是 导致js 性能问题的原因之一。\n>一般我们会采用下几种方式来进行数组的遍历：\n\n### 方式1：for in 循环\n```\nvar arr = [1,2,3,4,5];\nvar obj = { a : 1, b : 2, c : 3 };\nfor( var item in arr|obj ){\n        fn(item){\n                // do sth with arr[item];\n                //do sth wtih obj[item];\n        };\n}\n这里的 item：\n        array 的索引值，对应于 arr 的下标值；\n        object 的 key 值，对应于 obj 的 a,b,c；\n\n```\n\n### 方式2：for 循环\n```\nfor (var i=0; i<arr.length; i++){\n        //do sth with arr[i];\n}\n```\n\n> 这两种方法应该非常常见且使用很频繁。但实际上，这两种方法都存在性能问题。\n> 在方式1中，for-in 需要分析出array 的每个属性，这个操作性能开销很大。用在 key 已知的数组上是非常不划算的。所以尽量不要用 for-in，除非你不清楚要处理哪些属性，例如 JSON 对象这样的情况。\n> 在方式2中，循环每进行一次，就要检查一下数组长度。读取属性（数组长度）要比读局部变量慢，尤其是当 array 里存放的都是 DOM 元素，因为每次读取都会扫描一遍页面上的选择器相关元素，速度会大大降低。\n所以这时候我们就有必要对方式2进行优化。\n\n#### 加速的\n```\nvar arr = [1,2,3,4,5];\nvar length =arr.length;\nfor(var i=0; i<length; i++){\n　　fn(arr[i]);\n}\n```\n> 现在只需要读取一次 array 的 length 属性，速度已经加快了。但是还能不能更快呢？\n事实是，如果循环终止条件不进行比较运算，那么循环的速度还可以更快。\n\n#### 加速且优雅的\n```\nvar arr = [1,2,3,4,5];\nvar i = arr.length;\nwhile(i--){\n        fn(arr[i]);\n}\n```\n\n### 方式 3：forEach\n```\nvar arr = [1,2,3,4,5];\narr.forEach(\n        fn(value,index){\n                //Do sth with value ;\n        }\n)\n```\n> 注意：\n> 这里的 forEach回调中两个参数分别为 value，index，其位置刚好和 jQuery 的$.each 相反；\nforEach 无法遍历对象；\nIE不支持该方法；Firefox 和 chrome 支持；\nforEach 无法使用 break，continue 跳出循环，且使用 return 是跳过本次循环；\n可以添加第二个参数，为一个数组，回调中的 this 会指向这个数组，若没有添加，则是指向 window；\n\n关于跳出循环的几种方式：\n1. return ==》结束循环并中断函数执行；\n2. break ==》结束循环函数继续执行；\n3. continue ==》跳过本次循环；\n\n> for 循环中的变量 i，由于 ES5并没有块级作用域的存在，它在循环结束以后仍然存在于内存中，所以建议使用函数自执行的方式来避免。\n","source":"_posts/js_4.md","raw":"---\ntitle: js 比较几种遍历数组及对象的方式\ndate: 2018-05-13 20:21:01\ntags: Web前端\ncategories: jQuery\n---\n>通常我们会用循环的方式来遍历数组。但是循环是 导致js 性能问题的原因之一。\n>一般我们会采用下几种方式来进行数组的遍历：\n\n### 方式1：for in 循环\n```\nvar arr = [1,2,3,4,5];\nvar obj = { a : 1, b : 2, c : 3 };\nfor( var item in arr|obj ){\n        fn(item){\n                // do sth with arr[item];\n                //do sth wtih obj[item];\n        };\n}\n这里的 item：\n        array 的索引值，对应于 arr 的下标值；\n        object 的 key 值，对应于 obj 的 a,b,c；\n\n```\n\n### 方式2：for 循环\n```\nfor (var i=0; i<arr.length; i++){\n        //do sth with arr[i];\n}\n```\n\n> 这两种方法应该非常常见且使用很频繁。但实际上，这两种方法都存在性能问题。\n> 在方式1中，for-in 需要分析出array 的每个属性，这个操作性能开销很大。用在 key 已知的数组上是非常不划算的。所以尽量不要用 for-in，除非你不清楚要处理哪些属性，例如 JSON 对象这样的情况。\n> 在方式2中，循环每进行一次，就要检查一下数组长度。读取属性（数组长度）要比读局部变量慢，尤其是当 array 里存放的都是 DOM 元素，因为每次读取都会扫描一遍页面上的选择器相关元素，速度会大大降低。\n所以这时候我们就有必要对方式2进行优化。\n\n#### 加速的\n```\nvar arr = [1,2,3,4,5];\nvar length =arr.length;\nfor(var i=0; i<length; i++){\n　　fn(arr[i]);\n}\n```\n> 现在只需要读取一次 array 的 length 属性，速度已经加快了。但是还能不能更快呢？\n事实是，如果循环终止条件不进行比较运算，那么循环的速度还可以更快。\n\n#### 加速且优雅的\n```\nvar arr = [1,2,3,4,5];\nvar i = arr.length;\nwhile(i--){\n        fn(arr[i]);\n}\n```\n\n### 方式 3：forEach\n```\nvar arr = [1,2,3,4,5];\narr.forEach(\n        fn(value,index){\n                //Do sth with value ;\n        }\n)\n```\n> 注意：\n> 这里的 forEach回调中两个参数分别为 value，index，其位置刚好和 jQuery 的$.each 相反；\nforEach 无法遍历对象；\nIE不支持该方法；Firefox 和 chrome 支持；\nforEach 无法使用 break，continue 跳出循环，且使用 return 是跳过本次循环；\n可以添加第二个参数，为一个数组，回调中的 this 会指向这个数组，若没有添加，则是指向 window；\n\n关于跳出循环的几种方式：\n1. return ==》结束循环并中断函数执行；\n2. break ==》结束循环函数继续执行；\n3. continue ==》跳过本次循环；\n\n> for 循环中的变量 i，由于 ES5并没有块级作用域的存在，它在循环结束以后仍然存在于内存中，所以建议使用函数自执行的方式来避免。\n","slug":"js_4","published":1,"updated":"2019-04-09T14:32:47.203Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmb5001rvjcgtdb43r16","content":"<blockquote>\n<p>通常我们会用循环的方式来遍历数组。但是循环是 导致js 性能问题的原因之一。<br>一般我们会采用下几种方式来进行数组的遍历：</p>\n</blockquote>\n<h3 id=\"方式1：for-in-循环\"><a href=\"#方式1：for-in-循环\" class=\"headerlink\" title=\"方式1：for in 循环\"></a>方式1：for in 循环</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\">var obj = &#123; a : 1, b : 2, c : 3 &#125;;</span><br><span class=\"line\">for( var item in arr|obj )&#123;</span><br><span class=\"line\">        fn(item)&#123;</span><br><span class=\"line\">                // do sth with arr[item];</span><br><span class=\"line\">                //do sth wtih obj[item];</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这里的 item：</span><br><span class=\"line\">        array 的索引值，对应于 arr 的下标值；</span><br><span class=\"line\">        object 的 key 值，对应于 obj 的 a,b,c；</span><br></pre></td></tr></table></figure>\n<h3 id=\"方式2：for-循环\"><a href=\"#方式2：for-循环\" class=\"headerlink\" title=\"方式2：for 循环\"></a>方式2：for 循环</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i=0; i&lt;arr.length; i++)&#123;</span><br><span class=\"line\">        //do sth with arr[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这两种方法应该非常常见且使用很频繁。但实际上，这两种方法都存在性能问题。<br>在方式1中，for-in 需要分析出array 的每个属性，这个操作性能开销很大。用在 key 已知的数组上是非常不划算的。所以尽量不要用 for-in，除非你不清楚要处理哪些属性，例如 JSON 对象这样的情况。<br>在方式2中，循环每进行一次，就要检查一下数组长度。读取属性（数组长度）要比读局部变量慢，尤其是当 array 里存放的都是 DOM 元素，因为每次读取都会扫描一遍页面上的选择器相关元素，速度会大大降低。<br>所以这时候我们就有必要对方式2进行优化。</p>\n</blockquote>\n<h4 id=\"加速的\"><a href=\"#加速的\" class=\"headerlink\" title=\"加速的\"></a>加速的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\">var length =arr.length;</span><br><span class=\"line\">for(var i=0; i&lt;length; i++)&#123;</span><br><span class=\"line\">　　fn(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现在只需要读取一次 array 的 length 属性，速度已经加快了。但是还能不能更快呢？<br>事实是，如果循环终止条件不进行比较运算，那么循环的速度还可以更快。</p>\n</blockquote>\n<h4 id=\"加速且优雅的\"><a href=\"#加速且优雅的\" class=\"headerlink\" title=\"加速且优雅的\"></a>加速且优雅的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\">var i = arr.length;</span><br><span class=\"line\">while(i--)&#123;</span><br><span class=\"line\">        fn(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方式-3：forEach\"><a href=\"#方式-3：forEach\" class=\"headerlink\" title=\"方式 3：forEach\"></a>方式 3：forEach</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\">arr.forEach(</span><br><span class=\"line\">        fn(value,index)&#123;</span><br><span class=\"line\">                //Do sth with value ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<br>这里的 forEach回调中两个参数分别为 value，index，其位置刚好和 jQuery 的$.each 相反；<br>forEach 无法遍历对象；<br>IE不支持该方法；Firefox 和 chrome 支持；<br>forEach 无法使用 break，continue 跳出循环，且使用 return 是跳过本次循环；<br>可以添加第二个参数，为一个数组，回调中的 this 会指向这个数组，若没有添加，则是指向 window；</p>\n</blockquote>\n<p>关于跳出循环的几种方式：</p>\n<ol>\n<li>return ==》结束循环并中断函数执行；</li>\n<li>break ==》结束循环函数继续执行；</li>\n<li>continue ==》跳过本次循环；</li>\n</ol>\n<blockquote>\n<p>for 循环中的变量 i，由于 ES5并没有块级作用域的存在，它在循环结束以后仍然存在于内存中，所以建议使用函数自执行的方式来避免。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>通常我们会用循环的方式来遍历数组。但是循环是 导致js 性能问题的原因之一。<br>一般我们会采用下几种方式来进行数组的遍历：</p>\n</blockquote>\n<h3 id=\"方式1：for-in-循环\"><a href=\"#方式1：for-in-循环\" class=\"headerlink\" title=\"方式1：for in 循环\"></a>方式1：for in 循环</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\">var obj = &#123; a : 1, b : 2, c : 3 &#125;;</span><br><span class=\"line\">for( var item in arr|obj )&#123;</span><br><span class=\"line\">        fn(item)&#123;</span><br><span class=\"line\">                // do sth with arr[item];</span><br><span class=\"line\">                //do sth wtih obj[item];</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">这里的 item：</span><br><span class=\"line\">        array 的索引值，对应于 arr 的下标值；</span><br><span class=\"line\">        object 的 key 值，对应于 obj 的 a,b,c；</span><br></pre></td></tr></table></figure>\n<h3 id=\"方式2：for-循环\"><a href=\"#方式2：for-循环\" class=\"headerlink\" title=\"方式2：for 循环\"></a>方式2：for 循环</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for (var i=0; i&lt;arr.length; i++)&#123;</span><br><span class=\"line\">        //do sth with arr[i];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这两种方法应该非常常见且使用很频繁。但实际上，这两种方法都存在性能问题。<br>在方式1中，for-in 需要分析出array 的每个属性，这个操作性能开销很大。用在 key 已知的数组上是非常不划算的。所以尽量不要用 for-in，除非你不清楚要处理哪些属性，例如 JSON 对象这样的情况。<br>在方式2中，循环每进行一次，就要检查一下数组长度。读取属性（数组长度）要比读局部变量慢，尤其是当 array 里存放的都是 DOM 元素，因为每次读取都会扫描一遍页面上的选择器相关元素，速度会大大降低。<br>所以这时候我们就有必要对方式2进行优化。</p>\n</blockquote>\n<h4 id=\"加速的\"><a href=\"#加速的\" class=\"headerlink\" title=\"加速的\"></a>加速的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\">var length =arr.length;</span><br><span class=\"line\">for(var i=0; i&lt;length; i++)&#123;</span><br><span class=\"line\">　　fn(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>现在只需要读取一次 array 的 length 属性，速度已经加快了。但是还能不能更快呢？<br>事实是，如果循环终止条件不进行比较运算，那么循环的速度还可以更快。</p>\n</blockquote>\n<h4 id=\"加速且优雅的\"><a href=\"#加速且优雅的\" class=\"headerlink\" title=\"加速且优雅的\"></a>加速且优雅的</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\">var i = arr.length;</span><br><span class=\"line\">while(i--)&#123;</span><br><span class=\"line\">        fn(arr[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"方式-3：forEach\"><a href=\"#方式-3：forEach\" class=\"headerlink\" title=\"方式 3：forEach\"></a>方式 3：forEach</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr = [1,2,3,4,5];</span><br><span class=\"line\">arr.forEach(</span><br><span class=\"line\">        fn(value,index)&#123;</span><br><span class=\"line\">                //Do sth with value ;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：<br>这里的 forEach回调中两个参数分别为 value，index，其位置刚好和 jQuery 的$.each 相反；<br>forEach 无法遍历对象；<br>IE不支持该方法；Firefox 和 chrome 支持；<br>forEach 无法使用 break，continue 跳出循环，且使用 return 是跳过本次循环；<br>可以添加第二个参数，为一个数组，回调中的 this 会指向这个数组，若没有添加，则是指向 window；</p>\n</blockquote>\n<p>关于跳出循环的几种方式：</p>\n<ol>\n<li>return ==》结束循环并中断函数执行；</li>\n<li>break ==》结束循环函数继续执行；</li>\n<li>continue ==》跳过本次循环；</li>\n</ol>\n<blockquote>\n<p>for 循环中的变量 i，由于 ES5并没有块级作用域的存在，它在循环结束以后仍然存在于内存中，所以建议使用函数自执行的方式来避免。</p>\n</blockquote>\n"},{"title":"MYSQL之运算符操作","date":"2018-07-07T11:21:01.000Z","_content":"```\ncreate table if not exists test(\n\tid int(11) not null auto_increment primary key,\n\tnum int(11) null\n)\n```\n### 算术运算符\n>加(+)、减(-)、乘(*)、除(/)、余(%)、除(div)、余(mod)\n\n```\nselect id, num, id+num, id-num, id*num, id/num, id%num, id div num, id mod num from test;\n结果：\nid \tnum \tid+num \tid-num \tid*num \tid/num \tid%num \tid div num \tid mod num\n5  \t2   \t8\t  \t3      \t10     \t2.5    \t1      \t2\t\t\t1\n6   null\tnull\tnull\tnull\tnull\tnull\tnull\t\tnull\nnull 5\t\tnull\tnull\tnull\tnull\tnull\tnull\t\tnull\n```\n\n### 比较运算符\n>大于(>)、小于(<)、等于(=)、不等于(!=或<>)、大于等于(>=)、小于等于(<=)\n\n```\n1. 符合条件的结果为1\n2. 不符合条件的结果为0\n3. 值为NULL的结果为null\n```  \n\n>是null(IS NULL)、不是null(IS NOT NULL)\n\n```\n判断是否为空值可以采用 <=> 进行判断，a<=>0，值为0的结果为1，其他都为0；a<=>null，值为null的结果为1，其他都为0\n```  \n\n>包含(between a and b)  \n>包含(id IN (1,2,3))、不包含(id not in(1,2,3))  \n>模式匹配(name like '%keyword%')、模式不匹配(name not like '%keyword%')  \n\n```\n1. like 'abc'  表示字符串=abc的匹配\n2. like '%abc' 表示以abc结尾的字符串匹配\n3. like 'abc%' 表示以abc开头的字符串匹配\n4. like '%abc%'表示包含abc的字符串匹配\n\n```\n\n>正则匹配(a regexp '^a')\n\n```\n1. a regexp '^abc' 表示以abc开头的字符串匹配\n2. a regexp 'abc'  表示包含abc的字符串匹配\n3. a regexp 'abc$' 表示以abc结尾的字符串匹配\n```\n\n### 逻辑运算符\n>与(&&或AND)、或(||或OR)、非(!或NOT)、异或(XOR)\n\n```\n1. &&  只要有一个值为0，结果为0；有值为null，其他都不为0，结果为null；值都不为null与0的结果为1；\n2. ||  值都为0结果为0；值为0或者null结果为null；值存在不为0或者null的结果为1；\n3. !   值为null结果为null；值为0的结果为1；值为非0或null的结果为1；\n4. XOR 值存在null的结果为null；值都是非0或者都是0的结果为0；值存在0跟非0的结果为1；\n```\n\n### 位运算符\n>按位与(&)、按位或(|)、按位取反(~)、按位异或(^)、按位左移(<<)、按位右移(>>)\n\n```\n1. &\t将十进制数转换为二进制数，每个二进制数对应的位上进行与运算，最后转换为十进制数\n\t例：10&5 => 1010&0101 => 0000 => 0\n\t例：10&6 => 1010&0110 => 0010 => 2\n2. |\t将十进制数转换为二进制数，每个二进制数对应的位上进行或运算，最后转换为十进制数\n\t例：10&5 => 1010|0101 => 1111 => 15\n\t例：10&6 => 1010|0110 => 1110 => 14\n3. ~\t将十进制数转换为二进制数，每位都进行取反运算\n\t例：10 => 1010 => 0101 => 18446744073709551605(字节计算结果)\n4. ^\t将十进制数转换为二进制数，每个二进制数对应的位上进行异或运算，最后转换为十进制数\n\t例：10&5 => 1010^0101 => 1111 => 15\n\t例：10&6 => 1010^0110 => 1100 => 12\n5. <<\tm << n 将十进制数m转换为二进制数，按位左移n位，右边补上n个0，最后转换为十进制数\n\t例：10 << 1 => 1010 => 10100 => 20\n5. >>\tm >> n 将十进制数m转换为二进制数，按位右移n位，左边补上n个0，最后转换为十进制数\n\t例：10 >> 1 => 1010 => 0101 => 5\n```\n\n### 运算符优先级\n![image](https://wenku.baidu.com/content/216d3e2926284b73f242336c1eb91a37f11132c9?m=26e2fd787393eaa2973d6c1f478627b5&type=pic&src=04452f9619b2848d6d760be569e87603.jpg)","source":"_posts/mysql_calculate.md","raw":"---\ntitle: MYSQL之运算符操作\ndate: 2018-07-07 19:21:01\ntags: 数据库\ncategories: MySQL\n---\n```\ncreate table if not exists test(\n\tid int(11) not null auto_increment primary key,\n\tnum int(11) null\n)\n```\n### 算术运算符\n>加(+)、减(-)、乘(*)、除(/)、余(%)、除(div)、余(mod)\n\n```\nselect id, num, id+num, id-num, id*num, id/num, id%num, id div num, id mod num from test;\n结果：\nid \tnum \tid+num \tid-num \tid*num \tid/num \tid%num \tid div num \tid mod num\n5  \t2   \t8\t  \t3      \t10     \t2.5    \t1      \t2\t\t\t1\n6   null\tnull\tnull\tnull\tnull\tnull\tnull\t\tnull\nnull 5\t\tnull\tnull\tnull\tnull\tnull\tnull\t\tnull\n```\n\n### 比较运算符\n>大于(>)、小于(<)、等于(=)、不等于(!=或<>)、大于等于(>=)、小于等于(<=)\n\n```\n1. 符合条件的结果为1\n2. 不符合条件的结果为0\n3. 值为NULL的结果为null\n```  \n\n>是null(IS NULL)、不是null(IS NOT NULL)\n\n```\n判断是否为空值可以采用 <=> 进行判断，a<=>0，值为0的结果为1，其他都为0；a<=>null，值为null的结果为1，其他都为0\n```  \n\n>包含(between a and b)  \n>包含(id IN (1,2,3))、不包含(id not in(1,2,3))  \n>模式匹配(name like '%keyword%')、模式不匹配(name not like '%keyword%')  \n\n```\n1. like 'abc'  表示字符串=abc的匹配\n2. like '%abc' 表示以abc结尾的字符串匹配\n3. like 'abc%' 表示以abc开头的字符串匹配\n4. like '%abc%'表示包含abc的字符串匹配\n\n```\n\n>正则匹配(a regexp '^a')\n\n```\n1. a regexp '^abc' 表示以abc开头的字符串匹配\n2. a regexp 'abc'  表示包含abc的字符串匹配\n3. a regexp 'abc$' 表示以abc结尾的字符串匹配\n```\n\n### 逻辑运算符\n>与(&&或AND)、或(||或OR)、非(!或NOT)、异或(XOR)\n\n```\n1. &&  只要有一个值为0，结果为0；有值为null，其他都不为0，结果为null；值都不为null与0的结果为1；\n2. ||  值都为0结果为0；值为0或者null结果为null；值存在不为0或者null的结果为1；\n3. !   值为null结果为null；值为0的结果为1；值为非0或null的结果为1；\n4. XOR 值存在null的结果为null；值都是非0或者都是0的结果为0；值存在0跟非0的结果为1；\n```\n\n### 位运算符\n>按位与(&)、按位或(|)、按位取反(~)、按位异或(^)、按位左移(<<)、按位右移(>>)\n\n```\n1. &\t将十进制数转换为二进制数，每个二进制数对应的位上进行与运算，最后转换为十进制数\n\t例：10&5 => 1010&0101 => 0000 => 0\n\t例：10&6 => 1010&0110 => 0010 => 2\n2. |\t将十进制数转换为二进制数，每个二进制数对应的位上进行或运算，最后转换为十进制数\n\t例：10&5 => 1010|0101 => 1111 => 15\n\t例：10&6 => 1010|0110 => 1110 => 14\n3. ~\t将十进制数转换为二进制数，每位都进行取反运算\n\t例：10 => 1010 => 0101 => 18446744073709551605(字节计算结果)\n4. ^\t将十进制数转换为二进制数，每个二进制数对应的位上进行异或运算，最后转换为十进制数\n\t例：10&5 => 1010^0101 => 1111 => 15\n\t例：10&6 => 1010^0110 => 1100 => 12\n5. <<\tm << n 将十进制数m转换为二进制数，按位左移n位，右边补上n个0，最后转换为十进制数\n\t例：10 << 1 => 1010 => 10100 => 20\n5. >>\tm >> n 将十进制数m转换为二进制数，按位右移n位，左边补上n个0，最后转换为十进制数\n\t例：10 >> 1 => 1010 => 0101 => 5\n```\n\n### 运算符优先级\n![image](https://wenku.baidu.com/content/216d3e2926284b73f242336c1eb91a37f11132c9?m=26e2fd787393eaa2973d6c1f478627b5&type=pic&src=04452f9619b2848d6d760be569e87603.jpg)","slug":"mysql_calculate","published":1,"updated":"2019-04-09T14:29:00.189Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmb6001uvjcg81966qw5","content":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table if not exists test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tnum int(11) null</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><blockquote>\n<p>加(+)、减(-)、乘(*)、除(/)、余(%)、除(div)、余(mod)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id, num, id+num, id-num, id*num, id/num, id%num, id div num, id mod num from test;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">id \tnum \tid+num \tid-num \tid*num \tid/num \tid%num \tid div num \tid mod num</span><br><span class=\"line\">5  \t2   \t8\t  \t3      \t10     \t2.5    \t1      \t2\t\t\t1</span><br><span class=\"line\">6   null\tnull\tnull\tnull\tnull\tnull\tnull\t\tnull</span><br><span class=\"line\">null 5\t\tnull\tnull\tnull\tnull\tnull\tnull\t\tnull</span><br></pre></td></tr></table></figure>\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><blockquote>\n<p>大于(&gt;)、小于(&lt;)、等于(=)、不等于(!=或&lt;&gt;)、大于等于(&gt;=)、小于等于(&lt;=)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 符合条件的结果为1</span><br><span class=\"line\">2. 不符合条件的结果为0</span><br><span class=\"line\">3. 值为NULL的结果为null</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;是null(IS NULL)、不是null(IS NOT NULL)</span><br></pre></td></tr></table></figure>\n<p>判断是否为空值可以采用 &lt;=&gt; 进行判断，a&lt;=&gt;0，值为0的结果为1，其他都为0；a&lt;=&gt;null，值为null的结果为1，其他都为0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;包含(between a and b)  </span><br><span class=\"line\">&gt;包含(id IN (1,2,3))、不包含(id not in(1,2,3))  </span><br><span class=\"line\">&gt;模式匹配(name like &apos;%keyword%&apos;)、模式不匹配(name not like &apos;%keyword%&apos;)</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>like ‘abc’  表示字符串=abc的匹配</li>\n<li>like ‘%abc’ 表示以abc结尾的字符串匹配</li>\n<li>like ‘abc%’ 表示以abc开头的字符串匹配</li>\n<li>like ‘%abc%’表示包含abc的字符串匹配</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;正则匹配(a regexp &apos;^a&apos;)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>a regexp ‘^abc’ 表示以abc开头的字符串匹配</li>\n<li>a regexp ‘abc’  表示包含abc的字符串匹配</li>\n<li><p>a regexp ‘abc$’ 表示以abc结尾的字符串匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 逻辑运算符</span><br><span class=\"line\">&gt;与(&amp;&amp;或AND)、或(||或OR)、非(!或NOT)、异或(XOR)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>&amp;&amp;  只要有一个值为0，结果为0；有值为null，其他都不为0，结果为null；值都不为null与0的结果为1；</p>\n</li>\n<li>||  值都为0结果为0；值为0或者null结果为null；值存在不为0或者null的结果为1；</li>\n<li>!   值为null结果为null；值为0的结果为1；值为非0或null的结果为1；</li>\n<li><p>XOR 值存在null的结果为null；值都是非0或者都是0的结果为0；值存在0跟非0的结果为1；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 位运算符</span><br><span class=\"line\">&gt;按位与(&amp;)、按位或(|)、按位取反(~)、按位异或(^)、按位左移(&lt;&lt;)、按位右移(&gt;&gt;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>&amp;    将十进制数转换为二进制数，每个二进制数对应的位上进行与运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010&amp;0101 =&gt; 0000 =&gt; 0<br> 例：10&amp;6 =&gt; 1010&amp;0110 =&gt; 0010 =&gt; 2</p>\n</li>\n<li>|    将十进制数转换为二进制数，每个二进制数对应的位上进行或运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010|0101 =&gt; 1111 =&gt; 15<br> 例：10&amp;6 =&gt; 1010|0110 =&gt; 1110 =&gt; 14</li>\n<li>~    将十进制数转换为二进制数，每位都进行取反运算<br> 例：10 =&gt; 1010 =&gt; 0101 =&gt; 18446744073709551605(字节计算结果)</li>\n<li>^    将十进制数转换为二进制数，每个二进制数对应的位上进行异或运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010^0101 =&gt; 1111 =&gt; 15<br> 例：10&amp;6 =&gt; 1010^0110 =&gt; 1100 =&gt; 12</li>\n<li>&lt;&lt;    m &lt;&lt; n 将十进制数m转换为二进制数，按位左移n位，右边补上n个0，最后转换为十进制数<br> 例：10 &lt;&lt; 1 =&gt; 1010 =&gt; 10100 =&gt; 20</li>\n<li><blockquote>\n<blockquote>\n<p>   m &gt;&gt; n 将十进制数m转换为二进制数，按位右移n位，左边补上n个0，最后转换为十进制数<br> 例：10 &gt;&gt; 1 =&gt; 1010 =&gt; 0101 =&gt; 5<br><code>`</code></p>\n</blockquote>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><p><img src=\"https://wenku.baidu.com/content/216d3e2926284b73f242336c1eb91a37f11132c9?m=26e2fd787393eaa2973d6c1f478627b5&amp;type=pic&amp;src=04452f9619b2848d6d760be569e87603.jpg\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table if not exists test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tnum int(11) null</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"算术运算符\"><a href=\"#算术运算符\" class=\"headerlink\" title=\"算术运算符\"></a>算术运算符</h3><blockquote>\n<p>加(+)、减(-)、乘(*)、除(/)、余(%)、除(div)、余(mod)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select id, num, id+num, id-num, id*num, id/num, id%num, id div num, id mod num from test;</span><br><span class=\"line\">结果：</span><br><span class=\"line\">id \tnum \tid+num \tid-num \tid*num \tid/num \tid%num \tid div num \tid mod num</span><br><span class=\"line\">5  \t2   \t8\t  \t3      \t10     \t2.5    \t1      \t2\t\t\t1</span><br><span class=\"line\">6   null\tnull\tnull\tnull\tnull\tnull\tnull\t\tnull</span><br><span class=\"line\">null 5\t\tnull\tnull\tnull\tnull\tnull\tnull\t\tnull</span><br></pre></td></tr></table></figure>\n<h3 id=\"比较运算符\"><a href=\"#比较运算符\" class=\"headerlink\" title=\"比较运算符\"></a>比较运算符</h3><blockquote>\n<p>大于(&gt;)、小于(&lt;)、等于(=)、不等于(!=或&lt;&gt;)、大于等于(&gt;=)、小于等于(&lt;=)</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 符合条件的结果为1</span><br><span class=\"line\">2. 不符合条件的结果为0</span><br><span class=\"line\">3. 值为NULL的结果为null</span><br><span class=\"line\">```  </span><br><span class=\"line\"></span><br><span class=\"line\">&gt;是null(IS NULL)、不是null(IS NOT NULL)</span><br></pre></td></tr></table></figure>\n<p>判断是否为空值可以采用 &lt;=&gt; 进行判断，a&lt;=&gt;0，值为0的结果为1，其他都为0；a&lt;=&gt;null，值为null的结果为1，其他都为0<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;包含(between a and b)  </span><br><span class=\"line\">&gt;包含(id IN (1,2,3))、不包含(id not in(1,2,3))  </span><br><span class=\"line\">&gt;模式匹配(name like &apos;%keyword%&apos;)、模式不匹配(name not like &apos;%keyword%&apos;)</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>like ‘abc’  表示字符串=abc的匹配</li>\n<li>like ‘%abc’ 表示以abc结尾的字符串匹配</li>\n<li>like ‘abc%’ 表示以abc开头的字符串匹配</li>\n<li>like ‘%abc%’表示包含abc的字符串匹配</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&gt;正则匹配(a regexp &apos;^a&apos;)</span><br></pre></td></tr></table></figure>\n<ol>\n<li>a regexp ‘^abc’ 表示以abc开头的字符串匹配</li>\n<li>a regexp ‘abc’  表示包含abc的字符串匹配</li>\n<li><p>a regexp ‘abc$’ 表示以abc结尾的字符串匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 逻辑运算符</span><br><span class=\"line\">&gt;与(&amp;&amp;或AND)、或(||或OR)、非(!或NOT)、异或(XOR)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>&amp;&amp;  只要有一个值为0，结果为0；有值为null，其他都不为0，结果为null；值都不为null与0的结果为1；</p>\n</li>\n<li>||  值都为0结果为0；值为0或者null结果为null；值存在不为0或者null的结果为1；</li>\n<li>!   值为null结果为null；值为0的结果为1；值为非0或null的结果为1；</li>\n<li><p>XOR 值存在null的结果为null；值都是非0或者都是0的结果为0；值存在0跟非0的结果为1；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 位运算符</span><br><span class=\"line\">&gt;按位与(&amp;)、按位或(|)、按位取反(~)、按位异或(^)、按位左移(&lt;&lt;)、按位右移(&gt;&gt;)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>&amp;    将十进制数转换为二进制数，每个二进制数对应的位上进行与运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010&amp;0101 =&gt; 0000 =&gt; 0<br> 例：10&amp;6 =&gt; 1010&amp;0110 =&gt; 0010 =&gt; 2</p>\n</li>\n<li>|    将十进制数转换为二进制数，每个二进制数对应的位上进行或运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010|0101 =&gt; 1111 =&gt; 15<br> 例：10&amp;6 =&gt; 1010|0110 =&gt; 1110 =&gt; 14</li>\n<li>~    将十进制数转换为二进制数，每位都进行取反运算<br> 例：10 =&gt; 1010 =&gt; 0101 =&gt; 18446744073709551605(字节计算结果)</li>\n<li>^    将十进制数转换为二进制数，每个二进制数对应的位上进行异或运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010^0101 =&gt; 1111 =&gt; 15<br> 例：10&amp;6 =&gt; 1010^0110 =&gt; 1100 =&gt; 12</li>\n<li>&lt;&lt;    m &lt;&lt; n 将十进制数m转换为二进制数，按位左移n位，右边补上n个0，最后转换为十进制数<br> 例：10 &lt;&lt; 1 =&gt; 1010 =&gt; 10100 =&gt; 20</li>\n<li><blockquote>\n<blockquote>\n<p>   m &gt;&gt; n 将十进制数m转换为二进制数，按位右移n位，左边补上n个0，最后转换为十进制数<br> 例：10 &gt;&gt; 1 =&gt; 1010 =&gt; 0101 =&gt; 5<br><code>`</code></p>\n</blockquote>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"运算符优先级\"><a href=\"#运算符优先级\" class=\"headerlink\" title=\"运算符优先级\"></a>运算符优先级</h3><p><img src=\"https://wenku.baidu.com/content/216d3e2926284b73f242336c1eb91a37f11132c9?m=26e2fd787393eaa2973d6c1f478627b5&amp;type=pic&amp;src=04452f9619b2848d6d760be569e87603.jpg\" alt=\"image\"></p>\n"},{"title":"MYSQL之操作数据（增删改查）","date":"2018-07-07T10:21:01.000Z","_content":"### 数据表结构\n```\n$sql = `\n\tcreate table if not exists table_test(\n\t\tid int(11) not null auto_increment primary key,\n\t\tname varchar(30) not null,\n\t\tsex tinyint(1) null\n\t)\n`;\n```\n\n### 插入操作\n```\n// insert value 插入\n$sql = \"insert into table_test values(1, 'name1', 1)\";\n// 插入部分字段\n$sql = \"insert into table_test (name,sex) values('name2', 2)\";\n// 插入多条语句\n$sql = \"insert into table_test (name,sex) values('name1', 1), ('name2', 2)\";\n// insert set 插入\n$sql = \"insert into table_test set name='name1',sex=1\";\n// insert select插入\n$sql = \"insert into table_test (name,sex) select name,sex from table_test where id=1\";\n```\n\n###  修改操作\n```\n// update set修改\n$sql = \"update table_test set name='name2' where id=1\";\n```\n\n### 删除操作\n```\n// delete where删除\n$sql = \"delete from table_test where id=1\";\n// truncate table删除表所有行数据,且auto_increment 重新计数\n$sql = \"truncate table table_test\";\n```\n\n### 查询操作\n> 条件顺序如下： group by ... having ... order by ... limit ...\n\n```\n// 普通查询\n$sql = \"select * from table_test\";\n// in 查询\n$sql = \"select * from table_test where name in ('name1', 'name2')\";\n// distinct 查询某个字段去重(多字段表示多字段合并的去重 distinct name,sex)\n$sql = \"select distinct name from table_test\";\n// group_concat(field1) group by field2(按field2分组后，field1的值用，隔开)\n$sql = \"select group_concat(money),order_id from table_test group by order_id\";\n```\n\n### 聚合查询\n> count(*) 查询结果总数集  \nsum(field) 计算字段求和总值  \navg(field) 计算字段平均值  \nmax(field) 计算字段最大值\nmin(field) 计算字段最小值","source":"_posts/mysql_dba.md","raw":"---\ntitle: MYSQL之操作数据（增删改查）\ndate: 2018-07-07 18:21:01\ntags: 数据库\ncategories: MySQL\n---\n### 数据表结构\n```\n$sql = `\n\tcreate table if not exists table_test(\n\t\tid int(11) not null auto_increment primary key,\n\t\tname varchar(30) not null,\n\t\tsex tinyint(1) null\n\t)\n`;\n```\n\n### 插入操作\n```\n// insert value 插入\n$sql = \"insert into table_test values(1, 'name1', 1)\";\n// 插入部分字段\n$sql = \"insert into table_test (name,sex) values('name2', 2)\";\n// 插入多条语句\n$sql = \"insert into table_test (name,sex) values('name1', 1), ('name2', 2)\";\n// insert set 插入\n$sql = \"insert into table_test set name='name1',sex=1\";\n// insert select插入\n$sql = \"insert into table_test (name,sex) select name,sex from table_test where id=1\";\n```\n\n###  修改操作\n```\n// update set修改\n$sql = \"update table_test set name='name2' where id=1\";\n```\n\n### 删除操作\n```\n// delete where删除\n$sql = \"delete from table_test where id=1\";\n// truncate table删除表所有行数据,且auto_increment 重新计数\n$sql = \"truncate table table_test\";\n```\n\n### 查询操作\n> 条件顺序如下： group by ... having ... order by ... limit ...\n\n```\n// 普通查询\n$sql = \"select * from table_test\";\n// in 查询\n$sql = \"select * from table_test where name in ('name1', 'name2')\";\n// distinct 查询某个字段去重(多字段表示多字段合并的去重 distinct name,sex)\n$sql = \"select distinct name from table_test\";\n// group_concat(field1) group by field2(按field2分组后，field1的值用，隔开)\n$sql = \"select group_concat(money),order_id from table_test group by order_id\";\n```\n\n### 聚合查询\n> count(*) 查询结果总数集  \nsum(field) 计算字段求和总值  \navg(field) 计算字段平均值  \nmax(field) 计算字段最大值\nmin(field) 计算字段最小值","slug":"mysql_dba","published":1,"updated":"2019-04-09T14:29:22.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmb8001zvjcgagzolvo6","content":"<h3 id=\"数据表结构\"><a href=\"#数据表结构\" class=\"headerlink\" title=\"数据表结构\"></a>数据表结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = `</span><br><span class=\"line\">\tcreate table if not exists table_test(</span><br><span class=\"line\">\t\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\t\tname varchar(30) not null,</span><br><span class=\"line\">\t\tsex tinyint(1) null</span><br><span class=\"line\">\t)</span><br><span class=\"line\">`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// insert value 插入</span><br><span class=\"line\">$sql = &quot;insert into table_test values(1, &apos;name1&apos;, 1)&quot;;</span><br><span class=\"line\">// 插入部分字段</span><br><span class=\"line\">$sql = &quot;insert into table_test (name,sex) values(&apos;name2&apos;, 2)&quot;;</span><br><span class=\"line\">// 插入多条语句</span><br><span class=\"line\">$sql = &quot;insert into table_test (name,sex) values(&apos;name1&apos;, 1), (&apos;name2&apos;, 2)&quot;;</span><br><span class=\"line\">// insert set 插入</span><br><span class=\"line\">$sql = &quot;insert into table_test set name=&apos;name1&apos;,sex=1&quot;;</span><br><span class=\"line\">// insert select插入</span><br><span class=\"line\">$sql = &quot;insert into table_test (name,sex) select name,sex from table_test where id=1&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改操作\"><a href=\"#修改操作\" class=\"headerlink\" title=\"修改操作\"></a>修改操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// update set修改</span><br><span class=\"line\">$sql = &quot;update table_test set name=&apos;name2&apos; where id=1&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// delete where删除</span><br><span class=\"line\">$sql = &quot;delete from table_test where id=1&quot;;</span><br><span class=\"line\">// truncate table删除表所有行数据,且auto_increment 重新计数</span><br><span class=\"line\">$sql = &quot;truncate table table_test&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h3><blockquote>\n<p>条件顺序如下： group by … having … order by … limit …</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 普通查询</span><br><span class=\"line\">$sql = &quot;select * from table_test&quot;;</span><br><span class=\"line\">// in 查询</span><br><span class=\"line\">$sql = &quot;select * from table_test where name in (&apos;name1&apos;, &apos;name2&apos;)&quot;;</span><br><span class=\"line\">// distinct 查询某个字段去重(多字段表示多字段合并的去重 distinct name,sex)</span><br><span class=\"line\">$sql = &quot;select distinct name from table_test&quot;;</span><br><span class=\"line\">// group_concat(field1) group by field2(按field2分组后，field1的值用，隔开)</span><br><span class=\"line\">$sql = &quot;select group_concat(money),order_id from table_test group by order_id&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h3><blockquote>\n<p>count(*) 查询结果总数集<br>sum(field) 计算字段求和总值<br>avg(field) 计算字段平均值<br>max(field) 计算字段最大值<br>min(field) 计算字段最小值</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"数据表结构\"><a href=\"#数据表结构\" class=\"headerlink\" title=\"数据表结构\"></a>数据表结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$sql = `</span><br><span class=\"line\">\tcreate table if not exists table_test(</span><br><span class=\"line\">\t\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\t\tname varchar(30) not null,</span><br><span class=\"line\">\t\tsex tinyint(1) null</span><br><span class=\"line\">\t)</span><br><span class=\"line\">`;</span><br></pre></td></tr></table></figure>\n<h3 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// insert value 插入</span><br><span class=\"line\">$sql = &quot;insert into table_test values(1, &apos;name1&apos;, 1)&quot;;</span><br><span class=\"line\">// 插入部分字段</span><br><span class=\"line\">$sql = &quot;insert into table_test (name,sex) values(&apos;name2&apos;, 2)&quot;;</span><br><span class=\"line\">// 插入多条语句</span><br><span class=\"line\">$sql = &quot;insert into table_test (name,sex) values(&apos;name1&apos;, 1), (&apos;name2&apos;, 2)&quot;;</span><br><span class=\"line\">// insert set 插入</span><br><span class=\"line\">$sql = &quot;insert into table_test set name=&apos;name1&apos;,sex=1&quot;;</span><br><span class=\"line\">// insert select插入</span><br><span class=\"line\">$sql = &quot;insert into table_test (name,sex) select name,sex from table_test where id=1&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改操作\"><a href=\"#修改操作\" class=\"headerlink\" title=\"修改操作\"></a>修改操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// update set修改</span><br><span class=\"line\">$sql = &quot;update table_test set name=&apos;name2&apos; where id=1&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// delete where删除</span><br><span class=\"line\">$sql = &quot;delete from table_test where id=1&quot;;</span><br><span class=\"line\">// truncate table删除表所有行数据,且auto_increment 重新计数</span><br><span class=\"line\">$sql = &quot;truncate table table_test&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查询操作\"><a href=\"#查询操作\" class=\"headerlink\" title=\"查询操作\"></a>查询操作</h3><blockquote>\n<p>条件顺序如下： group by … having … order by … limit …</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 普通查询</span><br><span class=\"line\">$sql = &quot;select * from table_test&quot;;</span><br><span class=\"line\">// in 查询</span><br><span class=\"line\">$sql = &quot;select * from table_test where name in (&apos;name1&apos;, &apos;name2&apos;)&quot;;</span><br><span class=\"line\">// distinct 查询某个字段去重(多字段表示多字段合并的去重 distinct name,sex)</span><br><span class=\"line\">$sql = &quot;select distinct name from table_test&quot;;</span><br><span class=\"line\">// group_concat(field1) group by field2(按field2分组后，field1的值用，隔开)</span><br><span class=\"line\">$sql = &quot;select group_concat(money),order_id from table_test group by order_id&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"聚合查询\"><a href=\"#聚合查询\" class=\"headerlink\" title=\"聚合查询\"></a>聚合查询</h3><blockquote>\n<p>count(*) 查询结果总数集<br>sum(field) 计算字段求和总值<br>avg(field) 计算字段平均值<br>max(field) 计算字段最大值<br>min(field) 计算字段最小值</p>\n</blockquote>\n"},{"title":"MYSQL之流程控制语句","date":"2018-07-07T12:21:01.000Z","_content":">if、case、loop、while、iterate、leave\n\n### if\n> 注意 分号不能省略\n\n```\nIF CONDITION THEN\n\t...;\nELSEIF CONDITION THEN\n\t...;\nELSE\n\t...;\nEND IF;\n```\n\n```\n调用：call do_if(10)\n\nCREATE PROCEDURE do_if(in x int)\nBEGIN\nIF x IS NULL THEN\n\tselect 100;\nELSEIF x=0 THEN\n\tselect 101;\nELSE\n\tselect 102;\nEND IF;\nEND\n```\n\n### case\n> 注意 分号不能省略\n\n```\nCASE value\nWHEN value THEN ...;\nWHEN value THEN ...;\nELSE ...;\nEND CASE;\n```\n\n```\n调用：call do_case(10)\n\nCREATE PROCEDURE do_case(in x int)\nBEGIN\nCASE x\nWHEN x IS NULL THEN SELECT 100;\nWHEN x = 0 THEN SELECT 101;\nELSE SELECT 102;\nEND CASE;\nEND\n```\n\n### while\n> 注意 分号不能省略\n\n```\nWHILE CONDITION DO\n\t...;\nEND WHILE;\n```\n\n```\n调用：\n\tcall do_while(@sum)\n\tselect @sum\n\nCREATE PROCEDURE do_while(out x int)\nBEGIN\nDECLARE i int DEFAULT 1;\nDECLARE j int DEFAULT 0;\nWHILE i<100 DO\n\tset j=j+i;\n\tset i=i+1;\nEND WHILE;\nSET x=j;\nEND\n```\n\n### loop\n> 注意 分号不能省略  \nLEAVE loop_label 退出 定义名称为loop_label的loop退出循环\n\n```\nLOOP\n\t...\nEND LOOP;\n```\n\n```\n调用：\n\tcall do_loop(@sum)\n\tselect @sum\n\nCREATE PROCEDURE do_loop(out x int)\nBEGIN\nDECLARE i int DEFAULT 1;\nDECLARE j int DEFAULT 0;\nloop_label:LOOP\n\tset j=j+i;\n\tset i=i+1;\n\tIF i>10 THEN\n\t\tLEAVE loop_label;\n\tEND IF;\nEND LOOP;\nset x=j;\nEND\n```\n\n### repeat\n> 注意 分号不能省略  \n\n```\nREPEAT\n\t...\nUNTIL CONDITION\nEND REPEAT;\n```\n\n```\n调用：\n\tcall do_repeat(@sum)\n\tselect @sum\n\nCREATE PROCEDURE do_repeat(out x int)\nBEGIN\nDECLARE i int DEFAULT 1;\nDECLARE j int DEFAULT 0;\nREPEAT\nset j=j+i;\nset i=i+1;\nUNTIL i>10\nEND REPEAT;\nset x=j;\nEND\n```","source":"_posts/mysql_condition.md","raw":"---\ntitle: MYSQL之流程控制语句\ndate: 2018-07-07 20:21:01\ntags: 数据库\ncategories: MySQL\n---\n>if、case、loop、while、iterate、leave\n\n### if\n> 注意 分号不能省略\n\n```\nIF CONDITION THEN\n\t...;\nELSEIF CONDITION THEN\n\t...;\nELSE\n\t...;\nEND IF;\n```\n\n```\n调用：call do_if(10)\n\nCREATE PROCEDURE do_if(in x int)\nBEGIN\nIF x IS NULL THEN\n\tselect 100;\nELSEIF x=0 THEN\n\tselect 101;\nELSE\n\tselect 102;\nEND IF;\nEND\n```\n\n### case\n> 注意 分号不能省略\n\n```\nCASE value\nWHEN value THEN ...;\nWHEN value THEN ...;\nELSE ...;\nEND CASE;\n```\n\n```\n调用：call do_case(10)\n\nCREATE PROCEDURE do_case(in x int)\nBEGIN\nCASE x\nWHEN x IS NULL THEN SELECT 100;\nWHEN x = 0 THEN SELECT 101;\nELSE SELECT 102;\nEND CASE;\nEND\n```\n\n### while\n> 注意 分号不能省略\n\n```\nWHILE CONDITION DO\n\t...;\nEND WHILE;\n```\n\n```\n调用：\n\tcall do_while(@sum)\n\tselect @sum\n\nCREATE PROCEDURE do_while(out x int)\nBEGIN\nDECLARE i int DEFAULT 1;\nDECLARE j int DEFAULT 0;\nWHILE i<100 DO\n\tset j=j+i;\n\tset i=i+1;\nEND WHILE;\nSET x=j;\nEND\n```\n\n### loop\n> 注意 分号不能省略  \nLEAVE loop_label 退出 定义名称为loop_label的loop退出循环\n\n```\nLOOP\n\t...\nEND LOOP;\n```\n\n```\n调用：\n\tcall do_loop(@sum)\n\tselect @sum\n\nCREATE PROCEDURE do_loop(out x int)\nBEGIN\nDECLARE i int DEFAULT 1;\nDECLARE j int DEFAULT 0;\nloop_label:LOOP\n\tset j=j+i;\n\tset i=i+1;\n\tIF i>10 THEN\n\t\tLEAVE loop_label;\n\tEND IF;\nEND LOOP;\nset x=j;\nEND\n```\n\n### repeat\n> 注意 分号不能省略  \n\n```\nREPEAT\n\t...\nUNTIL CONDITION\nEND REPEAT;\n```\n\n```\n调用：\n\tcall do_repeat(@sum)\n\tselect @sum\n\nCREATE PROCEDURE do_repeat(out x int)\nBEGIN\nDECLARE i int DEFAULT 1;\nDECLARE j int DEFAULT 0;\nREPEAT\nset j=j+i;\nset i=i+1;\nUNTIL i>10\nEND REPEAT;\nset x=j;\nEND\n```","slug":"mysql_condition","published":1,"updated":"2019-04-09T14:28:30.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmb80021vjcg35bbdf8p","content":"<blockquote>\n<p>if、case、loop、while、iterate、leave</p>\n</blockquote>\n<h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h3><blockquote>\n<p>注意 分号不能省略</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IF CONDITION THEN</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">ELSEIF CONDITION THEN</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">ELSE</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">END IF;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：call do_if(10)</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_if(in x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">IF x IS NULL THEN</span><br><span class=\"line\">\tselect 100;</span><br><span class=\"line\">ELSEIF x=0 THEN</span><br><span class=\"line\">\tselect 101;</span><br><span class=\"line\">ELSE</span><br><span class=\"line\">\tselect 102;</span><br><span class=\"line\">END IF;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h3><blockquote>\n<p>注意 分号不能省略</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CASE value</span><br><span class=\"line\">WHEN value THEN ...;</span><br><span class=\"line\">WHEN value THEN ...;</span><br><span class=\"line\">ELSE ...;</span><br><span class=\"line\">END CASE;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：call do_case(10)</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_case(in x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">CASE x</span><br><span class=\"line\">WHEN x IS NULL THEN SELECT 100;</span><br><span class=\"line\">WHEN x = 0 THEN SELECT 101;</span><br><span class=\"line\">ELSE SELECT 102;</span><br><span class=\"line\">END CASE;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><blockquote>\n<p>注意 分号不能省略</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHILE CONDITION DO</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">END WHILE;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：</span><br><span class=\"line\">\tcall do_while(@sum)</span><br><span class=\"line\">\tselect @sum</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_while(out x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">DECLARE i int DEFAULT 1;</span><br><span class=\"line\">DECLARE j int DEFAULT 0;</span><br><span class=\"line\">WHILE i&lt;100 DO</span><br><span class=\"line\">\tset j=j+i;</span><br><span class=\"line\">\tset i=i+1;</span><br><span class=\"line\">END WHILE;</span><br><span class=\"line\">SET x=j;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"loop\"><a href=\"#loop\" class=\"headerlink\" title=\"loop\"></a>loop</h3><blockquote>\n<p>注意 分号不能省略<br>LEAVE loop_label 退出 定义名称为loop_label的loop退出循环</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOOP</span><br><span class=\"line\">\t...</span><br><span class=\"line\">END LOOP;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：</span><br><span class=\"line\">\tcall do_loop(@sum)</span><br><span class=\"line\">\tselect @sum</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_loop(out x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">DECLARE i int DEFAULT 1;</span><br><span class=\"line\">DECLARE j int DEFAULT 0;</span><br><span class=\"line\">loop_label:LOOP</span><br><span class=\"line\">\tset j=j+i;</span><br><span class=\"line\">\tset i=i+1;</span><br><span class=\"line\">\tIF i&gt;10 THEN</span><br><span class=\"line\">\t\tLEAVE loop_label;</span><br><span class=\"line\">\tEND IF;</span><br><span class=\"line\">END LOOP;</span><br><span class=\"line\">set x=j;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h3><blockquote>\n<p>注意 分号不能省略  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPEAT</span><br><span class=\"line\">\t...</span><br><span class=\"line\">UNTIL CONDITION</span><br><span class=\"line\">END REPEAT;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：</span><br><span class=\"line\">\tcall do_repeat(@sum)</span><br><span class=\"line\">\tselect @sum</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_repeat(out x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">DECLARE i int DEFAULT 1;</span><br><span class=\"line\">DECLARE j int DEFAULT 0;</span><br><span class=\"line\">REPEAT</span><br><span class=\"line\">set j=j+i;</span><br><span class=\"line\">set i=i+1;</span><br><span class=\"line\">UNTIL i&gt;10</span><br><span class=\"line\">END REPEAT;</span><br><span class=\"line\">set x=j;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>if、case、loop、while、iterate、leave</p>\n</blockquote>\n<h3 id=\"if\"><a href=\"#if\" class=\"headerlink\" title=\"if\"></a>if</h3><blockquote>\n<p>注意 分号不能省略</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IF CONDITION THEN</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">ELSEIF CONDITION THEN</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">ELSE</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">END IF;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：call do_if(10)</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_if(in x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">IF x IS NULL THEN</span><br><span class=\"line\">\tselect 100;</span><br><span class=\"line\">ELSEIF x=0 THEN</span><br><span class=\"line\">\tselect 101;</span><br><span class=\"line\">ELSE</span><br><span class=\"line\">\tselect 102;</span><br><span class=\"line\">END IF;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h3><blockquote>\n<p>注意 分号不能省略</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CASE value</span><br><span class=\"line\">WHEN value THEN ...;</span><br><span class=\"line\">WHEN value THEN ...;</span><br><span class=\"line\">ELSE ...;</span><br><span class=\"line\">END CASE;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：call do_case(10)</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_case(in x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">CASE x</span><br><span class=\"line\">WHEN x IS NULL THEN SELECT 100;</span><br><span class=\"line\">WHEN x = 0 THEN SELECT 101;</span><br><span class=\"line\">ELSE SELECT 102;</span><br><span class=\"line\">END CASE;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"while\"><a href=\"#while\" class=\"headerlink\" title=\"while\"></a>while</h3><blockquote>\n<p>注意 分号不能省略</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WHILE CONDITION DO</span><br><span class=\"line\">\t...;</span><br><span class=\"line\">END WHILE;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：</span><br><span class=\"line\">\tcall do_while(@sum)</span><br><span class=\"line\">\tselect @sum</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_while(out x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">DECLARE i int DEFAULT 1;</span><br><span class=\"line\">DECLARE j int DEFAULT 0;</span><br><span class=\"line\">WHILE i&lt;100 DO</span><br><span class=\"line\">\tset j=j+i;</span><br><span class=\"line\">\tset i=i+1;</span><br><span class=\"line\">END WHILE;</span><br><span class=\"line\">SET x=j;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"loop\"><a href=\"#loop\" class=\"headerlink\" title=\"loop\"></a>loop</h3><blockquote>\n<p>注意 分号不能省略<br>LEAVE loop_label 退出 定义名称为loop_label的loop退出循环</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LOOP</span><br><span class=\"line\">\t...</span><br><span class=\"line\">END LOOP;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：</span><br><span class=\"line\">\tcall do_loop(@sum)</span><br><span class=\"line\">\tselect @sum</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_loop(out x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">DECLARE i int DEFAULT 1;</span><br><span class=\"line\">DECLARE j int DEFAULT 0;</span><br><span class=\"line\">loop_label:LOOP</span><br><span class=\"line\">\tset j=j+i;</span><br><span class=\"line\">\tset i=i+1;</span><br><span class=\"line\">\tIF i&gt;10 THEN</span><br><span class=\"line\">\t\tLEAVE loop_label;</span><br><span class=\"line\">\tEND IF;</span><br><span class=\"line\">END LOOP;</span><br><span class=\"line\">set x=j;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<h3 id=\"repeat\"><a href=\"#repeat\" class=\"headerlink\" title=\"repeat\"></a>repeat</h3><blockquote>\n<p>注意 分号不能省略  </p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REPEAT</span><br><span class=\"line\">\t...</span><br><span class=\"line\">UNTIL CONDITION</span><br><span class=\"line\">END REPEAT;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">调用：</span><br><span class=\"line\">\tcall do_repeat(@sum)</span><br><span class=\"line\">\tselect @sum</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE PROCEDURE do_repeat(out x int)</span><br><span class=\"line\">BEGIN</span><br><span class=\"line\">DECLARE i int DEFAULT 1;</span><br><span class=\"line\">DECLARE j int DEFAULT 0;</span><br><span class=\"line\">REPEAT</span><br><span class=\"line\">set j=j+i;</span><br><span class=\"line\">set i=i+1;</span><br><span class=\"line\">UNTIL i&gt;10</span><br><span class=\"line\">END REPEAT;</span><br><span class=\"line\">set x=j;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>"},{"title":"MYSQL之操作数据表","date":"2018-07-07T09:21:01.000Z","_content":"> 文中均使用 `table_test` 作为表名\n\n### 创建数据表\n```\ncreate table if not exists table_test(\n    id int(11) auto_increment primary key,\n    name varchar(30) not null comment '名称',\n    password varchar(30) not null comment '密码'\n) comment=\"表名\";\n```\n\n### 查看表结构\n```\nshow columns from table_test;\n或者\ndescribe table_test;\n或者\ndesc table_test;\n```\n\n### 修改表结构\n#### 1. 添加新字段及修改存在字段\n```\nalter table table_test\n    add sex enum('male', 'female') not null default 'male' comment '性别',\n    modify name varchar(40);\n```\n#### 2. 修改表字段名\n```\nalter table table_test\n    change column date create_time date null default '0000-00-00';\n```\n#### 3. 删除字段\n```\nalter table table_test \n    drop create_time;\n```\n#### 4. 修改表名\n```\nalter table table_test \n    rename as table_test_new;\n```\n\n### 重命名表\n```\nrename table table_test_new to table_test;\n```\n\n### 复制表\n#### 1. 复制表结构\n```\ncreate table table_test_copy1 like table_test;\n```\n#### 2. 复制表结构及数据\n```\ncreate table table_test_copy2 as select * from table_test;\n```\n#### 3. 复制部分表结构及数据\n>只复制了`id`,`name`两个字段的表结构\n```\ncreate table table_test_copy3 as select id,name from table_test'\n```\n\n### 删除表\n```\ndrop table if not exists table_test;\n```","source":"_posts/mysql_operation.md","raw":"---\ntitle: MYSQL之操作数据表\ndate: 2018-07-07 17:21:01\ntags: 数据库\ncategories: MySQL\n---\n> 文中均使用 `table_test` 作为表名\n\n### 创建数据表\n```\ncreate table if not exists table_test(\n    id int(11) auto_increment primary key,\n    name varchar(30) not null comment '名称',\n    password varchar(30) not null comment '密码'\n) comment=\"表名\";\n```\n\n### 查看表结构\n```\nshow columns from table_test;\n或者\ndescribe table_test;\n或者\ndesc table_test;\n```\n\n### 修改表结构\n#### 1. 添加新字段及修改存在字段\n```\nalter table table_test\n    add sex enum('male', 'female') not null default 'male' comment '性别',\n    modify name varchar(40);\n```\n#### 2. 修改表字段名\n```\nalter table table_test\n    change column date create_time date null default '0000-00-00';\n```\n#### 3. 删除字段\n```\nalter table table_test \n    drop create_time;\n```\n#### 4. 修改表名\n```\nalter table table_test \n    rename as table_test_new;\n```\n\n### 重命名表\n```\nrename table table_test_new to table_test;\n```\n\n### 复制表\n#### 1. 复制表结构\n```\ncreate table table_test_copy1 like table_test;\n```\n#### 2. 复制表结构及数据\n```\ncreate table table_test_copy2 as select * from table_test;\n```\n#### 3. 复制部分表结构及数据\n>只复制了`id`,`name`两个字段的表结构\n```\ncreate table table_test_copy3 as select id,name from table_test'\n```\n\n### 删除表\n```\ndrop table if not exists table_test;\n```","slug":"mysql_operation","published":1,"updated":"2019-04-09T14:29:44.651Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmba0025vjcg8x52zmot","content":"<blockquote>\n<p>文中均使用 <code>table_test</code> 作为表名</p>\n</blockquote>\n<h3 id=\"创建数据表\"><a href=\"#创建数据表\" class=\"headerlink\" title=\"创建数据表\"></a>创建数据表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">    id int(11) auto_increment primary key,</span><br><span class=\"line\">    name varchar(30) not null comment &apos;名称&apos;,</span><br><span class=\"line\">    password varchar(30) not null comment &apos;密码&apos;</span><br><span class=\"line\">) comment=&quot;表名&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show columns from table_test;</span><br><span class=\"line\">或者</span><br><span class=\"line\">describe table_test;</span><br><span class=\"line\">或者</span><br><span class=\"line\">desc table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改表结构\"><a href=\"#修改表结构\" class=\"headerlink\" title=\"修改表结构\"></a>修改表结构</h3><h4 id=\"1-添加新字段及修改存在字段\"><a href=\"#1-添加新字段及修改存在字段\" class=\"headerlink\" title=\"1. 添加新字段及修改存在字段\"></a>1. 添加新字段及修改存在字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_test</span><br><span class=\"line\">    add sex enum(&apos;male&apos;, &apos;female&apos;) not null default &apos;male&apos; comment &apos;性别&apos;,</span><br><span class=\"line\">    modify name varchar(40);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-修改表字段名\"><a href=\"#2-修改表字段名\" class=\"headerlink\" title=\"2. 修改表字段名\"></a>2. 修改表字段名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_test</span><br><span class=\"line\">    change column date create_time date null default &apos;0000-00-00&apos;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-删除字段\"><a href=\"#3-删除字段\" class=\"headerlink\" title=\"3. 删除字段\"></a>3. 删除字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_test </span><br><span class=\"line\">    drop create_time;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-修改表名\"><a href=\"#4-修改表名\" class=\"headerlink\" title=\"4. 修改表名\"></a>4. 修改表名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_test </span><br><span class=\"line\">    rename as table_test_new;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名表\"><a href=\"#重命名表\" class=\"headerlink\" title=\"重命名表\"></a>重命名表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename table table_test_new to table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复制表\"><a href=\"#复制表\" class=\"headerlink\" title=\"复制表\"></a>复制表</h3><h4 id=\"1-复制表结构\"><a href=\"#1-复制表结构\" class=\"headerlink\" title=\"1. 复制表结构\"></a>1. 复制表结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_test_copy1 like table_test;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-复制表结构及数据\"><a href=\"#2-复制表结构及数据\" class=\"headerlink\" title=\"2. 复制表结构及数据\"></a>2. 复制表结构及数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_test_copy2 as select * from table_test;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-复制部分表结构及数据\"><a href=\"#3-复制部分表结构及数据\" class=\"headerlink\" title=\"3. 复制部分表结构及数据\"></a>3. 复制部分表结构及数据</h4><blockquote>\n<p>只复制了<code>id</code>,<code>name</code>两个字段的表结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_test_copy3 as select id,name from table_test&apos;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"删除表\"><a href=\"#删除表\" class=\"headerlink\" title=\"删除表\"></a>删除表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop table if not exists table_test;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>文中均使用 <code>table_test</code> 作为表名</p>\n</blockquote>\n<h3 id=\"创建数据表\"><a href=\"#创建数据表\" class=\"headerlink\" title=\"创建数据表\"></a>创建数据表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">    id int(11) auto_increment primary key,</span><br><span class=\"line\">    name varchar(30) not null comment &apos;名称&apos;,</span><br><span class=\"line\">    password varchar(30) not null comment &apos;密码&apos;</span><br><span class=\"line\">) comment=&quot;表名&quot;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看表结构\"><a href=\"#查看表结构\" class=\"headerlink\" title=\"查看表结构\"></a>查看表结构</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show columns from table_test;</span><br><span class=\"line\">或者</span><br><span class=\"line\">describe table_test;</span><br><span class=\"line\">或者</span><br><span class=\"line\">desc table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改表结构\"><a href=\"#修改表结构\" class=\"headerlink\" title=\"修改表结构\"></a>修改表结构</h3><h4 id=\"1-添加新字段及修改存在字段\"><a href=\"#1-添加新字段及修改存在字段\" class=\"headerlink\" title=\"1. 添加新字段及修改存在字段\"></a>1. 添加新字段及修改存在字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_test</span><br><span class=\"line\">    add sex enum(&apos;male&apos;, &apos;female&apos;) not null default &apos;male&apos; comment &apos;性别&apos;,</span><br><span class=\"line\">    modify name varchar(40);</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-修改表字段名\"><a href=\"#2-修改表字段名\" class=\"headerlink\" title=\"2. 修改表字段名\"></a>2. 修改表字段名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_test</span><br><span class=\"line\">    change column date create_time date null default &apos;0000-00-00&apos;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-删除字段\"><a href=\"#3-删除字段\" class=\"headerlink\" title=\"3. 删除字段\"></a>3. 删除字段</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_test </span><br><span class=\"line\">    drop create_time;</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-修改表名\"><a href=\"#4-修改表名\" class=\"headerlink\" title=\"4. 修改表名\"></a>4. 修改表名</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_test </span><br><span class=\"line\">    rename as table_test_new;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重命名表\"><a href=\"#重命名表\" class=\"headerlink\" title=\"重命名表\"></a>重命名表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rename table table_test_new to table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"复制表\"><a href=\"#复制表\" class=\"headerlink\" title=\"复制表\"></a>复制表</h3><h4 id=\"1-复制表结构\"><a href=\"#1-复制表结构\" class=\"headerlink\" title=\"1. 复制表结构\"></a>1. 复制表结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_test_copy1 like table_test;</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-复制表结构及数据\"><a href=\"#2-复制表结构及数据\" class=\"headerlink\" title=\"2. 复制表结构及数据\"></a>2. 复制表结构及数据</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_test_copy2 as select * from table_test;</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-复制部分表结构及数据\"><a href=\"#3-复制部分表结构及数据\" class=\"headerlink\" title=\"3. 复制部分表结构及数据\"></a>3. 复制部分表结构及数据</h4><blockquote>\n<p>只复制了<code>id</code>,<code>name</code>两个字段的表结构<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table table_test_copy3 as select id,name from table_test&apos;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"删除表\"><a href=\"#删除表\" class=\"headerlink\" title=\"删除表\"></a>删除表</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop table if not exists table_test;</span><br></pre></td></tr></table></figure>"},{"title":"MYSQL之数据表级联操作-数据完整性约束","date":"2018-07-15T12:21:01.000Z","_content":"### 外键约束\n>目前mysql只有InnoDB存储引擎支持外键约束\n>1. column_name 当前表外键字段名\n>2. table_name 外键表\n>3. index_column_name 外键所在外键表中字段名\n>4. ON DELETE 删除  ON UPDATE 更新\n>5. reference_option语法格式为：（没设置时候，默认两个都指定 RESTRICT）  \n\t当删除或更新外键所在外键表的数据时候   \n\tRESTRICT      限制策略，系统不删除或更新外键当前表的数据  \n\tCASCADE    \t  级联策略，自动删除或更新外键当前表的数据  \n\tSET FULL \t  置空策略，设置外键当前表的数据外键列数据为NULL，需要提前设置外键列未被限制 NOT NULL  \n\tNO ACTION \t  不采取实施策略，系统不删除或更新外键当前表的数据，与 RESTRICT 一致\n\n\n```\nFOREIGN KEY ( column_name [(length)] [ASC | DESC] ) \nREFERENCES table_name(index_column_name)\n[MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]\n[ON DELETE reference_option]\n[ON UPDATE reference_option]\n```\n\n#### 创建表，关联外键\n```\n// 创建 班级表\ncreate table if not exists class(\n\tid int(11) not null auto_increment,\n\tname varchar(30) not null,\n\tprimary key (id)\n) ENGINE=InnoDB default charset=utf8;\n\n// 创建学生表，外键 班级id class_id，级联删除及更新\ncreate table if not exists student(\n\tid int(11) not null auto_increment,\n\tname varchar(30) not null,\n\tclass_id int(11) not null,\n\tprimary key(id),\n\tindex(class_id),\n\tforeign key (class_id) references class(id) on delete cascade on update cascade\n) ENGINE=InnoDB default charset=utf8;\n```\n\n\n#### 插入数据操作\n```\n//插入数据\ninsert into class(name) values('one'), ('two'), ('three');\n// 生成 id 1,2,3\n\ninsert into student(class_id,name) values(1, 'lili');\ninsert into student(class_id,name) values(2, 'lili');\ninsert into student(class_id,name) values(2, 'lili');\ninsert into student(class_id,name) values(3, 'lili');\n\n// 插入失败，因为班级表中没有id =10的数据\ninsert into student(class_id,name) values(10, 'lili');\n```\n\n#### 更新数据操作\n```\n//更新数据\nupdate class set id=5 where id=2;\n//此时 学生表中 sid=2的数据同步更新为了5\n```\n\n#### 删除数据操作\n```\n//删除数据\ndelete from class where id=1;\n//此时 学生表中 sid=1的数据同步删除了\n```\n\n\n### 主键\n> 一个表中有且只有一个主键\n\n```\n// 单字段主键\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null\n) engine=InnoDB default charset=utf8;\n\n// 复合字段主键\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment,\n\tname varchar(30) not null,\n\tprimary key(id, name)\n) engine=InnoDB default charset=utf8;\n```\n\n### 候选键\n> 一个表中可以存在多个候选键  \nUNIQUE 来表示\n\n```\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment UNIQUE,\n\tname varchar(30) not null UNIQUE,\n) engine=InnoDB default charset=utf8;\n```\n\n### 字段条件约束\n```\n// null\nid int(11) not null,\nsid int(11) null\n\n// check对列约束\nage int(2) not null check(age>6 and age<18)\n\n// check对表约束\nprimary key(id),\ncheck(class_id in (select id from tb_class))\n```\n\n### 完整性约束\n```\n// 创建表的时候使用\nconstraint <symbol>\n[primary ... | foreign ... | check ...]\n\n// 更新表的完整性约束\nalter table table_name add constraint primary\nprimary key(id)\n\n// 删除表的完整性约束\nalter table table_name drop [foreign key|index] <symbol> [primary key]\n```","source":"_posts/mysql_key.md","raw":"---\ntitle: MYSQL之数据表级联操作-数据完整性约束\ndate: 2018-07-15 20:21:01\ntags: 数据库\ncategories: MySQL\n---\n### 外键约束\n>目前mysql只有InnoDB存储引擎支持外键约束\n>1. column_name 当前表外键字段名\n>2. table_name 外键表\n>3. index_column_name 外键所在外键表中字段名\n>4. ON DELETE 删除  ON UPDATE 更新\n>5. reference_option语法格式为：（没设置时候，默认两个都指定 RESTRICT）  \n\t当删除或更新外键所在外键表的数据时候   \n\tRESTRICT      限制策略，系统不删除或更新外键当前表的数据  \n\tCASCADE    \t  级联策略，自动删除或更新外键当前表的数据  \n\tSET FULL \t  置空策略，设置外键当前表的数据外键列数据为NULL，需要提前设置外键列未被限制 NOT NULL  \n\tNO ACTION \t  不采取实施策略，系统不删除或更新外键当前表的数据，与 RESTRICT 一致\n\n\n```\nFOREIGN KEY ( column_name [(length)] [ASC | DESC] ) \nREFERENCES table_name(index_column_name)\n[MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]\n[ON DELETE reference_option]\n[ON UPDATE reference_option]\n```\n\n#### 创建表，关联外键\n```\n// 创建 班级表\ncreate table if not exists class(\n\tid int(11) not null auto_increment,\n\tname varchar(30) not null,\n\tprimary key (id)\n) ENGINE=InnoDB default charset=utf8;\n\n// 创建学生表，外键 班级id class_id，级联删除及更新\ncreate table if not exists student(\n\tid int(11) not null auto_increment,\n\tname varchar(30) not null,\n\tclass_id int(11) not null,\n\tprimary key(id),\n\tindex(class_id),\n\tforeign key (class_id) references class(id) on delete cascade on update cascade\n) ENGINE=InnoDB default charset=utf8;\n```\n\n\n#### 插入数据操作\n```\n//插入数据\ninsert into class(name) values('one'), ('two'), ('three');\n// 生成 id 1,2,3\n\ninsert into student(class_id,name) values(1, 'lili');\ninsert into student(class_id,name) values(2, 'lili');\ninsert into student(class_id,name) values(2, 'lili');\ninsert into student(class_id,name) values(3, 'lili');\n\n// 插入失败，因为班级表中没有id =10的数据\ninsert into student(class_id,name) values(10, 'lili');\n```\n\n#### 更新数据操作\n```\n//更新数据\nupdate class set id=5 where id=2;\n//此时 学生表中 sid=2的数据同步更新为了5\n```\n\n#### 删除数据操作\n```\n//删除数据\ndelete from class where id=1;\n//此时 学生表中 sid=1的数据同步删除了\n```\n\n\n### 主键\n> 一个表中有且只有一个主键\n\n```\n// 单字段主键\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null\n) engine=InnoDB default charset=utf8;\n\n// 复合字段主键\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment,\n\tname varchar(30) not null,\n\tprimary key(id, name)\n) engine=InnoDB default charset=utf8;\n```\n\n### 候选键\n> 一个表中可以存在多个候选键  \nUNIQUE 来表示\n\n```\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment UNIQUE,\n\tname varchar(30) not null UNIQUE,\n) engine=InnoDB default charset=utf8;\n```\n\n### 字段条件约束\n```\n// null\nid int(11) not null,\nsid int(11) null\n\n// check对列约束\nage int(2) not null check(age>6 and age<18)\n\n// check对表约束\nprimary key(id),\ncheck(class_id in (select id from tb_class))\n```\n\n### 完整性约束\n```\n// 创建表的时候使用\nconstraint <symbol>\n[primary ... | foreign ... | check ...]\n\n// 更新表的完整性约束\nalter table table_name add constraint primary\nprimary key(id)\n\n// 删除表的完整性约束\nalter table table_name drop [foreign key|index] <symbol> [primary key]\n```","slug":"mysql_key","published":1,"updated":"2019-04-09T14:26:39.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmbb0027vjcgl4di4mye","content":"<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><blockquote>\n<p>目前mysql只有InnoDB存储引擎支持外键约束</p>\n<ol>\n<li>column_name 当前表外键字段名</li>\n<li>table_name 外键表</li>\n<li>index_column_name 外键所在外键表中字段名</li>\n<li>ON DELETE 删除  ON UPDATE 更新</li>\n<li>reference_option语法格式为：（没设置时候，默认两个都指定 RESTRICT）<br> 当删除或更新外键所在外键表的数据时候<br> RESTRICT      限制策略，系统不删除或更新外键当前表的数据<br> CASCADE          级联策略，自动删除或更新外键当前表的数据<br> SET FULL       置空策略，设置外键当前表的数据外键列数据为NULL，需要提前设置外键列未被限制 NOT NULL<br> NO ACTION       不采取实施策略，系统不删除或更新外键当前表的数据，与 RESTRICT 一致</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FOREIGN KEY ( column_name [(length)] [ASC | DESC] ) </span><br><span class=\"line\">REFERENCES table_name(index_column_name)</span><br><span class=\"line\">[MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]</span><br><span class=\"line\">[ON DELETE reference_option]</span><br><span class=\"line\">[ON UPDATE reference_option]</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建表，关联外键\"><a href=\"#创建表，关联外键\" class=\"headerlink\" title=\"创建表，关联外键\"></a>创建表，关联外键</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建 班级表</span><br><span class=\"line\">create table if not exists class(</span><br><span class=\"line\">\tid int(11) not null auto_increment,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tprimary key (id)</span><br><span class=\"line\">) ENGINE=InnoDB default charset=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建学生表，外键 班级id class_id，级联删除及更新</span><br><span class=\"line\">create table if not exists student(</span><br><span class=\"line\">\tid int(11) not null auto_increment,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tclass_id int(11) not null,</span><br><span class=\"line\">\tprimary key(id),</span><br><span class=\"line\">\tindex(class_id),</span><br><span class=\"line\">\tforeign key (class_id) references class(id) on delete cascade on update cascade</span><br><span class=\"line\">) ENGINE=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure>\n<h4 id=\"插入数据操作\"><a href=\"#插入数据操作\" class=\"headerlink\" title=\"插入数据操作\"></a>插入数据操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//插入数据</span><br><span class=\"line\">insert into class(name) values(&apos;one&apos;), (&apos;two&apos;), (&apos;three&apos;);</span><br><span class=\"line\">// 生成 id 1,2,3</span><br><span class=\"line\"></span><br><span class=\"line\">insert into student(class_id,name) values(1, &apos;lili&apos;);</span><br><span class=\"line\">insert into student(class_id,name) values(2, &apos;lili&apos;);</span><br><span class=\"line\">insert into student(class_id,name) values(2, &apos;lili&apos;);</span><br><span class=\"line\">insert into student(class_id,name) values(3, &apos;lili&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 插入失败，因为班级表中没有id =10的数据</span><br><span class=\"line\">insert into student(class_id,name) values(10, &apos;lili&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新数据操作\"><a href=\"#更新数据操作\" class=\"headerlink\" title=\"更新数据操作\"></a>更新数据操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更新数据</span><br><span class=\"line\">update class set id=5 where id=2;</span><br><span class=\"line\">//此时 学生表中 sid=2的数据同步更新为了5</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数据操作\"><a href=\"#删除数据操作\" class=\"headerlink\" title=\"删除数据操作\"></a>删除数据操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除数据</span><br><span class=\"line\">delete from class where id=1;</span><br><span class=\"line\">//此时 学生表中 sid=1的数据同步删除了</span><br></pre></td></tr></table></figure>\n<h3 id=\"主键\"><a href=\"#主键\" class=\"headerlink\" title=\"主键\"></a>主键</h3><blockquote>\n<p>一个表中有且只有一个主键</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 单字段主键</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null</span><br><span class=\"line\">) engine=InnoDB default charset=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">// 复合字段主键</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tprimary key(id, name)</span><br><span class=\"line\">) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure>\n<h3 id=\"候选键\"><a href=\"#候选键\" class=\"headerlink\" title=\"候选键\"></a>候选键</h3><blockquote>\n<p>一个表中可以存在多个候选键<br>UNIQUE 来表示</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment UNIQUE,</span><br><span class=\"line\">\tname varchar(30) not null UNIQUE,</span><br><span class=\"line\">) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字段条件约束\"><a href=\"#字段条件约束\" class=\"headerlink\" title=\"字段条件约束\"></a>字段条件约束</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// null</span><br><span class=\"line\">id int(11) not null,</span><br><span class=\"line\">sid int(11) null</span><br><span class=\"line\"></span><br><span class=\"line\">// check对列约束</span><br><span class=\"line\">age int(2) not null check(age&gt;6 and age&lt;18)</span><br><span class=\"line\"></span><br><span class=\"line\">// check对表约束</span><br><span class=\"line\">primary key(id),</span><br><span class=\"line\">check(class_id in (select id from tb_class))</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整性约束\"><a href=\"#完整性约束\" class=\"headerlink\" title=\"完整性约束\"></a>完整性约束</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候使用</span><br><span class=\"line\">constraint &lt;symbol&gt;</span><br><span class=\"line\">[primary ... | foreign ... | check ...]</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新表的完整性约束</span><br><span class=\"line\">alter table table_name add constraint primary</span><br><span class=\"line\">primary key(id)</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除表的完整性约束</span><br><span class=\"line\">alter table table_name drop [foreign key|index] &lt;symbol&gt; [primary key]</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"外键约束\"><a href=\"#外键约束\" class=\"headerlink\" title=\"外键约束\"></a>外键约束</h3><blockquote>\n<p>目前mysql只有InnoDB存储引擎支持外键约束</p>\n<ol>\n<li>column_name 当前表外键字段名</li>\n<li>table_name 外键表</li>\n<li>index_column_name 外键所在外键表中字段名</li>\n<li>ON DELETE 删除  ON UPDATE 更新</li>\n<li>reference_option语法格式为：（没设置时候，默认两个都指定 RESTRICT）<br> 当删除或更新外键所在外键表的数据时候<br> RESTRICT      限制策略，系统不删除或更新外键当前表的数据<br> CASCADE          级联策略，自动删除或更新外键当前表的数据<br> SET FULL       置空策略，设置外键当前表的数据外键列数据为NULL，需要提前设置外键列未被限制 NOT NULL<br> NO ACTION       不采取实施策略，系统不删除或更新外键当前表的数据，与 RESTRICT 一致</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FOREIGN KEY ( column_name [(length)] [ASC | DESC] ) </span><br><span class=\"line\">REFERENCES table_name(index_column_name)</span><br><span class=\"line\">[MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]</span><br><span class=\"line\">[ON DELETE reference_option]</span><br><span class=\"line\">[ON UPDATE reference_option]</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建表，关联外键\"><a href=\"#创建表，关联外键\" class=\"headerlink\" title=\"创建表，关联外键\"></a>创建表，关联外键</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建 班级表</span><br><span class=\"line\">create table if not exists class(</span><br><span class=\"line\">\tid int(11) not null auto_increment,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tprimary key (id)</span><br><span class=\"line\">) ENGINE=InnoDB default charset=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">// 创建学生表，外键 班级id class_id，级联删除及更新</span><br><span class=\"line\">create table if not exists student(</span><br><span class=\"line\">\tid int(11) not null auto_increment,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tclass_id int(11) not null,</span><br><span class=\"line\">\tprimary key(id),</span><br><span class=\"line\">\tindex(class_id),</span><br><span class=\"line\">\tforeign key (class_id) references class(id) on delete cascade on update cascade</span><br><span class=\"line\">) ENGINE=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure>\n<h4 id=\"插入数据操作\"><a href=\"#插入数据操作\" class=\"headerlink\" title=\"插入数据操作\"></a>插入数据操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//插入数据</span><br><span class=\"line\">insert into class(name) values(&apos;one&apos;), (&apos;two&apos;), (&apos;three&apos;);</span><br><span class=\"line\">// 生成 id 1,2,3</span><br><span class=\"line\"></span><br><span class=\"line\">insert into student(class_id,name) values(1, &apos;lili&apos;);</span><br><span class=\"line\">insert into student(class_id,name) values(2, &apos;lili&apos;);</span><br><span class=\"line\">insert into student(class_id,name) values(2, &apos;lili&apos;);</span><br><span class=\"line\">insert into student(class_id,name) values(3, &apos;lili&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 插入失败，因为班级表中没有id =10的数据</span><br><span class=\"line\">insert into student(class_id,name) values(10, &apos;lili&apos;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"更新数据操作\"><a href=\"#更新数据操作\" class=\"headerlink\" title=\"更新数据操作\"></a>更新数据操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更新数据</span><br><span class=\"line\">update class set id=5 where id=2;</span><br><span class=\"line\">//此时 学生表中 sid=2的数据同步更新为了5</span><br></pre></td></tr></table></figure>\n<h4 id=\"删除数据操作\"><a href=\"#删除数据操作\" class=\"headerlink\" title=\"删除数据操作\"></a>删除数据操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除数据</span><br><span class=\"line\">delete from class where id=1;</span><br><span class=\"line\">//此时 学生表中 sid=1的数据同步删除了</span><br></pre></td></tr></table></figure>\n<h3 id=\"主键\"><a href=\"#主键\" class=\"headerlink\" title=\"主键\"></a>主键</h3><blockquote>\n<p>一个表中有且只有一个主键</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 单字段主键</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null</span><br><span class=\"line\">) engine=InnoDB default charset=utf8;</span><br><span class=\"line\"></span><br><span class=\"line\">// 复合字段主键</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tprimary key(id, name)</span><br><span class=\"line\">) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure>\n<h3 id=\"候选键\"><a href=\"#候选键\" class=\"headerlink\" title=\"候选键\"></a>候选键</h3><blockquote>\n<p>一个表中可以存在多个候选键<br>UNIQUE 来表示</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment UNIQUE,</span><br><span class=\"line\">\tname varchar(30) not null UNIQUE,</span><br><span class=\"line\">) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure>\n<h3 id=\"字段条件约束\"><a href=\"#字段条件约束\" class=\"headerlink\" title=\"字段条件约束\"></a>字段条件约束</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// null</span><br><span class=\"line\">id int(11) not null,</span><br><span class=\"line\">sid int(11) null</span><br><span class=\"line\"></span><br><span class=\"line\">// check对列约束</span><br><span class=\"line\">age int(2) not null check(age&gt;6 and age&lt;18)</span><br><span class=\"line\"></span><br><span class=\"line\">// check对表约束</span><br><span class=\"line\">primary key(id),</span><br><span class=\"line\">check(class_id in (select id from tb_class))</span><br></pre></td></tr></table></figure>\n<h3 id=\"完整性约束\"><a href=\"#完整性约束\" class=\"headerlink\" title=\"完整性约束\"></a>完整性约束</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候使用</span><br><span class=\"line\">constraint &lt;symbol&gt;</span><br><span class=\"line\">[primary ... | foreign ... | check ...]</span><br><span class=\"line\"></span><br><span class=\"line\">// 更新表的完整性约束</span><br><span class=\"line\">alter table table_name add constraint primary</span><br><span class=\"line\">primary key(id)</span><br><span class=\"line\"></span><br><span class=\"line\">// 删除表的完整性约束</span><br><span class=\"line\">alter table table_name drop [foreign key|index] &lt;symbol&gt; [primary key]</span><br></pre></td></tr></table></figure>"},{"title":"linux下关于服务端口的配置","date":"2018-06-10T12:21:01.000Z","_content":"### 端口服务\n\n>查看端口使用情况\n\n```\nnetstat命令各个参数说明如下:\n    -t : 指明显示TCP端口\n    -u : 指明显示UDP端口\n    -l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)\n    -p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。\n    -n : 不进行DNS轮询，显示IP(可以加速操作)\nnetstat -ntlp   //查看当前所有tcp端口·\nnetstat -ntulp |grep 80   //查看所有80端口使用情况·\nnetstat -an | grep 3306   //查看所有3306端口使用情况·\n```\n\n### 端口映射配置\n\n>需求：\n>PC_A是 eth0: 172.18.10.212  内网；eth1: 219.239.xx.xx  外网\n>\n>PC_B是 172.18.10.205  内网\n>\n>A的8080端口映射到B的80端口\n\n#### 1. 首先应该做的是\n```\n/etc/sysctl.conf配置文件:\n    net.ipv4.ip_forward = 1 默认是0.\n这样允许iptalbes FORWARD。\n```\n#### 2. 在/etc/rc.d/init.d目录下有iptables 文件，使用格式如下\n```\nUsage: ./iptables {start|stop|restart|condrestart|status|panic|save}\n    相当与service iptables {....}\n    把iptables 服务停止，清除以前的规则，存盘\n    \n到/etc/rc.d/init.d目录下，运行\n    ./iptables stop\n    iptalbes -F\n    iptalbes -X\n    iptalbes -Z\n    ./iptables save\n```\n#### 3. 重新配置规则\n```\niptables -t nat -A PREROUTING -d 219.239.xx.xx -p tcp --dport 8080 -j DNAT --to-destination 172.18.10.205:80\n\niptables -t nat -A POSTROUTING -d 172.18.10.205 -p tcp --dport 80 -j SNAT --to 172.18.10.212\n\niptables -A FORWARD -o eth0 -d 172.18.10.205 -p tcp --dport 80 -j ACCEPT\n\niptables -A FORWARD -i eth0 -s 172.18.10.205 -p tcp --sport 80 -j ACCEPT\n\nDNAT SNAT 的请参考帮助，这里不再陈述。\n```\n#### 4. 新的规则存盘\n```\n ./iptables save\n\n规则存盘后在/etc/sysconfig/iptables这个文件里面，若你对这个文件很熟悉\n直接修改这里的内容也等于命令行方式输入规则。\n```\n#### 5. 启动iptables 服务\n```\n ./iptables start\n 在/proc/net/ip_conntrack文件里有包的流向，如下面\n\n    tcp 6 53 TIME_WAIT src=221.122.59.2 dst=219.239.xx.xx sport=7958 dport=8080 packets=9 bytes=1753\n    \n    src=172.18.10.205 dst=172.18.10.212 sport=80 dport=7958 packets=9 bytes=5777 [ASSURED] use=1\n```","source":"_posts/server_port.md","raw":"---\ntitle: linux下关于服务端口的配置\ndate: 2018-06-10 20:21:01\ntags: 运维\ncategories: 服务器\n---\n### 端口服务\n\n>查看端口使用情况\n\n```\nnetstat命令各个参数说明如下:\n    -t : 指明显示TCP端口\n    -u : 指明显示UDP端口\n    -l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)\n    -p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。\n    -n : 不进行DNS轮询，显示IP(可以加速操作)\nnetstat -ntlp   //查看当前所有tcp端口·\nnetstat -ntulp |grep 80   //查看所有80端口使用情况·\nnetstat -an | grep 3306   //查看所有3306端口使用情况·\n```\n\n### 端口映射配置\n\n>需求：\n>PC_A是 eth0: 172.18.10.212  内网；eth1: 219.239.xx.xx  外网\n>\n>PC_B是 172.18.10.205  内网\n>\n>A的8080端口映射到B的80端口\n\n#### 1. 首先应该做的是\n```\n/etc/sysctl.conf配置文件:\n    net.ipv4.ip_forward = 1 默认是0.\n这样允许iptalbes FORWARD。\n```\n#### 2. 在/etc/rc.d/init.d目录下有iptables 文件，使用格式如下\n```\nUsage: ./iptables {start|stop|restart|condrestart|status|panic|save}\n    相当与service iptables {....}\n    把iptables 服务停止，清除以前的规则，存盘\n    \n到/etc/rc.d/init.d目录下，运行\n    ./iptables stop\n    iptalbes -F\n    iptalbes -X\n    iptalbes -Z\n    ./iptables save\n```\n#### 3. 重新配置规则\n```\niptables -t nat -A PREROUTING -d 219.239.xx.xx -p tcp --dport 8080 -j DNAT --to-destination 172.18.10.205:80\n\niptables -t nat -A POSTROUTING -d 172.18.10.205 -p tcp --dport 80 -j SNAT --to 172.18.10.212\n\niptables -A FORWARD -o eth0 -d 172.18.10.205 -p tcp --dport 80 -j ACCEPT\n\niptables -A FORWARD -i eth0 -s 172.18.10.205 -p tcp --sport 80 -j ACCEPT\n\nDNAT SNAT 的请参考帮助，这里不再陈述。\n```\n#### 4. 新的规则存盘\n```\n ./iptables save\n\n规则存盘后在/etc/sysconfig/iptables这个文件里面，若你对这个文件很熟悉\n直接修改这里的内容也等于命令行方式输入规则。\n```\n#### 5. 启动iptables 服务\n```\n ./iptables start\n 在/proc/net/ip_conntrack文件里有包的流向，如下面\n\n    tcp 6 53 TIME_WAIT src=221.122.59.2 dst=219.239.xx.xx sport=7958 dport=8080 packets=9 bytes=1753\n    \n    src=172.18.10.205 dst=172.18.10.212 sport=80 dport=7958 packets=9 bytes=5777 [ASSURED] use=1\n```","slug":"server_port","published":1,"updated":"2019-04-09T14:32:22.725Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmbd002bvjcg5jpxzj6t","content":"<h3 id=\"端口服务\"><a href=\"#端口服务\" class=\"headerlink\" title=\"端口服务\"></a>端口服务</h3><blockquote>\n<p>查看端口使用情况</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat命令各个参数说明如下:</span><br><span class=\"line\">    -t : 指明显示TCP端口</span><br><span class=\"line\">    -u : 指明显示UDP端口</span><br><span class=\"line\">    -l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)</span><br><span class=\"line\">    -p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。</span><br><span class=\"line\">    -n : 不进行DNS轮询，显示IP(可以加速操作)</span><br><span class=\"line\">netstat -ntlp   //查看当前所有tcp端口·</span><br><span class=\"line\">netstat -ntulp |grep 80   //查看所有80端口使用情况·</span><br><span class=\"line\">netstat -an | grep 3306   //查看所有3306端口使用情况·</span><br></pre></td></tr></table></figure>\n<h3 id=\"端口映射配置\"><a href=\"#端口映射配置\" class=\"headerlink\" title=\"端口映射配置\"></a>端口映射配置</h3><blockquote>\n<p>需求：<br>PC_A是 eth0: 172.18.10.212  内网；eth1: 219.239.xx.xx  外网</p>\n<p>PC_B是 172.18.10.205  内网</p>\n<p>A的8080端口映射到B的80端口</p>\n</blockquote>\n<h4 id=\"1-首先应该做的是\"><a href=\"#1-首先应该做的是\" class=\"headerlink\" title=\"1. 首先应该做的是\"></a>1. 首先应该做的是</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/sysctl.conf配置文件:</span><br><span class=\"line\">    net.ipv4.ip_forward = 1 默认是0.</span><br><span class=\"line\">这样允许iptalbes FORWARD。</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-在-etc-rc-d-init-d目录下有iptables-文件，使用格式如下\"><a href=\"#2-在-etc-rc-d-init-d目录下有iptables-文件，使用格式如下\" class=\"headerlink\" title=\"2. 在/etc/rc.d/init.d目录下有iptables 文件，使用格式如下\"></a>2. 在/etc/rc.d/init.d目录下有iptables 文件，使用格式如下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: ./iptables &#123;start|stop|restart|condrestart|status|panic|save&#125;</span><br><span class=\"line\">    相当与service iptables &#123;....&#125;</span><br><span class=\"line\">    把iptables 服务停止，清除以前的规则，存盘</span><br><span class=\"line\">    </span><br><span class=\"line\">到/etc/rc.d/init.d目录下，运行</span><br><span class=\"line\">    ./iptables stop</span><br><span class=\"line\">    iptalbes -F</span><br><span class=\"line\">    iptalbes -X</span><br><span class=\"line\">    iptalbes -Z</span><br><span class=\"line\">    ./iptables save</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-重新配置规则\"><a href=\"#3-重新配置规则\" class=\"headerlink\" title=\"3. 重新配置规则\"></a>3. 重新配置规则</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d 219.239.xx.xx -p tcp --dport 8080 -j DNAT --to-destination 172.18.10.205:80</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -A POSTROUTING -d 172.18.10.205 -p tcp --dport 80 -j SNAT --to 172.18.10.212</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -A FORWARD -o eth0 -d 172.18.10.205 -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -A FORWARD -i eth0 -s 172.18.10.205 -p tcp --sport 80 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">DNAT SNAT 的请参考帮助，这里不再陈述。</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-新的规则存盘\"><a href=\"#4-新的规则存盘\" class=\"headerlink\" title=\"4. 新的规则存盘\"></a>4. 新的规则存盘</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ./iptables save</span><br><span class=\"line\"></span><br><span class=\"line\">规则存盘后在/etc/sysconfig/iptables这个文件里面，若你对这个文件很熟悉</span><br><span class=\"line\">直接修改这里的内容也等于命令行方式输入规则。</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-启动iptables-服务\"><a href=\"#5-启动iptables-服务\" class=\"headerlink\" title=\"5. 启动iptables 服务\"></a>5. 启动iptables 服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./iptables start</span><br><span class=\"line\">在/proc/net/ip_conntrack文件里有包的流向，如下面</span><br><span class=\"line\"></span><br><span class=\"line\">   tcp 6 53 TIME_WAIT src=221.122.59.2 dst=219.239.xx.xx sport=7958 dport=8080 packets=9 bytes=1753</span><br><span class=\"line\">   </span><br><span class=\"line\">   src=172.18.10.205 dst=172.18.10.212 sport=80 dport=7958 packets=9 bytes=5777 [ASSURED] use=1</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"端口服务\"><a href=\"#端口服务\" class=\"headerlink\" title=\"端口服务\"></a>端口服务</h3><blockquote>\n<p>查看端口使用情况</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat命令各个参数说明如下:</span><br><span class=\"line\">    -t : 指明显示TCP端口</span><br><span class=\"line\">    -u : 指明显示UDP端口</span><br><span class=\"line\">    -l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)</span><br><span class=\"line\">    -p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。</span><br><span class=\"line\">    -n : 不进行DNS轮询，显示IP(可以加速操作)</span><br><span class=\"line\">netstat -ntlp   //查看当前所有tcp端口·</span><br><span class=\"line\">netstat -ntulp |grep 80   //查看所有80端口使用情况·</span><br><span class=\"line\">netstat -an | grep 3306   //查看所有3306端口使用情况·</span><br></pre></td></tr></table></figure>\n<h3 id=\"端口映射配置\"><a href=\"#端口映射配置\" class=\"headerlink\" title=\"端口映射配置\"></a>端口映射配置</h3><blockquote>\n<p>需求：<br>PC_A是 eth0: 172.18.10.212  内网；eth1: 219.239.xx.xx  外网</p>\n<p>PC_B是 172.18.10.205  内网</p>\n<p>A的8080端口映射到B的80端口</p>\n</blockquote>\n<h4 id=\"1-首先应该做的是\"><a href=\"#1-首先应该做的是\" class=\"headerlink\" title=\"1. 首先应该做的是\"></a>1. 首先应该做的是</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/sysctl.conf配置文件:</span><br><span class=\"line\">    net.ipv4.ip_forward = 1 默认是0.</span><br><span class=\"line\">这样允许iptalbes FORWARD。</span><br></pre></td></tr></table></figure>\n<h4 id=\"2-在-etc-rc-d-init-d目录下有iptables-文件，使用格式如下\"><a href=\"#2-在-etc-rc-d-init-d目录下有iptables-文件，使用格式如下\" class=\"headerlink\" title=\"2. 在/etc/rc.d/init.d目录下有iptables 文件，使用格式如下\"></a>2. 在/etc/rc.d/init.d目录下有iptables 文件，使用格式如下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Usage: ./iptables &#123;start|stop|restart|condrestart|status|panic|save&#125;</span><br><span class=\"line\">    相当与service iptables &#123;....&#125;</span><br><span class=\"line\">    把iptables 服务停止，清除以前的规则，存盘</span><br><span class=\"line\">    </span><br><span class=\"line\">到/etc/rc.d/init.d目录下，运行</span><br><span class=\"line\">    ./iptables stop</span><br><span class=\"line\">    iptalbes -F</span><br><span class=\"line\">    iptalbes -X</span><br><span class=\"line\">    iptalbes -Z</span><br><span class=\"line\">    ./iptables save</span><br></pre></td></tr></table></figure>\n<h4 id=\"3-重新配置规则\"><a href=\"#3-重新配置规则\" class=\"headerlink\" title=\"3. 重新配置规则\"></a>3. 重新配置规则</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -t nat -A PREROUTING -d 219.239.xx.xx -p tcp --dport 8080 -j DNAT --to-destination 172.18.10.205:80</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -t nat -A POSTROUTING -d 172.18.10.205 -p tcp --dport 80 -j SNAT --to 172.18.10.212</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -A FORWARD -o eth0 -d 172.18.10.205 -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -A FORWARD -i eth0 -s 172.18.10.205 -p tcp --sport 80 -j ACCEPT</span><br><span class=\"line\"></span><br><span class=\"line\">DNAT SNAT 的请参考帮助，这里不再陈述。</span><br></pre></td></tr></table></figure>\n<h4 id=\"4-新的规则存盘\"><a href=\"#4-新的规则存盘\" class=\"headerlink\" title=\"4. 新的规则存盘\"></a>4. 新的规则存盘</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> ./iptables save</span><br><span class=\"line\"></span><br><span class=\"line\">规则存盘后在/etc/sysconfig/iptables这个文件里面，若你对这个文件很熟悉</span><br><span class=\"line\">直接修改这里的内容也等于命令行方式输入规则。</span><br></pre></td></tr></table></figure>\n<h4 id=\"5-启动iptables-服务\"><a href=\"#5-启动iptables-服务\" class=\"headerlink\" title=\"5. 启动iptables 服务\"></a>5. 启动iptables 服务</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./iptables start</span><br><span class=\"line\">在/proc/net/ip_conntrack文件里有包的流向，如下面</span><br><span class=\"line\"></span><br><span class=\"line\">   tcp 6 53 TIME_WAIT src=221.122.59.2 dst=219.239.xx.xx sport=7958 dport=8080 packets=9 bytes=1753</span><br><span class=\"line\">   </span><br><span class=\"line\">   src=172.18.10.205 dst=172.18.10.212 sport=80 dport=7958 packets=9 bytes=5777 [ASSURED] use=1</span><br></pre></td></tr></table></figure>"},{"title":"git 配置ssh密钥","date":"2018-03-27T11:21:01.000Z","_content":"在github帐号注册好之后，将项目clone到本地，加入git bash命令。\n1、输入cd ~/.ssh 回车，查看是否有ssh key密钥，有了就备份\n<center>\n![](/img/ssh_dir.png)\n</center>\n2、创建ssh key，输入下面命令回车，之后会让你输入github的账号密码，如图\n```\nssh-keygen -t rsa -C \"youremail@youremail.com\"\n\nCreates a new ssh key using the provided email # Generating public/private rsa key pair.\n\nEnter file in which to save the key (/home/you/.ssh/id_rsa):\n```\n直接按Enter就行。然后，会提示你输入密码，如下(建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码)：\n```\nEnter same passphrase again: [Type passphrase again]\n```\n完了之后，大概是这样：\n```\nYour public key has been saved in /home/you/.ssh/id_rsa.pub.\nThe key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com\n```\n<center>\n![](/img/ssh_gen.png)\n</center>\n3、找到本地id_rsa.pub文件，复制里面的内容，这就是ssh密钥，可以通过pwd命令来查看当前文件位置\n<center>\n![](/img/ssh_pwd.png)\n</center>\n<center>\n![](/img/ssh_key_dir.png)\n</center>\n4、登录github，在个人中心的setting中，找到 SSH and GPG keys\n<center>\n![](/img/github_ssh.png)\n</center>\n点击 new ssh key，将复制的ssh密钥粘贴进 “key”文本框，title随便输入即可。\n点击add key。\n添加ssh密钥到远程仓库完成。\n5、验证ssh是否可用\n```\nssh -T git@github.com\n```\n返回如下表示正常可用。\n```\nHi xxx! You've successfully authenticated, but GitHub does not # provide shell access.\n```\n6、此时查看你的远程分支地址是否是ssh协议的\n```\ngit remote -v\norigin https://github.com/zhipenwang/zhipenwang.git (fetch)\norigin https://github.com/zhipenwang/zhipenwang.git (push)\n```\n如果是https协议，修改为ssh协议：\n```\ngit remote set-url origin git@github.com:zhipenwang/zhipenwang.git\n```\n这个时候就可以进行push了。","source":"_posts/ssh_key.md","raw":"---\ntitle: git 配置ssh密钥\ndate: 2018-03-27 19:21:01\ntags: GIT\ncategories: GIT\n---\n在github帐号注册好之后，将项目clone到本地，加入git bash命令。\n1、输入cd ~/.ssh 回车，查看是否有ssh key密钥，有了就备份\n<center>\n![](/img/ssh_dir.png)\n</center>\n2、创建ssh key，输入下面命令回车，之后会让你输入github的账号密码，如图\n```\nssh-keygen -t rsa -C \"youremail@youremail.com\"\n\nCreates a new ssh key using the provided email # Generating public/private rsa key pair.\n\nEnter file in which to save the key (/home/you/.ssh/id_rsa):\n```\n直接按Enter就行。然后，会提示你输入密码，如下(建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码)：\n```\nEnter same passphrase again: [Type passphrase again]\n```\n完了之后，大概是这样：\n```\nYour public key has been saved in /home/you/.ssh/id_rsa.pub.\nThe key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com\n```\n<center>\n![](/img/ssh_gen.png)\n</center>\n3、找到本地id_rsa.pub文件，复制里面的内容，这就是ssh密钥，可以通过pwd命令来查看当前文件位置\n<center>\n![](/img/ssh_pwd.png)\n</center>\n<center>\n![](/img/ssh_key_dir.png)\n</center>\n4、登录github，在个人中心的setting中，找到 SSH and GPG keys\n<center>\n![](/img/github_ssh.png)\n</center>\n点击 new ssh key，将复制的ssh密钥粘贴进 “key”文本框，title随便输入即可。\n点击add key。\n添加ssh密钥到远程仓库完成。\n5、验证ssh是否可用\n```\nssh -T git@github.com\n```\n返回如下表示正常可用。\n```\nHi xxx! You've successfully authenticated, but GitHub does not # provide shell access.\n```\n6、此时查看你的远程分支地址是否是ssh协议的\n```\ngit remote -v\norigin https://github.com/zhipenwang/zhipenwang.git (fetch)\norigin https://github.com/zhipenwang/zhipenwang.git (push)\n```\n如果是https协议，修改为ssh协议：\n```\ngit remote set-url origin git@github.com:zhipenwang/zhipenwang.git\n```\n这个时候就可以进行push了。","slug":"ssh_key","published":1,"updated":"2019-04-09T14:02:03.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmbf002dvjcg3exr07uu","content":"<p>在github帐号注册好之后，将项目clone到本地，加入git bash命令。<br>1、输入cd ~/.ssh 回车，查看是否有ssh key密钥，有了就备份</p>\n<p><center><br><img src=\"/img/ssh_dir.png\" alt=\"\"><br></center><br>2、创建ssh key，输入下面命令回车，之后会让你输入github的账号密码，如图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@youremail.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Creates a new ssh key using the provided email # Generating public/private rsa key pair.</span><br><span class=\"line\"></span><br><span class=\"line\">Enter file in which to save the key (/home/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></p>\n<p>直接按Enter就行。然后，会提示你输入密码，如下(建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></p>\n<p>完了之后，大概是这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your public key has been saved in /home/you/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com</span><br></pre></td></tr></table></figure></p>\n<p><center><br><img src=\"/img/ssh_gen.png\" alt=\"\"><br></center><br>3、找到本地id_rsa.pub文件，复制里面的内容，这就是ssh密钥，可以通过pwd命令来查看当前文件位置</p>\n<p><center><br><img src=\"/img/ssh_pwd.png\" alt=\"\"><br></center></p>\n<p><center><br><img src=\"/img/ssh_key_dir.png\" alt=\"\"><br></center><br>4、登录github，在个人中心的setting中，找到 SSH and GPG keys</p>\n<p><center><br><img src=\"/img/github_ssh.png\" alt=\"\"><br></center><br>点击 new ssh key，将复制的ssh密钥粘贴进 “key”文本框，title随便输入即可。<br>点击add key。<br>添加ssh密钥到远程仓库完成。<br>5、验证ssh是否可用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p>返回如下表示正常可用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not # provide shell access.</span><br></pre></td></tr></table></figure></p>\n<p>6、此时查看你的远程分支地址是否是ssh协议的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br><span class=\"line\">origin https://github.com/zhipenwang/zhipenwang.git (fetch)</span><br><span class=\"line\">origin https://github.com/zhipenwang/zhipenwang.git (push)</span><br></pre></td></tr></table></figure></p>\n<p>如果是https协议，修改为ssh协议：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin git@github.com:zhipenwang/zhipenwang.git</span><br></pre></td></tr></table></figure></p>\n<p>这个时候就可以进行push了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>在github帐号注册好之后，将项目clone到本地，加入git bash命令。<br>1、输入cd ~/.ssh 回车，查看是否有ssh key密钥，有了就备份</p>\n<p><center><br><img src=\"/img/ssh_dir.png\" alt=\"\"><br></center><br>2、创建ssh key，输入下面命令回车，之后会让你输入github的账号密码，如图<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;youremail@youremail.com&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">Creates a new ssh key using the provided email # Generating public/private rsa key pair.</span><br><span class=\"line\"></span><br><span class=\"line\">Enter file in which to save the key (/home/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></p>\n<p>直接按Enter就行。然后，会提示你输入密码，如下(建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码)：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></p>\n<p>完了之后，大概是这样：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Your public key has been saved in /home/you/.ssh/id_rsa.pub.</span><br><span class=\"line\">The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com</span><br></pre></td></tr></table></figure></p>\n<p><center><br><img src=\"/img/ssh_gen.png\" alt=\"\"><br></center><br>3、找到本地id_rsa.pub文件，复制里面的内容，这就是ssh密钥，可以通过pwd命令来查看当前文件位置</p>\n<p><center><br><img src=\"/img/ssh_pwd.png\" alt=\"\"><br></center></p>\n<p><center><br><img src=\"/img/ssh_key_dir.png\" alt=\"\"><br></center><br>4、登录github，在个人中心的setting中，找到 SSH and GPG keys</p>\n<p><center><br><img src=\"/img/github_ssh.png\" alt=\"\"><br></center><br>点击 new ssh key，将复制的ssh密钥粘贴进 “key”文本框，title随便输入即可。<br>点击add key。<br>添加ssh密钥到远程仓库完成。<br>5、验证ssh是否可用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>\n<p>返回如下表示正常可用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not # provide shell access.</span><br></pre></td></tr></table></figure></p>\n<p>6、此时查看你的远程分支地址是否是ssh协议的<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br><span class=\"line\">origin https://github.com/zhipenwang/zhipenwang.git (fetch)</span><br><span class=\"line\">origin https://github.com/zhipenwang/zhipenwang.git (push)</span><br></pre></td></tr></table></figure></p>\n<p>如果是https协议，修改为ssh协议：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote set-url origin git@github.com:zhipenwang/zhipenwang.git</span><br></pre></td></tr></table></figure></p>\n<p>这个时候就可以进行push了。</p>\n"},{"title":"MYSQL之索引","date":"2018-07-15T11:21:01.000Z","_content":">索引的两种存储类型：B树(BTree)索引、哈希(Hash)索引  \nBTree为系统默认索引\n\n### 创建表时建立索引\n```\ncreate table (\n\t属性名 长度 是否为空,\n\t[UNIQUE | FULLTEXT | SPATIAL ]  INDEX|KEY [别名]( 属性名1 [(长度)] [ASC | DESC])\n)\n```\n\n### 已建立的表中创建索引\n```\ncreate [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])\n```\n\n### 修改表结构添加索引\n```\nalter table table_name add [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])\n```\n\n### 删除索引\n```\ndrop INDEX 属性名 on table_name\n```\n\n>1. []是可选项  \n>2. [UNIQUE | FULLTEXT | SPATIAL ] 可选项，分别代表唯一性索引、全文索引、空间索引\n>3. INDEX和KEY参数其中一个即可，用于指定字段索引\n>4. 别名为可选项，创建的索引取新名称  \n\t别名的参数如下：  \n\t属性名1 必选项，指索引对应的字段名称，该字段必须预选被定义到表中  \n\t长度\t可选项，索引的长度，必须是字符串类型才可以使用  \n\tASC/DESC可选项，ASC表示升序排列，DESC表示降序排列  \n>5. table_name 表名称\n\n### 普通索引\n>在任何数据类型的字段中创建索引\n\n```\n// 创建表的时候创建索引\n// 创建了索引列 id\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tindex(id)\n);\n// 已存在表中创建索引\ncreate index info on table_test (id)\n// 修改表结构添加索引\nalter table table_test add index info (id)\n// 查看表结构\nshow create table table_test;\n```\n\n### 唯一性索引\n>使用UNIQUE参数设置唯一索引，该索引的值必须唯一  \n主键是一种特殊的唯一索引\n\n```\n// 创建表的时候创建索引\n// 创建唯一索引 别名为 name 索引字段为 id，索引存储排序为 asc\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tUNIQUE INDEX name (id asc)\n);\n// 已存在表中创建索引\ncreate UNIQUE INDEX name on table_test (id asc)\n// 修改表结构添加索引\nalter table table_test add UNIQUE INDEX name (id asc)\n// 查看表结构\nshow create table table_test;\n```\n\n### 全文索引\n>使用FULLTEXT参数设置全文索引  \n只有myisam存储引擎的数据表支持fulltext全文索引  \n只能创建在数据类型为 char、varchar、text的字段上  \n默认情况下，应用全文索引大小写不敏感，索引的列使用二进制排序后，可以执行大小写敏感的全文索引\n\n```\n// 创建表的时候创建索引\n// 创建全文索引 别名为 name_info 索引字段为 name\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tFULLTEXT KEY name_info (name)\n) engine=MyISAM;\n// 已存在表中创建索引\ncreate FULLTEXT INDEX name_info on table_test (name)\n// 修改表结构添加索引\nalter table table_test add FULLTEXT INDEX name_info (name)\n// 查看表结构\nshow create table table_test;\n```\n\n### 单列索引\n>只对应一个字段的索引\n\n```\n// 创建表的时候创建索引\n// 创建单列索引 别名为 name_info 索引字段为 name，索引字段长度为20\n// 数据表中的字段长度为30，而创建的索引的字段长度为20，这样做的目的是为了提高查询效率，优化查询速度\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tINDEX name_info (name(20))\n);\n// 已存在表中创建索引\ncreate INDEX name_info on table_test (name(20))\n// 修改表结构添加索引\nalter table table_test add INDEX name_info (name(20))\n// 查看表结构\nshow create table table_test;\n```\n\n### 多列索引\n>表的多个字段上创建索引  \n应用此索引，必须使用这些字段的第一个字段\n\n```\n// 创建表的时候创建索引\n// 创建多列索引 别名为 info 索引字段为 name、sex\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tsex bit(1) not null,\n\tINDEX info (name,sex)\n);\n// 已存在表中创建索引\ncreate INDEX info on table_test (name,sex)\n// 修改表结构添加索引\nalter table table_test add INDEX info (name,sex)\n// 查看表结构\nshow create table table_test;\n```\n\n### 空间索引\n>使用SPATIAL参数可以设置空间索引  \n只能建立在数据类型为空间类型的字段上  \nmysql只有MyISAM存储引擎支持空间检索，且索引的字段不能为空值  \n空间类型：geometry、point、linestring、polygon\n\n```\n// 创建表的时候创建索引\n// 创建空间索引 别名为 good_info 索引字段为 good\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tgood geometry not null,\n\tSPATIAL INDEX good_info (good)\n);\n// 已存在表中创建索引\ncreate SPATIAL INDEX good_info on table_test (good)\n// 修改表结构添加索引\nalter table table_test add SPATIAL INDEX good_info (good)\n// 查看表结构\nshow create table table_test;\n```","source":"_posts/mysql_index.md","raw":"---\ntitle: MYSQL之索引\ndate: 2018-07-15 19:21:01\ntags: 数据库\ncategories: MySQL\n---\n>索引的两种存储类型：B树(BTree)索引、哈希(Hash)索引  \nBTree为系统默认索引\n\n### 创建表时建立索引\n```\ncreate table (\n\t属性名 长度 是否为空,\n\t[UNIQUE | FULLTEXT | SPATIAL ]  INDEX|KEY [别名]( 属性名1 [(长度)] [ASC | DESC])\n)\n```\n\n### 已建立的表中创建索引\n```\ncreate [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])\n```\n\n### 修改表结构添加索引\n```\nalter table table_name add [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])\n```\n\n### 删除索引\n```\ndrop INDEX 属性名 on table_name\n```\n\n>1. []是可选项  \n>2. [UNIQUE | FULLTEXT | SPATIAL ] 可选项，分别代表唯一性索引、全文索引、空间索引\n>3. INDEX和KEY参数其中一个即可，用于指定字段索引\n>4. 别名为可选项，创建的索引取新名称  \n\t别名的参数如下：  \n\t属性名1 必选项，指索引对应的字段名称，该字段必须预选被定义到表中  \n\t长度\t可选项，索引的长度，必须是字符串类型才可以使用  \n\tASC/DESC可选项，ASC表示升序排列，DESC表示降序排列  \n>5. table_name 表名称\n\n### 普通索引\n>在任何数据类型的字段中创建索引\n\n```\n// 创建表的时候创建索引\n// 创建了索引列 id\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tindex(id)\n);\n// 已存在表中创建索引\ncreate index info on table_test (id)\n// 修改表结构添加索引\nalter table table_test add index info (id)\n// 查看表结构\nshow create table table_test;\n```\n\n### 唯一性索引\n>使用UNIQUE参数设置唯一索引，该索引的值必须唯一  \n主键是一种特殊的唯一索引\n\n```\n// 创建表的时候创建索引\n// 创建唯一索引 别名为 name 索引字段为 id，索引存储排序为 asc\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tUNIQUE INDEX name (id asc)\n);\n// 已存在表中创建索引\ncreate UNIQUE INDEX name on table_test (id asc)\n// 修改表结构添加索引\nalter table table_test add UNIQUE INDEX name (id asc)\n// 查看表结构\nshow create table table_test;\n```\n\n### 全文索引\n>使用FULLTEXT参数设置全文索引  \n只有myisam存储引擎的数据表支持fulltext全文索引  \n只能创建在数据类型为 char、varchar、text的字段上  \n默认情况下，应用全文索引大小写不敏感，索引的列使用二进制排序后，可以执行大小写敏感的全文索引\n\n```\n// 创建表的时候创建索引\n// 创建全文索引 别名为 name_info 索引字段为 name\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tFULLTEXT KEY name_info (name)\n) engine=MyISAM;\n// 已存在表中创建索引\ncreate FULLTEXT INDEX name_info on table_test (name)\n// 修改表结构添加索引\nalter table table_test add FULLTEXT INDEX name_info (name)\n// 查看表结构\nshow create table table_test;\n```\n\n### 单列索引\n>只对应一个字段的索引\n\n```\n// 创建表的时候创建索引\n// 创建单列索引 别名为 name_info 索引字段为 name，索引字段长度为20\n// 数据表中的字段长度为30，而创建的索引的字段长度为20，这样做的目的是为了提高查询效率，优化查询速度\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tINDEX name_info (name(20))\n);\n// 已存在表中创建索引\ncreate INDEX name_info on table_test (name(20))\n// 修改表结构添加索引\nalter table table_test add INDEX name_info (name(20))\n// 查看表结构\nshow create table table_test;\n```\n\n### 多列索引\n>表的多个字段上创建索引  \n应用此索引，必须使用这些字段的第一个字段\n\n```\n// 创建表的时候创建索引\n// 创建多列索引 别名为 info 索引字段为 name、sex\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tname varchar(30) not null,\n\tsex bit(1) not null,\n\tINDEX info (name,sex)\n);\n// 已存在表中创建索引\ncreate INDEX info on table_test (name,sex)\n// 修改表结构添加索引\nalter table table_test add INDEX info (name,sex)\n// 查看表结构\nshow create table table_test;\n```\n\n### 空间索引\n>使用SPATIAL参数可以设置空间索引  \n只能建立在数据类型为空间类型的字段上  \nmysql只有MyISAM存储引擎支持空间检索，且索引的字段不能为空值  \n空间类型：geometry、point、linestring、polygon\n\n```\n// 创建表的时候创建索引\n// 创建空间索引 别名为 good_info 索引字段为 good\ncreate table if not exists table_test(\n\tid int(11) not null auto_increment primary key,\n\tgood geometry not null,\n\tSPATIAL INDEX good_info (good)\n);\n// 已存在表中创建索引\ncreate SPATIAL INDEX good_info on table_test (good)\n// 修改表结构添加索引\nalter table table_test add SPATIAL INDEX good_info (good)\n// 查看表结构\nshow create table table_test;\n```","slug":"mysql_index","published":1,"updated":"2019-04-09T14:27:55.236Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmbg002hvjcg2r5h8h8l","content":"<blockquote>\n<p>索引的两种存储类型：B树(BTree)索引、哈希(Hash)索引<br>BTree为系统默认索引</p>\n</blockquote>\n<h3 id=\"创建表时建立索引\"><a href=\"#创建表时建立索引\" class=\"headerlink\" title=\"创建表时建立索引\"></a>创建表时建立索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table (</span><br><span class=\"line\">\t属性名 长度 是否为空,</span><br><span class=\"line\">\t[UNIQUE | FULLTEXT | SPATIAL ]  INDEX|KEY [别名]( 属性名1 [(长度)] [ASC | DESC])</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"已建立的表中创建索引\"><a href=\"#已建立的表中创建索引\" class=\"headerlink\" title=\"已建立的表中创建索引\"></a>已建立的表中创建索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改表结构添加索引\"><a href=\"#修改表结构添加索引\" class=\"headerlink\" title=\"修改表结构添加索引\"></a>修改表结构添加索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_name add [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop INDEX 属性名 on table_name</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>[]是可选项  </li>\n<li>[UNIQUE | FULLTEXT | SPATIAL ] 可选项，分别代表唯一性索引、全文索引、空间索引</li>\n<li>INDEX和KEY参数其中一个即可，用于指定字段索引</li>\n<li>别名为可选项，创建的索引取新名称<br> 别名的参数如下：<br> 属性名1 必选项，指索引对应的字段名称，该字段必须预选被定义到表中<br> 长度    可选项，索引的长度，必须是字符串类型才可以使用<br> ASC/DESC可选项，ASC表示升序排列，DESC表示降序排列  </li>\n<li>table_name 表名称</li>\n</ol>\n</blockquote>\n<h3 id=\"普通索引\"><a href=\"#普通索引\" class=\"headerlink\" title=\"普通索引\"></a>普通索引</h3><blockquote>\n<p>在任何数据类型的字段中创建索引</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建了索引列 id</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tindex(id)</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create index info on table_test (id)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add index info (id)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"唯一性索引\"><a href=\"#唯一性索引\" class=\"headerlink\" title=\"唯一性索引\"></a>唯一性索引</h3><blockquote>\n<p>使用UNIQUE参数设置唯一索引，该索引的值必须唯一<br>主键是一种特殊的唯一索引</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建唯一索引 别名为 name 索引字段为 id，索引存储排序为 asc</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tUNIQUE INDEX name (id asc)</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create UNIQUE INDEX name on table_test (id asc)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add UNIQUE INDEX name (id asc)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"全文索引\"><a href=\"#全文索引\" class=\"headerlink\" title=\"全文索引\"></a>全文索引</h3><blockquote>\n<p>使用FULLTEXT参数设置全文索引<br>只有myisam存储引擎的数据表支持fulltext全文索引<br>只能创建在数据类型为 char、varchar、text的字段上<br>默认情况下，应用全文索引大小写不敏感，索引的列使用二进制排序后，可以执行大小写敏感的全文索引</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建全文索引 别名为 name_info 索引字段为 name</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tFULLTEXT KEY name_info (name)</span><br><span class=\"line\">) engine=MyISAM;</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create FULLTEXT INDEX name_info on table_test (name)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add FULLTEXT INDEX name_info (name)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单列索引\"><a href=\"#单列索引\" class=\"headerlink\" title=\"单列索引\"></a>单列索引</h3><blockquote>\n<p>只对应一个字段的索引</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建单列索引 别名为 name_info 索引字段为 name，索引字段长度为20</span><br><span class=\"line\">// 数据表中的字段长度为30，而创建的索引的字段长度为20，这样做的目的是为了提高查询效率，优化查询速度</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tINDEX name_info (name(20))</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create INDEX name_info on table_test (name(20))</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add INDEX name_info (name(20))</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多列索引\"><a href=\"#多列索引\" class=\"headerlink\" title=\"多列索引\"></a>多列索引</h3><blockquote>\n<p>表的多个字段上创建索引<br>应用此索引，必须使用这些字段的第一个字段</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建多列索引 别名为 info 索引字段为 name、sex</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tsex bit(1) not null,</span><br><span class=\"line\">\tINDEX info (name,sex)</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create INDEX info on table_test (name,sex)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add INDEX info (name,sex)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"空间索引\"><a href=\"#空间索引\" class=\"headerlink\" title=\"空间索引\"></a>空间索引</h3><blockquote>\n<p>使用SPATIAL参数可以设置空间索引<br>只能建立在数据类型为空间类型的字段上<br>mysql只有MyISAM存储引擎支持空间检索，且索引的字段不能为空值<br>空间类型：geometry、point、linestring、polygon</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建空间索引 别名为 good_info 索引字段为 good</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tgood geometry not null,</span><br><span class=\"line\">\tSPATIAL INDEX good_info (good)</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create SPATIAL INDEX good_info on table_test (good)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add SPATIAL INDEX good_info (good)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>索引的两种存储类型：B树(BTree)索引、哈希(Hash)索引<br>BTree为系统默认索引</p>\n</blockquote>\n<h3 id=\"创建表时建立索引\"><a href=\"#创建表时建立索引\" class=\"headerlink\" title=\"创建表时建立索引\"></a>创建表时建立索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create table (</span><br><span class=\"line\">\t属性名 长度 是否为空,</span><br><span class=\"line\">\t[UNIQUE | FULLTEXT | SPATIAL ]  INDEX|KEY [别名]( 属性名1 [(长度)] [ASC | DESC])</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<h3 id=\"已建立的表中创建索引\"><a href=\"#已建立的表中创建索引\" class=\"headerlink\" title=\"已建立的表中创建索引\"></a>已建立的表中创建索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改表结构添加索引\"><a href=\"#修改表结构添加索引\" class=\"headerlink\" title=\"修改表结构添加索引\"></a>修改表结构添加索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table table_name add [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除索引\"><a href=\"#删除索引\" class=\"headerlink\" title=\"删除索引\"></a>删除索引</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drop INDEX 属性名 on table_name</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ol>\n<li>[]是可选项  </li>\n<li>[UNIQUE | FULLTEXT | SPATIAL ] 可选项，分别代表唯一性索引、全文索引、空间索引</li>\n<li>INDEX和KEY参数其中一个即可，用于指定字段索引</li>\n<li>别名为可选项，创建的索引取新名称<br> 别名的参数如下：<br> 属性名1 必选项，指索引对应的字段名称，该字段必须预选被定义到表中<br> 长度    可选项，索引的长度，必须是字符串类型才可以使用<br> ASC/DESC可选项，ASC表示升序排列，DESC表示降序排列  </li>\n<li>table_name 表名称</li>\n</ol>\n</blockquote>\n<h3 id=\"普通索引\"><a href=\"#普通索引\" class=\"headerlink\" title=\"普通索引\"></a>普通索引</h3><blockquote>\n<p>在任何数据类型的字段中创建索引</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建了索引列 id</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tindex(id)</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create index info on table_test (id)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add index info (id)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"唯一性索引\"><a href=\"#唯一性索引\" class=\"headerlink\" title=\"唯一性索引\"></a>唯一性索引</h3><blockquote>\n<p>使用UNIQUE参数设置唯一索引，该索引的值必须唯一<br>主键是一种特殊的唯一索引</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建唯一索引 别名为 name 索引字段为 id，索引存储排序为 asc</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tUNIQUE INDEX name (id asc)</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create UNIQUE INDEX name on table_test (id asc)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add UNIQUE INDEX name (id asc)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"全文索引\"><a href=\"#全文索引\" class=\"headerlink\" title=\"全文索引\"></a>全文索引</h3><blockquote>\n<p>使用FULLTEXT参数设置全文索引<br>只有myisam存储引擎的数据表支持fulltext全文索引<br>只能创建在数据类型为 char、varchar、text的字段上<br>默认情况下，应用全文索引大小写不敏感，索引的列使用二进制排序后，可以执行大小写敏感的全文索引</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建全文索引 别名为 name_info 索引字段为 name</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tFULLTEXT KEY name_info (name)</span><br><span class=\"line\">) engine=MyISAM;</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create FULLTEXT INDEX name_info on table_test (name)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add FULLTEXT INDEX name_info (name)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"单列索引\"><a href=\"#单列索引\" class=\"headerlink\" title=\"单列索引\"></a>单列索引</h3><blockquote>\n<p>只对应一个字段的索引</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建单列索引 别名为 name_info 索引字段为 name，索引字段长度为20</span><br><span class=\"line\">// 数据表中的字段长度为30，而创建的索引的字段长度为20，这样做的目的是为了提高查询效率，优化查询速度</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tINDEX name_info (name(20))</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create INDEX name_info on table_test (name(20))</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add INDEX name_info (name(20))</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"多列索引\"><a href=\"#多列索引\" class=\"headerlink\" title=\"多列索引\"></a>多列索引</h3><blockquote>\n<p>表的多个字段上创建索引<br>应用此索引，必须使用这些字段的第一个字段</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建多列索引 别名为 info 索引字段为 name、sex</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tname varchar(30) not null,</span><br><span class=\"line\">\tsex bit(1) not null,</span><br><span class=\"line\">\tINDEX info (name,sex)</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create INDEX info on table_test (name,sex)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add INDEX info (name,sex)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>\n<h3 id=\"空间索引\"><a href=\"#空间索引\" class=\"headerlink\" title=\"空间索引\"></a>空间索引</h3><blockquote>\n<p>使用SPATIAL参数可以设置空间索引<br>只能建立在数据类型为空间类型的字段上<br>mysql只有MyISAM存储引擎支持空间检索，且索引的字段不能为空值<br>空间类型：geometry、point、linestring、polygon</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 创建表的时候创建索引</span><br><span class=\"line\">// 创建空间索引 别名为 good_info 索引字段为 good</span><br><span class=\"line\">create table if not exists table_test(</span><br><span class=\"line\">\tid int(11) not null auto_increment primary key,</span><br><span class=\"line\">\tgood geometry not null,</span><br><span class=\"line\">\tSPATIAL INDEX good_info (good)</span><br><span class=\"line\">);</span><br><span class=\"line\">// 已存在表中创建索引</span><br><span class=\"line\">create SPATIAL INDEX good_info on table_test (good)</span><br><span class=\"line\">// 修改表结构添加索引</span><br><span class=\"line\">alter table table_test add SPATIAL INDEX good_info (good)</span><br><span class=\"line\">// 查看表结构</span><br><span class=\"line\">show create table table_test;</span><br></pre></td></tr></table></figure>"},{"title":"PHP设计模式之结构型模式（structural patterns）","date":"2018-06-17T12:21:01.000Z","_content":"### 适配器模式\n>涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。  \n适配器继承或依赖已有的对象，实现想要的目标接口。  \n**优点：**  \n>1. 可以让任何两个没有关联的类一起运行。  \n>2. 提高了类的复用。  \n>3. 增加了类的透明度。  \n>4. 灵活性好。  \n>\n>**缺点：**\n>1. 过多使用适配器会让系统凌乱，不易整体把握，没有必要，不建议使用适配器模式  \n>\n>**注意事项：**   \n>适配器不是在详细设计时使用的，而是在解决正在服役的项目使用的\n\n```\n<?php\n/**\n * adapter pattern  适配器模式\n */\n// 对象适配器\n// 定义接口\ninterface target\n{\n\tpublic function echoSample1();\n\tpublic function echoSample2();\n}\nclass adapterOne implements target\n{\n\tpublic function echoSample1()\n\t{\n\t\techo \"+++++\";\n\t}\n\tpublic function echoSample2()\n\t{\n\t\t\n\t}\n}\nclass adapterTwo implements target\n{\n\tprivate $adapterOne;\n\tpublic function __construct(adapterOne $obj)\n\t{\n\t\t$this->adapterOne = $obj;\n\t}\n\tpublic function echoSample1()\n\t{\n\t\t$this->adapterOne->echoSample1();\n\t}\n\tpublic function echoSample2()\n\t{\n\t\techo '----';\n\t}\n}\n$adapterTwo = new adapterTwo(new adapterOne);\n$adapterTwo->echoSample1();\n$adapterTwo->echoSample2();\n\n// 类适配器\ninterface target2\n{\n\tpublic function echoSample1();\n\tpublic function echoSample2();\n}\nclass adapterClassOne\n{\n\tpublic function echoSample1()\n\t{\n\t\techo \"****\";\n\t}\n}\nclass adapterClassTwo extends adapterClassOne implements target2\n{\n\tpublic function echoSample2()\n\t{\n\t\techo \"&&&&\";\n\t}\n}\n$adapterClassTwo = new adapterClassTwo();\n$adapterClassTwo->echoSample1();\n$adapterClassTwo->echoSample2();\n```\n\n### 桥接模式\n>把抽象化与实现化解耦，使得二者可以独立变化  \n抽象类依赖实现类。  \n**优点：**  \n>1. 抽象和实现的分离。 \n>2. 优秀的扩展能力。 \n>3. 实现细节对客户透明。\n>\n>**缺点：**  \n桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。  \n>**注意事项：**  \n对于两个独立变化的维度，使用桥接模式再适合不过了。\n\n```\n<?php\n/**\n * 桥接模式 -- bridge pattern\n */\n// 定义接口--对象\ninterface DrawApi\n{\n\tpublic function draw();\n}\nclass RedColor implements DrawApi\n{\n\tpublic function draw()\n\t{\n\t\techo \"red color\";\n\t}\n}\nclass GreenColor implements DrawApi\n{\n\tpublic function draw()\n\t{\n\t\techo \"green color\";\n\t}\n}\n// 定义抽象类\nabstract class Shape\n{\n\tabstract public function draw();\n}\nclass Circle extends Shape\n{\n\tprivate $drawApi;\n\tpublic function __construct(DrawApi $obj)\n\t{\n\t\t$this->drawApi = $obj;\n\t}\n\tpublic function draw()\n\t{\n\t\t$this->drawApi->draw();\n\t}\n}\n\n$obj = new Circle(new RedColor());\n$obj->draw();\n$obj2 = new Circle(new GreenColor());\n$obj2->draw();\n```\n\n### 过滤器模式  \n>使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来\n\n```\n<?php\n/**\n * 过滤器模式 -- filter pattern\n */\n// 定义接口\ninterface Shape\n{\n\tpublic function arrayPrint(array $arr);\n}\nclass One implements Shape\n{\n\tpublic function arrayPrint(array $arr)\n\t{\n\t\t$array = array();\n\t\tforeach($arr as $v){\n\t\t\tif($v->getName() == 'one'){\n\t\t\t\t$array[] = $v;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n}\nclass Two implements Shape\n{\n\tpublic function arrayPrint(array $arr)\n\t{\n\t\t$array = array();\n\t\tforeach($arr as $v){\n\t\t\tif($v->getName() == 'two'){\n\t\t\t\t$array[] = $v;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n}\nclass Three implements Shape\n{\n\tpublic function arrayPrint(array $arr)\n\t{\n\t\t$array = array();\n\t\tforeach($arr as $v){\n\t\t\tif($v->getID() == '2'){\n\t\t\t\t$array[] = $v;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n}\n\n// 定义标准类\nclass Data\n{\n\tprivate $id;\n\tprivate $name;\n\tpublic function __construct($id, $name)\n\t{\n\t\t$this->id = $id;\n\t\t$this->name = $name;\n\t}\n\tpublic function getID()\n\t{\n\t\treturn $this->id;\n\t}\n\tpublic function getName()\n\t{\n\t\treturn $this->name;\n\t}\n}\n\n$array = array();\n$array[] = new Data('1', 'one');\n$array[] = new Data('2', 'one');\n$array[] = new Data('3', 'two');\n$array[] = new Data('4', 'three');\n\n$one = new One();\narrayPrint($one->arrayPrint($array));\n$two = new Two();\narrayPrint($two->arrayPrint($array));\n\n$three = new Three();\narrayPrint($three->arrayPrint($one->arrayPrint($array)));\n\nfunction arrayPrint($arr)\n{\n\tforeach($arr as $v){\n\t\techo $v->getID();\n\t\techo $v->getName();\n\t}\n}\n```\n\n### 组合模式\n>一组相似的对象当作一个单一的对象  \n组合模式依据树形结构来组合对象，用来表示部分以及整体层次  \n**意图：**  \n将对象组合成树形结构以表示\"部分-整体\"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。  \n**优点：**\n>1. 高层模块调用简单。\n>2. 节点自由增加。\n>\n>**缺点：**  \n在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。  \n**注意事项：**  \n定义时为具体类。\n\n```\n<?php\n/**\n * 组合模式  -- composite pattern\n */\ninterface Shape\n{\n\tpublic function add($obj);\n\tpublic function remove($obj);\n\tpublic function operator();\n}\nclass Composite implements Shape\n{\n\tprivate $_composite;\n\tpublic function __construct()\n\t{\n\t\t$this->_composite = array();\n\t}\n\tpublic function operator()\n\t{\n\t\tforeach($this->_composite as $v){\n\t\t\t$v->operator();\n\t\t}\n\t}\n\tpublic function add($obj)\n\t{\n\t\t$this->_composite[] = $obj;\n\t}\n\tpublic function remove($obj)\n\t{\n\t\tforeach($this->_composite as $k=>$v){\n\t\t\tif($obj == $v){\n\t\t\t\tunset($this->_composite[$k]);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nclass Leaf implements Shape\n{\n\tprivate $_name;\n\tpublic function __construct($name)\n\t{\n\t\t$this->_name = $name;\n\t}\n\tpublic function add($obj){}\n\tpublic function remove($obj){}\n\tpublic function operator()\n\t{\n\t\techo $this->_name;\n\t}\n}\n$leaf1 = new Leaf('one');\n$leaf2 = new Leaf('two');\n$composite = new Composite();\n$composite->add($leaf1);\n$composite->add($leaf2);\n$composite->operator();\n$composite->remove($leaf1);\n$composite->operator();\n```\n\n### 装饰器模式\n>允许向一个现有的对象添加新的功能，同时又不改变其结构  \n**优点：**\n装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。  \n**缺点：**  \n多层装饰比较复杂。  \n**注意事项：**  \n可代替继承。\n\n```\n<?php\n/**\n * 装饰器模式  -- decorator pattern\n */\n// 定义接口\ninterface Shape\n{\n\tpublic function draw();\n}\nclass Decorator implements Shape\n{\n\tprivate $_decorator;\n\tpublic function __construct(Shape $decorator)\n\t{\n\t\t$this->_decorator = $decorator;\n\t}\n\tpublic function draw()\n\t{\n\t\t$this->_decorator->draw();\n\t}\n}\nclass RedColor extends Decorator\n{\n\tpublic function __construct(Shape $decorator)\n\t{\n\t\tparent::__construct($decorator);\n\t}\n\tpublic function draw()\n\t{\n\t\tparent::draw();\n\t\t$this->echoDraw();\n\t}\n\tpublic function echoDraw()\n\t{\n\t\techo \"red color\";\n\t}\n}\nclass GreenColor extends Decorator\n{\n\tpublic function __construct(Shape $decorator)\n\t{\n\t\tparent::__construct($decorator);\n\t}\n\tpublic function draw()\n\t{\n\t\tparent::draw();\n\t\t$this->echoDraw();\n\t}\n\tpublic function echoDraw()\n\t{\n\t\techo \"green color\";\n\t}\n}\nclass Color implements Shape\n{\n\tpublic function draw(){\n\t\techo \"color\";\n\t}\n}\n$obj = new Color();\n$obj_red = new RedColor($obj);\n$obj_green = new GreenColor($obj_red);\n$obj_red->draw();\n$obj_green->draw();\n```\n\n### 外观模式\n>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口  \n在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。  \n**优点：**\n>1. 减少系统相互依赖。 \n>2. 提高灵活性。 \n>3. 提高了安全性。\n>\n>**缺点：**  \n不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。  \n**注意事项：**  \n在层次化结构中，可以使用外观模式定义系统中每一层的入口。\n\n```\n<?php\n/**\n * 门面模式/外观模式  -- facade pattern\n */\n//定义接口\ninterface Shape\n{\n\tpublic function draw();\n}\nclass Red implements Shape\n{\n\tpublic function draw()\n\t{\n\t\techo \"red\";\n\t}\n}\nclass Green implements Shape\n{\n\tpublic function draw()\n\t{\n\t\techo \"green\";\n\t}\n}\nclass Demo\n{\n\tprivate $_red;\n\tprivate $_green;\n\tpublic function __construct()\n\t{\n\t\t$this->_red = new Red();\n\t\t$this->_green = new Green();\n\t}\n\tpublic function draw()\n\t{\n\t\t$this->_red->draw();\n\t\t$this->_green->draw();\n\t}\n}\n$obj = new Demo();\n$obj->draw();\n```\n\n### 享元模式\n>减少创建对象的数量，以减少内存占用和提高性能  \n用 HashMap 存储这些对象。  \n**优点：**  \n大大减少对象的创建，降低系统的内存，使效率提高。  \n**缺点：**  \n提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。  \n**注意事项：**  \n>1. 注意划分外部状态和内部状态，否则可能会引起线程安全问题。 \n>2. 这些类必须有一个工厂对象加以控制\n\n```\n<?php\n/**\n * 享元模式  -- flyweight pattern\n */\nabstract class Resource\n{\n\tprivate $_resource = null;\n\tabstract public function operator();\n}\nclass UnShare extends Resource\n{\n\tpublic function __construct($str)\n\t{\n\t\t$this->_resource = $str;\n\t}\n\tpublic function operator()\n\t{\n\t\techo $this->_resource;\n\t}\n}\nclass Share extends Resource\n{\n\tprivate $_resources = array();\n\tpublic function setResource($str)\n\t{\n\t\tif(isset($this->_resources[$str])){\n\t\t\treturn $this->_resources[$str];\n\t\t}else{\n\t\t\treturn $this->_resources[$str] = $str;\n\t\t}\n\t}\n\tpublic function operator()\n\t{\n\t\tforeach($this->_resources as $key=>$val){\n\t\t\techo $key . '=>' . $val;\n\t\t}\n\t}\n}\n$obj = new Share();\n$obj->setResource('a');\n$obj->operator();\n$obj->setResource('b');\n$obj->operator();\n$objUnShare = new UnShare('A');\n$objUnShare->operator();\n$objUnShare = new UnShare('B');\n$objUnShare->operator();\n```\n\n### 代理模式\n>为其他对象提供一种代理以控制对这个对象的访问。  \n实现与被代理类组合。  \n**优点：**\n>1. 职责清晰。 \n>2. 高扩展性。 \n>3. 智能化。  \n>\n>**缺点：** \n>1. 由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。\n>2. 实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n>\n>**注意事项：** \n>1. 和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 \n>2. 和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。\n\n```\n<?php\n/**\n * 代理模式  -- proxy pattern\n */\nabstract class Subject\n{\n\tabstract public function draw();\n}\nclass RealSubject extends Subject\n{\n\tpublic function draw()\n\t{\n\t\techo \"real subject\";\n\t}\n}\nclass ProxySubject extends Subject\n{\n\tprivate $_subject = null;\n\tpublic function draw()\n\t{\n\t\t$this->before();\n\t\tif(is_null($this->_subject)){\n\t\t\t$this->_subject = new RealSubject();\n\t\t}\n\t\t$this->_subject->draw();\n\t\t$this->after();\n\t}\n\tpublic function before()\n\t{\n\t\techo \"before\";\n\t}\n\tpublic function after()\n\t{\n\t\techo \"after\";\n\t}\n}\n$obj = new ProxySubject();\n$obj->draw();\n```","source":"_posts/structrual_patterns.md","raw":"---\ntitle: PHP设计模式之结构型模式（structural patterns）\ndate: 2018-06-17 20:21:01\ntags: 设计模式\ncategories: 设计模式\n---\n### 适配器模式\n>涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。  \n适配器继承或依赖已有的对象，实现想要的目标接口。  \n**优点：**  \n>1. 可以让任何两个没有关联的类一起运行。  \n>2. 提高了类的复用。  \n>3. 增加了类的透明度。  \n>4. 灵活性好。  \n>\n>**缺点：**\n>1. 过多使用适配器会让系统凌乱，不易整体把握，没有必要，不建议使用适配器模式  \n>\n>**注意事项：**   \n>适配器不是在详细设计时使用的，而是在解决正在服役的项目使用的\n\n```\n<?php\n/**\n * adapter pattern  适配器模式\n */\n// 对象适配器\n// 定义接口\ninterface target\n{\n\tpublic function echoSample1();\n\tpublic function echoSample2();\n}\nclass adapterOne implements target\n{\n\tpublic function echoSample1()\n\t{\n\t\techo \"+++++\";\n\t}\n\tpublic function echoSample2()\n\t{\n\t\t\n\t}\n}\nclass adapterTwo implements target\n{\n\tprivate $adapterOne;\n\tpublic function __construct(adapterOne $obj)\n\t{\n\t\t$this->adapterOne = $obj;\n\t}\n\tpublic function echoSample1()\n\t{\n\t\t$this->adapterOne->echoSample1();\n\t}\n\tpublic function echoSample2()\n\t{\n\t\techo '----';\n\t}\n}\n$adapterTwo = new adapterTwo(new adapterOne);\n$adapterTwo->echoSample1();\n$adapterTwo->echoSample2();\n\n// 类适配器\ninterface target2\n{\n\tpublic function echoSample1();\n\tpublic function echoSample2();\n}\nclass adapterClassOne\n{\n\tpublic function echoSample1()\n\t{\n\t\techo \"****\";\n\t}\n}\nclass adapterClassTwo extends adapterClassOne implements target2\n{\n\tpublic function echoSample2()\n\t{\n\t\techo \"&&&&\";\n\t}\n}\n$adapterClassTwo = new adapterClassTwo();\n$adapterClassTwo->echoSample1();\n$adapterClassTwo->echoSample2();\n```\n\n### 桥接模式\n>把抽象化与实现化解耦，使得二者可以独立变化  \n抽象类依赖实现类。  \n**优点：**  \n>1. 抽象和实现的分离。 \n>2. 优秀的扩展能力。 \n>3. 实现细节对客户透明。\n>\n>**缺点：**  \n桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。  \n>**注意事项：**  \n对于两个独立变化的维度，使用桥接模式再适合不过了。\n\n```\n<?php\n/**\n * 桥接模式 -- bridge pattern\n */\n// 定义接口--对象\ninterface DrawApi\n{\n\tpublic function draw();\n}\nclass RedColor implements DrawApi\n{\n\tpublic function draw()\n\t{\n\t\techo \"red color\";\n\t}\n}\nclass GreenColor implements DrawApi\n{\n\tpublic function draw()\n\t{\n\t\techo \"green color\";\n\t}\n}\n// 定义抽象类\nabstract class Shape\n{\n\tabstract public function draw();\n}\nclass Circle extends Shape\n{\n\tprivate $drawApi;\n\tpublic function __construct(DrawApi $obj)\n\t{\n\t\t$this->drawApi = $obj;\n\t}\n\tpublic function draw()\n\t{\n\t\t$this->drawApi->draw();\n\t}\n}\n\n$obj = new Circle(new RedColor());\n$obj->draw();\n$obj2 = new Circle(new GreenColor());\n$obj2->draw();\n```\n\n### 过滤器模式  \n>使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来\n\n```\n<?php\n/**\n * 过滤器模式 -- filter pattern\n */\n// 定义接口\ninterface Shape\n{\n\tpublic function arrayPrint(array $arr);\n}\nclass One implements Shape\n{\n\tpublic function arrayPrint(array $arr)\n\t{\n\t\t$array = array();\n\t\tforeach($arr as $v){\n\t\t\tif($v->getName() == 'one'){\n\t\t\t\t$array[] = $v;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n}\nclass Two implements Shape\n{\n\tpublic function arrayPrint(array $arr)\n\t{\n\t\t$array = array();\n\t\tforeach($arr as $v){\n\t\t\tif($v->getName() == 'two'){\n\t\t\t\t$array[] = $v;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n}\nclass Three implements Shape\n{\n\tpublic function arrayPrint(array $arr)\n\t{\n\t\t$array = array();\n\t\tforeach($arr as $v){\n\t\t\tif($v->getID() == '2'){\n\t\t\t\t$array[] = $v;\n\t\t\t}\n\t\t}\n\t\treturn $array;\n\t}\n}\n\n// 定义标准类\nclass Data\n{\n\tprivate $id;\n\tprivate $name;\n\tpublic function __construct($id, $name)\n\t{\n\t\t$this->id = $id;\n\t\t$this->name = $name;\n\t}\n\tpublic function getID()\n\t{\n\t\treturn $this->id;\n\t}\n\tpublic function getName()\n\t{\n\t\treturn $this->name;\n\t}\n}\n\n$array = array();\n$array[] = new Data('1', 'one');\n$array[] = new Data('2', 'one');\n$array[] = new Data('3', 'two');\n$array[] = new Data('4', 'three');\n\n$one = new One();\narrayPrint($one->arrayPrint($array));\n$two = new Two();\narrayPrint($two->arrayPrint($array));\n\n$three = new Three();\narrayPrint($three->arrayPrint($one->arrayPrint($array)));\n\nfunction arrayPrint($arr)\n{\n\tforeach($arr as $v){\n\t\techo $v->getID();\n\t\techo $v->getName();\n\t}\n}\n```\n\n### 组合模式\n>一组相似的对象当作一个单一的对象  \n组合模式依据树形结构来组合对象，用来表示部分以及整体层次  \n**意图：**  \n将对象组合成树形结构以表示\"部分-整体\"的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。  \n**优点：**\n>1. 高层模块调用简单。\n>2. 节点自由增加。\n>\n>**缺点：**  \n在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。  \n**注意事项：**  \n定义时为具体类。\n\n```\n<?php\n/**\n * 组合模式  -- composite pattern\n */\ninterface Shape\n{\n\tpublic function add($obj);\n\tpublic function remove($obj);\n\tpublic function operator();\n}\nclass Composite implements Shape\n{\n\tprivate $_composite;\n\tpublic function __construct()\n\t{\n\t\t$this->_composite = array();\n\t}\n\tpublic function operator()\n\t{\n\t\tforeach($this->_composite as $v){\n\t\t\t$v->operator();\n\t\t}\n\t}\n\tpublic function add($obj)\n\t{\n\t\t$this->_composite[] = $obj;\n\t}\n\tpublic function remove($obj)\n\t{\n\t\tforeach($this->_composite as $k=>$v){\n\t\t\tif($obj == $v){\n\t\t\t\tunset($this->_composite[$k]);\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n\nclass Leaf implements Shape\n{\n\tprivate $_name;\n\tpublic function __construct($name)\n\t{\n\t\t$this->_name = $name;\n\t}\n\tpublic function add($obj){}\n\tpublic function remove($obj){}\n\tpublic function operator()\n\t{\n\t\techo $this->_name;\n\t}\n}\n$leaf1 = new Leaf('one');\n$leaf2 = new Leaf('two');\n$composite = new Composite();\n$composite->add($leaf1);\n$composite->add($leaf2);\n$composite->operator();\n$composite->remove($leaf1);\n$composite->operator();\n```\n\n### 装饰器模式\n>允许向一个现有的对象添加新的功能，同时又不改变其结构  \n**优点：**\n装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。  \n**缺点：**  \n多层装饰比较复杂。  \n**注意事项：**  \n可代替继承。\n\n```\n<?php\n/**\n * 装饰器模式  -- decorator pattern\n */\n// 定义接口\ninterface Shape\n{\n\tpublic function draw();\n}\nclass Decorator implements Shape\n{\n\tprivate $_decorator;\n\tpublic function __construct(Shape $decorator)\n\t{\n\t\t$this->_decorator = $decorator;\n\t}\n\tpublic function draw()\n\t{\n\t\t$this->_decorator->draw();\n\t}\n}\nclass RedColor extends Decorator\n{\n\tpublic function __construct(Shape $decorator)\n\t{\n\t\tparent::__construct($decorator);\n\t}\n\tpublic function draw()\n\t{\n\t\tparent::draw();\n\t\t$this->echoDraw();\n\t}\n\tpublic function echoDraw()\n\t{\n\t\techo \"red color\";\n\t}\n}\nclass GreenColor extends Decorator\n{\n\tpublic function __construct(Shape $decorator)\n\t{\n\t\tparent::__construct($decorator);\n\t}\n\tpublic function draw()\n\t{\n\t\tparent::draw();\n\t\t$this->echoDraw();\n\t}\n\tpublic function echoDraw()\n\t{\n\t\techo \"green color\";\n\t}\n}\nclass Color implements Shape\n{\n\tpublic function draw(){\n\t\techo \"color\";\n\t}\n}\n$obj = new Color();\n$obj_red = new RedColor($obj);\n$obj_green = new GreenColor($obj_red);\n$obj_red->draw();\n$obj_green->draw();\n```\n\n### 外观模式\n>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口  \n在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。  \n**优点：**\n>1. 减少系统相互依赖。 \n>2. 提高灵活性。 \n>3. 提高了安全性。\n>\n>**缺点：**  \n不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。  \n**注意事项：**  \n在层次化结构中，可以使用外观模式定义系统中每一层的入口。\n\n```\n<?php\n/**\n * 门面模式/外观模式  -- facade pattern\n */\n//定义接口\ninterface Shape\n{\n\tpublic function draw();\n}\nclass Red implements Shape\n{\n\tpublic function draw()\n\t{\n\t\techo \"red\";\n\t}\n}\nclass Green implements Shape\n{\n\tpublic function draw()\n\t{\n\t\techo \"green\";\n\t}\n}\nclass Demo\n{\n\tprivate $_red;\n\tprivate $_green;\n\tpublic function __construct()\n\t{\n\t\t$this->_red = new Red();\n\t\t$this->_green = new Green();\n\t}\n\tpublic function draw()\n\t{\n\t\t$this->_red->draw();\n\t\t$this->_green->draw();\n\t}\n}\n$obj = new Demo();\n$obj->draw();\n```\n\n### 享元模式\n>减少创建对象的数量，以减少内存占用和提高性能  \n用 HashMap 存储这些对象。  \n**优点：**  \n大大减少对象的创建，降低系统的内存，使效率提高。  \n**缺点：**  \n提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。  \n**注意事项：**  \n>1. 注意划分外部状态和内部状态，否则可能会引起线程安全问题。 \n>2. 这些类必须有一个工厂对象加以控制\n\n```\n<?php\n/**\n * 享元模式  -- flyweight pattern\n */\nabstract class Resource\n{\n\tprivate $_resource = null;\n\tabstract public function operator();\n}\nclass UnShare extends Resource\n{\n\tpublic function __construct($str)\n\t{\n\t\t$this->_resource = $str;\n\t}\n\tpublic function operator()\n\t{\n\t\techo $this->_resource;\n\t}\n}\nclass Share extends Resource\n{\n\tprivate $_resources = array();\n\tpublic function setResource($str)\n\t{\n\t\tif(isset($this->_resources[$str])){\n\t\t\treturn $this->_resources[$str];\n\t\t}else{\n\t\t\treturn $this->_resources[$str] = $str;\n\t\t}\n\t}\n\tpublic function operator()\n\t{\n\t\tforeach($this->_resources as $key=>$val){\n\t\t\techo $key . '=>' . $val;\n\t\t}\n\t}\n}\n$obj = new Share();\n$obj->setResource('a');\n$obj->operator();\n$obj->setResource('b');\n$obj->operator();\n$objUnShare = new UnShare('A');\n$objUnShare->operator();\n$objUnShare = new UnShare('B');\n$objUnShare->operator();\n```\n\n### 代理模式\n>为其他对象提供一种代理以控制对这个对象的访问。  \n实现与被代理类组合。  \n**优点：**\n>1. 职责清晰。 \n>2. 高扩展性。 \n>3. 智能化。  \n>\n>**缺点：** \n>1. 由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。\n>2. 实现代理模式需要额外的工作，有些代理模式的实现非常复杂。\n>\n>**注意事项：** \n>1. 和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 \n>2. 和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。\n\n```\n<?php\n/**\n * 代理模式  -- proxy pattern\n */\nabstract class Subject\n{\n\tabstract public function draw();\n}\nclass RealSubject extends Subject\n{\n\tpublic function draw()\n\t{\n\t\techo \"real subject\";\n\t}\n}\nclass ProxySubject extends Subject\n{\n\tprivate $_subject = null;\n\tpublic function draw()\n\t{\n\t\t$this->before();\n\t\tif(is_null($this->_subject)){\n\t\t\t$this->_subject = new RealSubject();\n\t\t}\n\t\t$this->_subject->draw();\n\t\t$this->after();\n\t}\n\tpublic function before()\n\t{\n\t\techo \"before\";\n\t}\n\tpublic function after()\n\t{\n\t\techo \"after\";\n\t}\n}\n$obj = new ProxySubject();\n$obj->draw();\n```","slug":"structrual_patterns","published":1,"updated":"2019-04-09T14:30:14.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmez0043vjcgdcm6sby5","content":"<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><blockquote>\n<p>涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。<br>适配器继承或依赖已有的对象，实现想要的目标接口。<br><strong>优点：</strong>  </p>\n<ol>\n<li>可以让任何两个没有关联的类一起运行。  </li>\n<li>提高了类的复用。  </li>\n<li>增加了类的透明度。  </li>\n<li>灵活性好。  </li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>过多使用适配器会让系统凌乱，不易整体把握，没有必要，不建议使用适配器模式  </li>\n</ol>\n<p><strong>注意事项：</strong><br>适配器不是在详细设计时使用的，而是在解决正在服役的项目使用的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * adapter pattern  适配器模式</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 对象适配器</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample1();</span><br><span class=\"line\">\tpublic function echoSample2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class adapterOne implements target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample1()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;+++++&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoSample2()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class adapterTwo implements target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $adapterOne;</span><br><span class=\"line\">\tpublic function __construct(adapterOne $obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;adapterOne = $obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoSample1()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;adapterOne-&gt;echoSample1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoSample2()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &apos;----&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$adapterTwo = new adapterTwo(new adapterOne);</span><br><span class=\"line\">$adapterTwo-&gt;echoSample1();</span><br><span class=\"line\">$adapterTwo-&gt;echoSample2();</span><br><span class=\"line\"></span><br><span class=\"line\">// 类适配器</span><br><span class=\"line\">interface target2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample1();</span><br><span class=\"line\">\tpublic function echoSample2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class adapterClassOne</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample1()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;****&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class adapterClassTwo extends adapterClassOne implements target2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample2()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;&amp;&amp;&amp;&amp;&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$adapterClassTwo = new adapterClassTwo();</span><br><span class=\"line\">$adapterClassTwo-&gt;echoSample1();</span><br><span class=\"line\">$adapterClassTwo-&gt;echoSample2();</span><br></pre></td></tr></table></figure>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><blockquote>\n<p>把抽象化与实现化解耦，使得二者可以独立变化<br>抽象类依赖实现类。<br><strong>优点：</strong>  </p>\n<ol>\n<li>抽象和实现的分离。 </li>\n<li>优秀的扩展能力。 </li>\n<li>实现细节对客户透明。</li>\n</ol>\n<p><strong>缺点：</strong><br>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。<br><strong>注意事项：</strong><br>对于两个独立变化的维度，使用桥接模式再适合不过了。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 桥接模式 -- bridge pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口--对象</span><br><span class=\"line\">interface DrawApi</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RedColor implements DrawApi</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;red color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class GreenColor implements DrawApi</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;green color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 定义抽象类</span><br><span class=\"line\">abstract class Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tabstract public function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Circle extends Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $drawApi;</span><br><span class=\"line\">\tpublic function __construct(DrawApi $obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;drawApi = $obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;drawApi-&gt;draw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = new Circle(new RedColor());</span><br><span class=\"line\">$obj-&gt;draw();</span><br><span class=\"line\">$obj2 = new Circle(new GreenColor());</span><br><span class=\"line\">$obj2-&gt;draw();</span><br></pre></td></tr></table></figure>\n<h3 id=\"过滤器模式\"><a href=\"#过滤器模式\" class=\"headerlink\" title=\"过滤器模式\"></a>过滤器模式</h3><blockquote>\n<p>使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 过滤器模式 -- filter pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function arrayPrint(array $arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class One implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function arrayPrint(array $arr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$array = array();</span><br><span class=\"line\">\t\tforeach($arr as $v)&#123;</span><br><span class=\"line\">\t\t\tif($v-&gt;getName() == &apos;one&apos;)&#123;</span><br><span class=\"line\">\t\t\t\t$array[] = $v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $array;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Two implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function arrayPrint(array $arr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$array = array();</span><br><span class=\"line\">\t\tforeach($arr as $v)&#123;</span><br><span class=\"line\">\t\t\tif($v-&gt;getName() == &apos;two&apos;)&#123;</span><br><span class=\"line\">\t\t\t\t$array[] = $v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $array;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Three implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function arrayPrint(array $arr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$array = array();</span><br><span class=\"line\">\t\tforeach($arr as $v)&#123;</span><br><span class=\"line\">\t\t\tif($v-&gt;getID() == &apos;2&apos;)&#123;</span><br><span class=\"line\">\t\t\t\t$array[] = $v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $array;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义标准类</span><br><span class=\"line\">class Data</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $id;</span><br><span class=\"line\">\tprivate $name;</span><br><span class=\"line\">\tpublic function __construct($id, $name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;id = $id;</span><br><span class=\"line\">\t\t$this-&gt;name = $name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getID()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = array();</span><br><span class=\"line\">$array[] = new Data(&apos;1&apos;, &apos;one&apos;);</span><br><span class=\"line\">$array[] = new Data(&apos;2&apos;, &apos;one&apos;);</span><br><span class=\"line\">$array[] = new Data(&apos;3&apos;, &apos;two&apos;);</span><br><span class=\"line\">$array[] = new Data(&apos;4&apos;, &apos;three&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">$one = new One();</span><br><span class=\"line\">arrayPrint($one-&gt;arrayPrint($array));</span><br><span class=\"line\">$two = new Two();</span><br><span class=\"line\">arrayPrint($two-&gt;arrayPrint($array));</span><br><span class=\"line\"></span><br><span class=\"line\">$three = new Three();</span><br><span class=\"line\">arrayPrint($three-&gt;arrayPrint($one-&gt;arrayPrint($array)));</span><br><span class=\"line\"></span><br><span class=\"line\">function arrayPrint($arr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tforeach($arr as $v)&#123;</span><br><span class=\"line\">\t\techo $v-&gt;getID();</span><br><span class=\"line\">\t\techo $v-&gt;getName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><blockquote>\n<p>一组相似的对象当作一个单一的对象<br>组合模式依据树形结构来组合对象，用来表示部分以及整体层次<br><strong>意图：</strong><br>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。<br><strong>优点：</strong></p>\n<ol>\n<li>高层模块调用简单。</li>\n<li>节点自由增加。</li>\n</ol>\n<p><strong>缺点：</strong><br>在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。<br><strong>注意事项：</strong><br>定义时为具体类。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 组合模式  -- composite pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function add($obj);</span><br><span class=\"line\">\tpublic function remove($obj);</span><br><span class=\"line\">\tpublic function operator();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Composite implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_composite;</span><br><span class=\"line\">\tpublic function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_composite = array();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_composite as $v)&#123;</span><br><span class=\"line\">\t\t\t$v-&gt;operator();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function add($obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_composite[] = $obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function remove($obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_composite as $k=&gt;$v)&#123;</span><br><span class=\"line\">\t\t\tif($obj == $v)&#123;</span><br><span class=\"line\">\t\t\t\tunset($this-&gt;_composite[$k]);</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Leaf implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_name;</span><br><span class=\"line\">\tpublic function __construct($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_name = $name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function add($obj)&#123;&#125;</span><br><span class=\"line\">\tpublic function remove($obj)&#123;&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo $this-&gt;_name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$leaf1 = new Leaf(&apos;one&apos;);</span><br><span class=\"line\">$leaf2 = new Leaf(&apos;two&apos;);</span><br><span class=\"line\">$composite = new Composite();</span><br><span class=\"line\">$composite-&gt;add($leaf1);</span><br><span class=\"line\">$composite-&gt;add($leaf2);</span><br><span class=\"line\">$composite-&gt;operator();</span><br><span class=\"line\">$composite-&gt;remove($leaf1);</span><br><span class=\"line\">$composite-&gt;operator();</span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h3><blockquote>\n<p>允许向一个现有的对象添加新的功能，同时又不改变其结构<br><strong>优点：</strong><br>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。<br><strong>缺点：</strong><br>多层装饰比较复杂。<br><strong>注意事项：</strong><br>可代替继承。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 装饰器模式  -- decorator pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Decorator implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_decorator;</span><br><span class=\"line\">\tpublic function __construct(Shape $decorator)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_decorator = $decorator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_decorator-&gt;draw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RedColor extends Decorator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function __construct(Shape $decorator)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tparent::__construct($decorator);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tparent::draw();</span><br><span class=\"line\">\t\t$this-&gt;echoDraw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoDraw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;red color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class GreenColor extends Decorator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function __construct(Shape $decorator)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tparent::__construct($decorator);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tparent::draw();</span><br><span class=\"line\">\t\t$this-&gt;echoDraw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoDraw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;green color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Color implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()&#123;</span><br><span class=\"line\">\t\techo &quot;color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new Color();</span><br><span class=\"line\">$obj_red = new RedColor($obj);</span><br><span class=\"line\">$obj_green = new GreenColor($obj_red);</span><br><span class=\"line\">$obj_red-&gt;draw();</span><br><span class=\"line\">$obj_green-&gt;draw();</span><br></pre></td></tr></table></figure>\n<h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h3><blockquote>\n<p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口<br>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。<br><strong>优点：</strong></p>\n<ol>\n<li>减少系统相互依赖。 </li>\n<li>提高灵活性。 </li>\n<li>提高了安全性。</li>\n</ol>\n<p><strong>缺点：</strong><br>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。<br><strong>注意事项：</strong><br>在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 门面模式/外观模式  -- facade pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">//定义接口</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Red implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;red&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Green implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;green&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Demo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_red;</span><br><span class=\"line\">\tprivate $_green;</span><br><span class=\"line\">\tpublic function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_red = new Red();</span><br><span class=\"line\">\t\t$this-&gt;_green = new Green();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_red-&gt;draw();</span><br><span class=\"line\">\t\t$this-&gt;_green-&gt;draw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new Demo();</span><br><span class=\"line\">$obj-&gt;draw();</span><br></pre></td></tr></table></figure>\n<h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><blockquote>\n<p>减少创建对象的数量，以减少内存占用和提高性能<br>用 HashMap 存储这些对象。<br><strong>优点：</strong><br>大大减少对象的创建，降低系统的内存，使效率提高。<br><strong>缺点：</strong><br>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。<br><strong>注意事项：</strong>  </p>\n<ol>\n<li>注意划分外部状态和内部状态，否则可能会引起线程安全问题。 </li>\n<li>这些类必须有一个工厂对象加以控制</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 享元模式  -- flyweight pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Resource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_resource = null;</span><br><span class=\"line\">\tabstract public function operator();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UnShare extends Resource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function __construct($str)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_resource = $str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo $this-&gt;_resource;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Share extends Resource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_resources = array();</span><br><span class=\"line\">\tpublic function setResource($str)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(isset($this-&gt;_resources[$str]))&#123;</span><br><span class=\"line\">\t\t\treturn $this-&gt;_resources[$str];</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\treturn $this-&gt;_resources[$str] = $str;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_resources as $key=&gt;$val)&#123;</span><br><span class=\"line\">\t\t\techo $key . &apos;=&gt;&apos; . $val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new Share();</span><br><span class=\"line\">$obj-&gt;setResource(&apos;a&apos;);</span><br><span class=\"line\">$obj-&gt;operator();</span><br><span class=\"line\">$obj-&gt;setResource(&apos;b&apos;);</span><br><span class=\"line\">$obj-&gt;operator();</span><br><span class=\"line\">$objUnShare = new UnShare(&apos;A&apos;);</span><br><span class=\"line\">$objUnShare-&gt;operator();</span><br><span class=\"line\">$objUnShare = new UnShare(&apos;B&apos;);</span><br><span class=\"line\">$objUnShare-&gt;operator();</span><br></pre></td></tr></table></figure>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><blockquote>\n<p>为其他对象提供一种代理以控制对这个对象的访问。<br>实现与被代理类组合。<br><strong>优点：</strong></p>\n<ol>\n<li>职责清晰。 </li>\n<li>高扩展性。 </li>\n<li>智能化。  </li>\n</ol>\n<p><strong>缺点：</strong> </p>\n<ol>\n<li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li>\n<li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li>\n</ol>\n<p><strong>注意事项：</strong> </p>\n<ol>\n<li>和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 </li>\n<li>和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 代理模式  -- proxy pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tabstract public function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RealSubject extends Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;real subject&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ProxySubject extends Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_subject = null;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;before();</span><br><span class=\"line\">\t\tif(is_null($this-&gt;_subject))&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;_subject = new RealSubject();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$this-&gt;_subject-&gt;draw();</span><br><span class=\"line\">\t\t$this-&gt;after();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function before()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;before&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function after()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;after&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new ProxySubject();</span><br><span class=\"line\">$obj-&gt;draw();</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"适配器模式\"><a href=\"#适配器模式\" class=\"headerlink\" title=\"适配器模式\"></a>适配器模式</h3><blockquote>\n<p>涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。<br>适配器继承或依赖已有的对象，实现想要的目标接口。<br><strong>优点：</strong>  </p>\n<ol>\n<li>可以让任何两个没有关联的类一起运行。  </li>\n<li>提高了类的复用。  </li>\n<li>增加了类的透明度。  </li>\n<li>灵活性好。  </li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>过多使用适配器会让系统凌乱，不易整体把握，没有必要，不建议使用适配器模式  </li>\n</ol>\n<p><strong>注意事项：</strong><br>适配器不是在详细设计时使用的，而是在解决正在服役的项目使用的</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * adapter pattern  适配器模式</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 对象适配器</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample1();</span><br><span class=\"line\">\tpublic function echoSample2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class adapterOne implements target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample1()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;+++++&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoSample2()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class adapterTwo implements target</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $adapterOne;</span><br><span class=\"line\">\tpublic function __construct(adapterOne $obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;adapterOne = $obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoSample1()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;adapterOne-&gt;echoSample1();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoSample2()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &apos;----&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$adapterTwo = new adapterTwo(new adapterOne);</span><br><span class=\"line\">$adapterTwo-&gt;echoSample1();</span><br><span class=\"line\">$adapterTwo-&gt;echoSample2();</span><br><span class=\"line\"></span><br><span class=\"line\">// 类适配器</span><br><span class=\"line\">interface target2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample1();</span><br><span class=\"line\">\tpublic function echoSample2();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class adapterClassOne</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample1()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;****&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class adapterClassTwo extends adapterClassOne implements target2</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function echoSample2()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;&amp;&amp;&amp;&amp;&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$adapterClassTwo = new adapterClassTwo();</span><br><span class=\"line\">$adapterClassTwo-&gt;echoSample1();</span><br><span class=\"line\">$adapterClassTwo-&gt;echoSample2();</span><br></pre></td></tr></table></figure>\n<h3 id=\"桥接模式\"><a href=\"#桥接模式\" class=\"headerlink\" title=\"桥接模式\"></a>桥接模式</h3><blockquote>\n<p>把抽象化与实现化解耦，使得二者可以独立变化<br>抽象类依赖实现类。<br><strong>优点：</strong>  </p>\n<ol>\n<li>抽象和实现的分离。 </li>\n<li>优秀的扩展能力。 </li>\n<li>实现细节对客户透明。</li>\n</ol>\n<p><strong>缺点：</strong><br>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。<br><strong>注意事项：</strong><br>对于两个独立变化的维度，使用桥接模式再适合不过了。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 桥接模式 -- bridge pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口--对象</span><br><span class=\"line\">interface DrawApi</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RedColor implements DrawApi</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;red color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class GreenColor implements DrawApi</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;green color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 定义抽象类</span><br><span class=\"line\">abstract class Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tabstract public function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Circle extends Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $drawApi;</span><br><span class=\"line\">\tpublic function __construct(DrawApi $obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;drawApi = $obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;drawApi-&gt;draw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$obj = new Circle(new RedColor());</span><br><span class=\"line\">$obj-&gt;draw();</span><br><span class=\"line\">$obj2 = new Circle(new GreenColor());</span><br><span class=\"line\">$obj2-&gt;draw();</span><br></pre></td></tr></table></figure>\n<h3 id=\"过滤器模式\"><a href=\"#过滤器模式\" class=\"headerlink\" title=\"过滤器模式\"></a>过滤器模式</h3><blockquote>\n<p>使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 过滤器模式 -- filter pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function arrayPrint(array $arr);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class One implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function arrayPrint(array $arr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$array = array();</span><br><span class=\"line\">\t\tforeach($arr as $v)&#123;</span><br><span class=\"line\">\t\t\tif($v-&gt;getName() == &apos;one&apos;)&#123;</span><br><span class=\"line\">\t\t\t\t$array[] = $v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $array;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Two implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function arrayPrint(array $arr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$array = array();</span><br><span class=\"line\">\t\tforeach($arr as $v)&#123;</span><br><span class=\"line\">\t\t\tif($v-&gt;getName() == &apos;two&apos;)&#123;</span><br><span class=\"line\">\t\t\t\t$array[] = $v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $array;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Three implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function arrayPrint(array $arr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$array = array();</span><br><span class=\"line\">\t\tforeach($arr as $v)&#123;</span><br><span class=\"line\">\t\t\tif($v-&gt;getID() == &apos;2&apos;)&#123;</span><br><span class=\"line\">\t\t\t\t$array[] = $v;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn $array;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 定义标准类</span><br><span class=\"line\">class Data</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $id;</span><br><span class=\"line\">\tprivate $name;</span><br><span class=\"line\">\tpublic function __construct($id, $name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;id = $id;</span><br><span class=\"line\">\t\t$this-&gt;name = $name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getID()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;id;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">$array = array();</span><br><span class=\"line\">$array[] = new Data(&apos;1&apos;, &apos;one&apos;);</span><br><span class=\"line\">$array[] = new Data(&apos;2&apos;, &apos;one&apos;);</span><br><span class=\"line\">$array[] = new Data(&apos;3&apos;, &apos;two&apos;);</span><br><span class=\"line\">$array[] = new Data(&apos;4&apos;, &apos;three&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">$one = new One();</span><br><span class=\"line\">arrayPrint($one-&gt;arrayPrint($array));</span><br><span class=\"line\">$two = new Two();</span><br><span class=\"line\">arrayPrint($two-&gt;arrayPrint($array));</span><br><span class=\"line\"></span><br><span class=\"line\">$three = new Three();</span><br><span class=\"line\">arrayPrint($three-&gt;arrayPrint($one-&gt;arrayPrint($array)));</span><br><span class=\"line\"></span><br><span class=\"line\">function arrayPrint($arr)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tforeach($arr as $v)&#123;</span><br><span class=\"line\">\t\techo $v-&gt;getID();</span><br><span class=\"line\">\t\techo $v-&gt;getName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"组合模式\"><a href=\"#组合模式\" class=\"headerlink\" title=\"组合模式\"></a>组合模式</h3><blockquote>\n<p>一组相似的对象当作一个单一的对象<br>组合模式依据树形结构来组合对象，用来表示部分以及整体层次<br><strong>意图：</strong><br>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。<br><strong>优点：</strong></p>\n<ol>\n<li>高层模块调用简单。</li>\n<li>节点自由增加。</li>\n</ol>\n<p><strong>缺点：</strong><br>在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。<br><strong>注意事项：</strong><br>定义时为具体类。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 组合模式  -- composite pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function add($obj);</span><br><span class=\"line\">\tpublic function remove($obj);</span><br><span class=\"line\">\tpublic function operator();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Composite implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_composite;</span><br><span class=\"line\">\tpublic function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_composite = array();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_composite as $v)&#123;</span><br><span class=\"line\">\t\t\t$v-&gt;operator();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function add($obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_composite[] = $obj;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function remove($obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_composite as $k=&gt;$v)&#123;</span><br><span class=\"line\">\t\t\tif($obj == $v)&#123;</span><br><span class=\"line\">\t\t\t\tunset($this-&gt;_composite[$k]);</span><br><span class=\"line\">\t\t\t\treturn true;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Leaf implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_name;</span><br><span class=\"line\">\tpublic function __construct($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_name = $name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function add($obj)&#123;&#125;</span><br><span class=\"line\">\tpublic function remove($obj)&#123;&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo $this-&gt;_name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$leaf1 = new Leaf(&apos;one&apos;);</span><br><span class=\"line\">$leaf2 = new Leaf(&apos;two&apos;);</span><br><span class=\"line\">$composite = new Composite();</span><br><span class=\"line\">$composite-&gt;add($leaf1);</span><br><span class=\"line\">$composite-&gt;add($leaf2);</span><br><span class=\"line\">$composite-&gt;operator();</span><br><span class=\"line\">$composite-&gt;remove($leaf1);</span><br><span class=\"line\">$composite-&gt;operator();</span><br></pre></td></tr></table></figure>\n<h3 id=\"装饰器模式\"><a href=\"#装饰器模式\" class=\"headerlink\" title=\"装饰器模式\"></a>装饰器模式</h3><blockquote>\n<p>允许向一个现有的对象添加新的功能，同时又不改变其结构<br><strong>优点：</strong><br>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。<br><strong>缺点：</strong><br>多层装饰比较复杂。<br><strong>注意事项：</strong><br>可代替继承。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 装饰器模式  -- decorator pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Decorator implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_decorator;</span><br><span class=\"line\">\tpublic function __construct(Shape $decorator)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_decorator = $decorator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_decorator-&gt;draw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RedColor extends Decorator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function __construct(Shape $decorator)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tparent::__construct($decorator);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tparent::draw();</span><br><span class=\"line\">\t\t$this-&gt;echoDraw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoDraw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;red color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class GreenColor extends Decorator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function __construct(Shape $decorator)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tparent::__construct($decorator);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tparent::draw();</span><br><span class=\"line\">\t\t$this-&gt;echoDraw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function echoDraw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;green color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Color implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()&#123;</span><br><span class=\"line\">\t\techo &quot;color&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new Color();</span><br><span class=\"line\">$obj_red = new RedColor($obj);</span><br><span class=\"line\">$obj_green = new GreenColor($obj_red);</span><br><span class=\"line\">$obj_red-&gt;draw();</span><br><span class=\"line\">$obj_green-&gt;draw();</span><br></pre></td></tr></table></figure>\n<h3 id=\"外观模式\"><a href=\"#外观模式\" class=\"headerlink\" title=\"外观模式\"></a>外观模式</h3><blockquote>\n<p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口<br>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。<br><strong>优点：</strong></p>\n<ol>\n<li>减少系统相互依赖。 </li>\n<li>提高灵活性。 </li>\n<li>提高了安全性。</li>\n</ol>\n<p><strong>缺点：</strong><br>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。<br><strong>注意事项：</strong><br>在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 门面模式/外观模式  -- facade pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">//定义接口</span><br><span class=\"line\">interface Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Red implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;red&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Green implements Shape</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;green&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Demo</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_red;</span><br><span class=\"line\">\tprivate $_green;</span><br><span class=\"line\">\tpublic function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_red = new Red();</span><br><span class=\"line\">\t\t$this-&gt;_green = new Green();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_red-&gt;draw();</span><br><span class=\"line\">\t\t$this-&gt;_green-&gt;draw();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new Demo();</span><br><span class=\"line\">$obj-&gt;draw();</span><br></pre></td></tr></table></figure>\n<h3 id=\"享元模式\"><a href=\"#享元模式\" class=\"headerlink\" title=\"享元模式\"></a>享元模式</h3><blockquote>\n<p>减少创建对象的数量，以减少内存占用和提高性能<br>用 HashMap 存储这些对象。<br><strong>优点：</strong><br>大大减少对象的创建，降低系统的内存，使效率提高。<br><strong>缺点：</strong><br>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。<br><strong>注意事项：</strong>  </p>\n<ol>\n<li>注意划分外部状态和内部状态，否则可能会引起线程安全问题。 </li>\n<li>这些类必须有一个工厂对象加以控制</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 享元模式  -- flyweight pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Resource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_resource = null;</span><br><span class=\"line\">\tabstract public function operator();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UnShare extends Resource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function __construct($str)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_resource = $str;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo $this-&gt;_resource;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Share extends Resource</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_resources = array();</span><br><span class=\"line\">\tpublic function setResource($str)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(isset($this-&gt;_resources[$str]))&#123;</span><br><span class=\"line\">\t\t\treturn $this-&gt;_resources[$str];</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\treturn $this-&gt;_resources[$str] = $str;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_resources as $key=&gt;$val)&#123;</span><br><span class=\"line\">\t\t\techo $key . &apos;=&gt;&apos; . $val;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new Share();</span><br><span class=\"line\">$obj-&gt;setResource(&apos;a&apos;);</span><br><span class=\"line\">$obj-&gt;operator();</span><br><span class=\"line\">$obj-&gt;setResource(&apos;b&apos;);</span><br><span class=\"line\">$obj-&gt;operator();</span><br><span class=\"line\">$objUnShare = new UnShare(&apos;A&apos;);</span><br><span class=\"line\">$objUnShare-&gt;operator();</span><br><span class=\"line\">$objUnShare = new UnShare(&apos;B&apos;);</span><br><span class=\"line\">$objUnShare-&gt;operator();</span><br></pre></td></tr></table></figure>\n<h3 id=\"代理模式\"><a href=\"#代理模式\" class=\"headerlink\" title=\"代理模式\"></a>代理模式</h3><blockquote>\n<p>为其他对象提供一种代理以控制对这个对象的访问。<br>实现与被代理类组合。<br><strong>优点：</strong></p>\n<ol>\n<li>职责清晰。 </li>\n<li>高扩展性。 </li>\n<li>智能化。  </li>\n</ol>\n<p><strong>缺点：</strong> </p>\n<ol>\n<li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li>\n<li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li>\n</ol>\n<p><strong>注意事项：</strong> </p>\n<ol>\n<li>和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 </li>\n<li>和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 代理模式  -- proxy pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tabstract public function draw();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RealSubject extends Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;real subject&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ProxySubject extends Subject</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_subject = null;</span><br><span class=\"line\">\tpublic function draw()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;before();</span><br><span class=\"line\">\t\tif(is_null($this-&gt;_subject))&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;_subject = new RealSubject();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$this-&gt;_subject-&gt;draw();</span><br><span class=\"line\">\t\t$this-&gt;after();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function before()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;before&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function after()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;after&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new ProxySubject();</span><br><span class=\"line\">$obj-&gt;draw();</span><br></pre></td></tr></table></figure>"},{"title":"PHP设计模式之行为型模式（behavioral patterns）","date":"2018-07-01T12:21:01.000Z","_content":"### 责任链模式\n>为请求创建了一个接收者对象的链  \n这种模式给予请求的类型，对请求的发送者和接收者进行解耦  \n**优点：**  \n>1. 降低耦合度。它将请求的发送者和接收者解耦。 \n>2. 简化了对象。使得对象不需要知道链的结构。 \n>3. 增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 \n>4. 增加新的请求处理类很方便。\n>\n>**缺点：**\n>1. 不能保证请求一定被接收。 \n>2. 系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 \n>3. 可能不容易观察运行时的特征，有碍于除错\n\n```\n<?php\n/**\n * 责任链模式  -- responsibility pattern\n */\nabstract class Responsibility\n{\n\tprotected $next;\n\tpublic function setNext(Responsibility $obj)\n\t{\n\t\t$this->next = $obj;\n\t\treturn $this;\n\t}\n\tabstract public function operator();\n}\nclass ResponsibilityA extends Responsibility\n{\n\tpublic function operator()\n\t{\n\t\tif(false == is_null($this->next)){\n\t\t\t$this->next->operator();\n\t\t\techo \"this is responsibility A\";\n\t\t}\n\t}\n}\nclass ResponsibilityB extends Responsibility\n{\n\tpublic function operator()\n\t{\n\t\tif(false == is_null($this->next)){\n\t\t\t$this->next->operator();\n\t\t\techo \"this is responsibility B\";\n\t\t}\n\t}\n}\n$responsibilityA = new ResponsibilityA();\n$responsibilityB = new ResponsibilityB();\n$responsibilityA->setNext($responsibilityB);\n$responsibilityA->operator();\n```\n\n### 命令模式\n>请求以命令的形式包裹在对象中，并传给调用对象。  \n调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。  \n通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。  \n**优点：**\n>1. 降低了系统耦合度。\n>2. 新的命令可以很容易添加到系统中去。\n>\n>**缺点：**  \n使用命令模式可能会导致某些系统有过多的具体命令类。\n\n```\n<?php\n/**\n * 命令模式  -- commandpattern\n */\n// 定义接口\ninterface Command\n{\n\tpublic function execute();\n}\nclass RealCommand implements Command\n{\n\tprivate $_receiver;\n\tpublic function __construct(Receiver $receiver)\n\t{\n\t\t$this->_receiver = $receiver;\n\t}\n\tpublic function execute()\n\t{\n\t\t$this->_receiver->action();\n\t}\n}\n// 接受者\nclass Receiver\n{\n\tprivate $_name;\n\tpublic function __construct($name)\n\t{\n\t\t$this->_name = $name;\n\t}\n\tpublic function action()\n\t{\n\t\techo \"this is receiver\" . $this->_name;\n\t}\n}\n// 请求者\nclass Invoker\n{\n\tprivate $_realCommand;\n\tpublic function __construct(RealCommand $realCommand)\n\t{\n\t\t$this->_realCommand = $realCommand;\n\t}\n\tpublic function operator()\n\t{\n\t\t$this->_realCommand->execute();\n\t}\n}\n$receiver = new Receiver('hello world');\n$realCommand = new RealCommand($receiver);\n$invoker = new Invoker($realCommand);\n$invoker->operator();\n```\n\n### 解释器模式\n>一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。  \n**优点：**\n>1. 可扩展性比较好，灵活。 \n>2. 增加了新的解释表达式的方式。 \n>3. 易于实现简单文法。\n>\n>**缺点：**\n>1. 可利用场景比较少。 \n>2. 对于复杂的文法比较难维护。 \n>3. 解释器模式会引起类膨胀。 \n>4. 解释器模式采用递归调用方法。\n\n```\n<?php\n/**\n * 解释器模式  -- interpreter pattern\n */\ninterface Expression\n{\n\tpublic function interpreter($data);\n}\nclass NumberExpression implements Expression\n{\n\tpublic function interpreter($num)\n\t{\n\t\tswitch($num){\n\t\t\tcase '0': return '零';\n\t\t\tcase '1': return '一';\n\t\t\tcase '2': return '二';\n\t\t\tcase '3': return '三';\n\t\t\tcase '4': return '四';\n\t\t\tcase '5': return '五';\n\t\t\tcase '6': return '六';\n\t\t\tcase '7': return '七';\n\t\t\tcase '8': return '八';\n\t\t\tcase '9': return '久';\n\t\t\tdefault: return '无';\n\t\t}\n\t}\n}\nclass StringExpression implements Expression\n{\n\tpublic function interpreter($str)\n\t{\n\t\treturn strtoupper($str);\n\t}\n}\nclass Interpreter\n{\n\tpublic function execute($string)\n\t{\n\t\t$expression = null;\n\t\tfor($i=0; $i<strlen($string); $i++){\n\t\t\tif(is_numeric($string[$i])){\n\t\t\t\t$expression = new NumberExpression();\n\t\t\t}elseif(is_string($string[$i])){\n\t\t\t\t$expression = new StringExpression();\n\t\t\t}\n\t\t\techo $expression->interpreter($string[$i]);\n\t\t\techo \"<br/>\";\n\t\t}\n\t}\n}\n$obj = new Interpreter();\n$obj->execute('123sqwe09843');\n```\n\n### 迭代器模式\n>顺序访问集合对象的元素，不需要知道集合对象的底层表示。  \n**优点：**\n>1. 它支持以不同的方式遍历一个聚合对象。 \n>2. 迭代器简化了聚合类。 \n>3. 在同一个聚合上可以有多个遍历。 \n>4. 在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。\n>\n>**缺点：**  \n由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。\n>\n>**注意事项：**  \n迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。\n\n```\n<?php\n/**\n * 迭代器模式  --  iterator pattern\n */\nclass Sample implements Iterator\n{\n\tprivate $_item;\n\tpublic function __construct($data)\n\t{\n\t\t$this->_item = $data;\n\t}\n\tpublic function current()\n\t{\n\t\treturn current($this->_item);\n\t}\n\tpublic function next()\n\t{\n\t\treturn next($this->_item);\n\t}\n\tpublic function key()\n\t{\n\t\treturn key($this->_item);\n\t}\n\tpublic function rewind()\n\t{\n\t\treset($this->_item);\n\t}\n\tpublic function valid()\n\t{\n\t\treturn ($this->current() !== false);\n\t}\n}\n$data = array('1', '2', '3', '4', '5');\n$obj = new Sample($data);\necho $obj->current();\necho $obj->next();\necho $obj->key();\necho $obj->rewind();\necho $obj->valid();\n```\n\n### 中介者模式\n>降低多个对象和类之间的通信复杂性。  \n该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。  \n**优点：**\n>1. 降低了类的复杂度，将一对多转化成了一对一。 \n>2. 各个类之间的解耦。 3、符合迪米特原则。\n>\n>**缺点：**  \n中介者会庞大，变得复杂难以维护。\n\n```\n<?php\n/**\n * 中介者模式  -- mediator pattern\n */\nabstract class Mediator\n{\n\tabstract public function send($message, $colleague);\n}\nabstract class Colleague\n{\n\tprivate $_mediator;\n\tpublic function __construct($mediator)\n\t{\n\t\t$this->_mediator = $mediator;\n\t}\n\tpublic function send($message)\n\t{\n\t\t$this->_mediator->send($message, $this);\n\t}\n\tabstract public function notify($message);\n}\nclass Colleague1 extends Colleague\n{\n\tpublic function notify($message)\n\t{\n\t\techo \"colleague1 \" . $message;\n\t}\n}\nclass Colleague2 extends Colleague\n{\n\tpublic function notify($message)\n\t{\n\t\techo \"colleague2 \" . $message;\n\t}\n}\nclass NewMediator extends Mediator\n{\n\tprivate $_colleauge1;\n\tprivate $_colleauge2;\n\tpublic function set($col1, $col2)\n\t{\n\t\t$this->_colleauge1 = $col1;\n\t\t$this->_colleauge2 = $col2;\n\t}\n\tpublic function send($message, $colleague)\n\t{\n\t\tif($this->_colleauge1 == $colleague){\n\t\t\t$this->_colleauge1->notify($message);\n\t\t}else{\n\t\t\t$this->_colleauge2->notify($message);\n\t\t}\n\t}\n}\n$newMediator = new NewMediator();\n$col1 = new Colleague1($newMediator);\n$col2 = new Colleague2($newMediator);\n$newMediator->set($col1, $col2);\n$col1->send('hello col1');\n$col2->send('hello col2');\n```\n\n### 备忘录模式\n>保存一个对象的某个状态，以便在适当的时候恢复对象  \n所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态  \n通过一个备忘录类专门存储对象状态  \n客户不与备忘录类耦合，与备忘录管理类耦合  \n>**优点：**  \n>1. 给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 \n>2. 实现了信息的封装，使得用户不需要关心状态的保存细节。  \n>\n>**缺点：**  \n消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。  \n>\n>**注意事项：**  \n>1. 为了符合迪米特原则，还要增加一个管理备忘录的类。 \n>2. 为了节约内存，可使用原型模式+备忘录模式。\n\n```\n<?php\n/**\n * 备忘录模式  --  memento pattern\n */\nclass Memento\n{\n\tprivate $_memento;\n\tpublic function __construct(string $state)\n\t{\n\t\t$this->_memento = $state;\n\t}\n\tpublic function getState()\n\t{\n\t\treturn $this->_memento;\n\t}\n}\nclass Originator\n{\n\tprivate $_state;\n\tpublic function setState(string $state)\n\t{\n\t\t$this->_state = $state;\n\t}\n\tpublic function getState()\n\t{\n\t\treturn $this->_state;\n\t}\n\tpublic function saveMemento()\n\t{\n\t\treturn new Memento($this->_state);\n\t}\n\tpublic function getMemento(Memento $memento)\n\t{\n\t\t$this->_state = $memento->getState();\n\t}\n}\nclass CakeTask\n{\n\tprivate $_mementoList;\n\tpublic function __construct()\n\t{\n\t\t$this->_mementoList = array();\n\t}\n\tpublic function add(Memento $memento)\n\t{\n\t\t$this->_mementoList[] = $memento;\n\t}\n\tpublic function get(int $index)\n\t{\n\t\treturn $this->_mementoList[$index];\n\t}\n}\n$originator = new Originator();\n$cakeTask = new CakeTask();\n$originator->setState('hello one');\n$originator->setState('hello two');\n$cakeTask->add($originator->saveMemento());\n$originator->setState('hello three');\n$cakeTask->add($originator->saveMemento());\n$originator->setState('hello four');\n\necho $originator->getState();\n$originator->getMemento($cakeTask->get(0));\necho $originator->getState();\n$originator->getMemento($cakeTask->get(1));\necho $originator->getState();\n```\n\n### 观察者模式\n>对象间存在一对多关系  \n当一个对象被修改时，则会自动通知它的依赖对象并被自动更新  \n**优点：**\n>1. 观察者和被观察者是抽象耦合的。 \n>2. 建立一套触发机制。\n>\n>**缺点：**\n>1. 如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 \n>2. 如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 \n>3. 观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。\n>\n>**注意事项：**\n>1. 避免循环引用。 \n>2. 如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。\n\n```\n<?php\n/**\n * 观察者模式  -- observer pattern\n */\n// 定义接口\ninterface Observer\n{\n\tpublic function onSendMsg($name);\n\tpublic function getName();\n}\nclass UserListLogger implements Observer\n{\n\tpublic function onSendMsg($name)\n\t{\n\t\techo $name . ' send to UserListLogger';\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'userlist_logger';\n\t}\n}\nclass OtherObserver implements Observer\n{\n\tpublic function onSendMsg($name)\n\t{\n\t\techo $name . ' send to OtherObserver';\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'other_observer';\n\t}\n}\ninterface Observerable\n{\n\tpublic function add(Observer $observer);\n\tpublic function remove($name);\n}\nclass UserList implements Observerable\n{\n\tprivate $_observer = array();\n\tpublic function add(Observer $observer)\n\t{\n\t\t$this->_observer[] = $observer;\n\t}\n\tpublic function remove($name)\n\t{\n\t\tforeach($this->_observer as $k=>$val){\n\t\t\tif($val->getName() == $name){\n\t\t\t\tunset($this->_observer[$k]);\n\t\t\t}\n\t\t}\n\t}\n\tpublic function sendMsg($name)\n\t{\n\t\tforeach($this->_observer as $val){\n\t\t\t$val->onSendMsg($name);\n\t\t}\n\t}\n}\n$userList = new UserList();\n$userList->add(new UserListLogger());\n$userList->add(new OtherObserver());\n$userList->sendMsg('jone');\n$userList->remove('userlist_logger');\n$userList->sendMsg('jami');\n```\n\n### 状态模式\n>类的行为是基于它的状态改变的  \n对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。  \n**优点：**\n>1. 封装了转换规则。 \n>2. 枚举可能的状态，在枚举状态之前需要确定状态种类。 \n>3. 将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 \n>4. 允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 \n>5. 可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。\n>\n>**缺点：**\n>1. 状态模式的使用必然会增加系统类和对象的个数。 \n>2. 状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 \n>3. 状态模式对\"开闭原则\"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。\n>\n>**注意事项：**  \n在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。\n\n```\n<?php\n/**\n * 状态模式  --  state pattern\n */\ninterface State\n{\n\tpublic function handle(Context $context);\n}\nclass StateA implements State\n{\n\tprivate static $_instance;\n\tprivate function __construct()\n\t{\n\n\t}\n\tpublic static function getInstance()\n\t{\n\t\tif(is_null(self::$_instance)){\n\t\t\tself::$_instance = new StateA();\n\t\t}\n\t\treturn self::$_instance;\n\t}\n\tpublic function handle(Context $context)\n\t{\n\t\techo \"context A\";\n\t\t$context->setState(StateB::getInstance());\n\t}\n}\nclass StateB implements State\n{\n\tprivate static $_instance;\n\tprivate function __construct()\n\t{\n\n\t}\n\tpublic static function getInstance()\n\t{\n\t\tif(is_null(self::$_instance)){\n\t\t\tself::$_instance = new StateB();\n\t\t}\n\t\treturn self::$_instance;\n\t}\n\tpublic function handle(Context $context)\n\t{\n\t\techo \"context B\";\n\t\t$context->setState(StateA::getInstance());\n\t}\n}\nclass Context{\n\tprivate $_state;\n\tpublic function __construct()\n\t{\n\t\t$this->_state = StateA::getInstance();\n\t}\n\tpublic function setState(State $state)\n\t{\n\t\t$this->_state = $state;\n\t}\n\tpublic function request()\n\t{\n\t\t$this->_state->handle($this);\n\t}\n}\n$context = new Context();\n$context->request();\n$context->request();\n$context->request();\n$context->request();\n```\n\n### 空对象模式\n>一个空对象取代 NULL 对象实例的检查  \n在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。\n\n```\n<?php\n/**\n * 空对象模式  --  null object pattern\n */\nabstract class AbstractCustom\n{\n\tprivate $_name;\n\tabstract public function isNil();\n\tabstract public function getName();\n}\nclass RealCustom extends AbstractCustom\n{\n\tprivate $_name;\n\tpublic function __construct($name)\n\t{\n\t\t$this->_name = $name;\n\t}\n\tpublic function getName()\n\t{\n\t\treturn $this->_name;\n\t}\n\tpublic function isNil()\n\t{\n\t\treturn false;\n\t}\n}\nclass NullCustom extends AbstractCustom\n{\n\tpublic function getName()\n\t{\n\t\treturn \"this is null custom\";\n\t}\n\tpublic function isNil()\n\t{\n\t\treturn false;\n\t}\n}\nclass NullFactory\n{\n\tprivate $_arr = array('one', 'two');\n\tpublic function getCustom($name){\n\t\tif(in_array($name, $this->_arr)){\n\t\t\treturn new RealCustom($name);\n\t\t}\n\t\treturn new NullCustom();\n\t}\n}\n$obj = new NullFactory();\n$test1 = $obj->getCustom('one');\n$test2 = $obj->getCustom('one_one');\n$test3 = $obj->getCustom('two');\n$test4 = $obj->getCustom('two_two');\necho $test1->getName();\necho $test2->getName();\necho $test3->getName();\necho $test4->getName();\n```\n\n### 策略模式\n>一个类的行为或其算法可以在运行时更改  \n定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换  \n**优点：**\n>1. 算法可以自由切换。 \n>2. 避免使用多重条件判断。 \n>3. 扩展性良好。\n>\n>**缺点：**\n>1. 策略类会增多。 \n>2. 所有策略类都需要对外暴露。\n>\n>**注意事项：**  \n如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题\n\n```\n<?php\n/**\n * 策略模式  -- strategy pattern\n */\ninterface Strategy\n{\n\tpublic function do_method();\n}\nclass StrategyA implements Strategy\n{\n\tpublic function do_method()\n\t{\n\t\techo \"this is strategy A\";\n\t}\n}\nclass StrategyB implements Strategy\n{\n\tpublic function do_method()\n\t{\n\t\techo \"this is strategy B\";\n\t}\n}\nclass StrategyC implements Strategy\n{\n\tpublic function do_method()\n\t{\n\t\techo \"this is strategy C\";\n\t}\n}\n\nclass Question\n{\n\tprivate $_strategy;\n\tpublic function __construct($strategy)\n\t{\n\t\t$this->_strategy = $strategy;\n\t}\n\tpublic function handle()\n\t{\n\t\t$this->_strategy->do_method();\n\t}\n}\n$a = new Question(new StrategyA());\n$a->handle();\n$b = new Question(new StrategyB());\n$b->handle();\n$c = new Question(new StrategyC());\n$c->handle();\n```\n\n### 模板模式\n>一些方法通用，却在每一个子类都重新写了这一方法  \n将这些通用算法抽象出来  \n在抽象类实现，其他步骤在子类实现  \n**优点：**\n>1. 封装不变部分，扩展可变部分。 \n>2. 提取公共代码，便于维护。 \n>3. 行为由父类控制，子类实现。\n>\n>**缺点：**  \n每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n>\n>**注意事项：**  \n为防止恶意操作，一般模板方法都加上 final 关键词。\n\n```\n<?php\n/**\n * 模板模式 -- template pattern\n */\nabstract class Game\n{\n\tabstract public function start();\n\tabstract public function end();\n\tpublic function action()\n\t{\n\t\t$this->start();\n\t\t$this->end();\n\t}\n}\nclass SuperMary extends Game\n{\n\tpublic function start()\n\t{\n\t\techo \"the game is starting\";\n\t}\n\tpublic function end()\n\t{\n\t\techo \"the game is ending\";\n\t}\n}\n$superMary = new SuperMary();\n$superMary->action();\n```\n\n### 访问者模式\n>使用了一个访问者类，它改变了元素类的执行算法  \n元素的执行算法可以随着访问者改变而改变  \n稳定的数据结构和易变的操作耦合问题。  \n在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。  \n**优点：**\n>1. 符合单一职责原则。 \n>2. 优秀的扩展性。 \n>3. 灵活性。\n>\n>**缺点：**\n>1. 具体元素对访问者公布细节，违反了迪米特原则。 \n>2. 具体元素变更比较困难。 \n>3. 违反了依赖倒置原则，依赖了具体类，没有依赖抽象。\n>\n>**注意事项：**  \n访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。\n\n```\n<?php\n/**\n *\n */\ninterface ComputerPart\n{\n\tpublic function accept(Visitor $visitor);\n}\nclass Computer implements ComputerPart\n{\n\tprivate $_computerPart = array();\n\tpublic function accept(Visitor $visitor)\n\t{\n\t\tforeach($this->_computerPart as $val){\n\t\t\t$val->accept($visitor);\n\t\t}\n\t\t$visitor->visit($this);\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'computer';\n\t}\n\tpublic function setAttach(ComputerPart $computerPart)\n\t{\n\t\tarray_push($this->_computerPart, $computerPart);\n\t}\n}\nclass Mouse implements ComputerPart\n{\n\tpublic function accept(Visitor $visitor)\n\t{\n\t\t$visitor->visit($this);\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'mouse';\n\t}\n}\nclass KeyBoard implements ComputerPart\n{\n\tpublic function accept(Visitor $visitor)\n\t{\n\t\t$visitor->visit($this);\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'keyboard';\n\t}\n}\nclass Visitor\n{\n\tpublic function visit(ComputerPart $computerPart)\n\t{\n\t\techo \"this is \".$computerPart->getName();\n\t}\n}\n$computer = new Computer();\n$computer->setAttach(new Mouse());\n$computer->setAttach(new KeyBoard());\n$computer->accept(new Visitor());\n```","source":"_posts/behavioral_patterns.md","raw":"---\ntitle: PHP设计模式之行为型模式（behavioral patterns）\ndate: 2018-07-01 20:21:01\ntags: 设计模式\ncategories: 设计模式\n---\n### 责任链模式\n>为请求创建了一个接收者对象的链  \n这种模式给予请求的类型，对请求的发送者和接收者进行解耦  \n**优点：**  \n>1. 降低耦合度。它将请求的发送者和接收者解耦。 \n>2. 简化了对象。使得对象不需要知道链的结构。 \n>3. 增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 \n>4. 增加新的请求处理类很方便。\n>\n>**缺点：**\n>1. 不能保证请求一定被接收。 \n>2. 系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 \n>3. 可能不容易观察运行时的特征，有碍于除错\n\n```\n<?php\n/**\n * 责任链模式  -- responsibility pattern\n */\nabstract class Responsibility\n{\n\tprotected $next;\n\tpublic function setNext(Responsibility $obj)\n\t{\n\t\t$this->next = $obj;\n\t\treturn $this;\n\t}\n\tabstract public function operator();\n}\nclass ResponsibilityA extends Responsibility\n{\n\tpublic function operator()\n\t{\n\t\tif(false == is_null($this->next)){\n\t\t\t$this->next->operator();\n\t\t\techo \"this is responsibility A\";\n\t\t}\n\t}\n}\nclass ResponsibilityB extends Responsibility\n{\n\tpublic function operator()\n\t{\n\t\tif(false == is_null($this->next)){\n\t\t\t$this->next->operator();\n\t\t\techo \"this is responsibility B\";\n\t\t}\n\t}\n}\n$responsibilityA = new ResponsibilityA();\n$responsibilityB = new ResponsibilityB();\n$responsibilityA->setNext($responsibilityB);\n$responsibilityA->operator();\n```\n\n### 命令模式\n>请求以命令的形式包裹在对象中，并传给调用对象。  \n调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。  \n通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。  \n**优点：**\n>1. 降低了系统耦合度。\n>2. 新的命令可以很容易添加到系统中去。\n>\n>**缺点：**  \n使用命令模式可能会导致某些系统有过多的具体命令类。\n\n```\n<?php\n/**\n * 命令模式  -- commandpattern\n */\n// 定义接口\ninterface Command\n{\n\tpublic function execute();\n}\nclass RealCommand implements Command\n{\n\tprivate $_receiver;\n\tpublic function __construct(Receiver $receiver)\n\t{\n\t\t$this->_receiver = $receiver;\n\t}\n\tpublic function execute()\n\t{\n\t\t$this->_receiver->action();\n\t}\n}\n// 接受者\nclass Receiver\n{\n\tprivate $_name;\n\tpublic function __construct($name)\n\t{\n\t\t$this->_name = $name;\n\t}\n\tpublic function action()\n\t{\n\t\techo \"this is receiver\" . $this->_name;\n\t}\n}\n// 请求者\nclass Invoker\n{\n\tprivate $_realCommand;\n\tpublic function __construct(RealCommand $realCommand)\n\t{\n\t\t$this->_realCommand = $realCommand;\n\t}\n\tpublic function operator()\n\t{\n\t\t$this->_realCommand->execute();\n\t}\n}\n$receiver = new Receiver('hello world');\n$realCommand = new RealCommand($receiver);\n$invoker = new Invoker($realCommand);\n$invoker->operator();\n```\n\n### 解释器模式\n>一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。  \n**优点：**\n>1. 可扩展性比较好，灵活。 \n>2. 增加了新的解释表达式的方式。 \n>3. 易于实现简单文法。\n>\n>**缺点：**\n>1. 可利用场景比较少。 \n>2. 对于复杂的文法比较难维护。 \n>3. 解释器模式会引起类膨胀。 \n>4. 解释器模式采用递归调用方法。\n\n```\n<?php\n/**\n * 解释器模式  -- interpreter pattern\n */\ninterface Expression\n{\n\tpublic function interpreter($data);\n}\nclass NumberExpression implements Expression\n{\n\tpublic function interpreter($num)\n\t{\n\t\tswitch($num){\n\t\t\tcase '0': return '零';\n\t\t\tcase '1': return '一';\n\t\t\tcase '2': return '二';\n\t\t\tcase '3': return '三';\n\t\t\tcase '4': return '四';\n\t\t\tcase '5': return '五';\n\t\t\tcase '6': return '六';\n\t\t\tcase '7': return '七';\n\t\t\tcase '8': return '八';\n\t\t\tcase '9': return '久';\n\t\t\tdefault: return '无';\n\t\t}\n\t}\n}\nclass StringExpression implements Expression\n{\n\tpublic function interpreter($str)\n\t{\n\t\treturn strtoupper($str);\n\t}\n}\nclass Interpreter\n{\n\tpublic function execute($string)\n\t{\n\t\t$expression = null;\n\t\tfor($i=0; $i<strlen($string); $i++){\n\t\t\tif(is_numeric($string[$i])){\n\t\t\t\t$expression = new NumberExpression();\n\t\t\t}elseif(is_string($string[$i])){\n\t\t\t\t$expression = new StringExpression();\n\t\t\t}\n\t\t\techo $expression->interpreter($string[$i]);\n\t\t\techo \"<br/>\";\n\t\t}\n\t}\n}\n$obj = new Interpreter();\n$obj->execute('123sqwe09843');\n```\n\n### 迭代器模式\n>顺序访问集合对象的元素，不需要知道集合对象的底层表示。  \n**优点：**\n>1. 它支持以不同的方式遍历一个聚合对象。 \n>2. 迭代器简化了聚合类。 \n>3. 在同一个聚合上可以有多个遍历。 \n>4. 在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。\n>\n>**缺点：**  \n由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。\n>\n>**注意事项：**  \n迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。\n\n```\n<?php\n/**\n * 迭代器模式  --  iterator pattern\n */\nclass Sample implements Iterator\n{\n\tprivate $_item;\n\tpublic function __construct($data)\n\t{\n\t\t$this->_item = $data;\n\t}\n\tpublic function current()\n\t{\n\t\treturn current($this->_item);\n\t}\n\tpublic function next()\n\t{\n\t\treturn next($this->_item);\n\t}\n\tpublic function key()\n\t{\n\t\treturn key($this->_item);\n\t}\n\tpublic function rewind()\n\t{\n\t\treset($this->_item);\n\t}\n\tpublic function valid()\n\t{\n\t\treturn ($this->current() !== false);\n\t}\n}\n$data = array('1', '2', '3', '4', '5');\n$obj = new Sample($data);\necho $obj->current();\necho $obj->next();\necho $obj->key();\necho $obj->rewind();\necho $obj->valid();\n```\n\n### 中介者模式\n>降低多个对象和类之间的通信复杂性。  \n该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。  \n**优点：**\n>1. 降低了类的复杂度，将一对多转化成了一对一。 \n>2. 各个类之间的解耦。 3、符合迪米特原则。\n>\n>**缺点：**  \n中介者会庞大，变得复杂难以维护。\n\n```\n<?php\n/**\n * 中介者模式  -- mediator pattern\n */\nabstract class Mediator\n{\n\tabstract public function send($message, $colleague);\n}\nabstract class Colleague\n{\n\tprivate $_mediator;\n\tpublic function __construct($mediator)\n\t{\n\t\t$this->_mediator = $mediator;\n\t}\n\tpublic function send($message)\n\t{\n\t\t$this->_mediator->send($message, $this);\n\t}\n\tabstract public function notify($message);\n}\nclass Colleague1 extends Colleague\n{\n\tpublic function notify($message)\n\t{\n\t\techo \"colleague1 \" . $message;\n\t}\n}\nclass Colleague2 extends Colleague\n{\n\tpublic function notify($message)\n\t{\n\t\techo \"colleague2 \" . $message;\n\t}\n}\nclass NewMediator extends Mediator\n{\n\tprivate $_colleauge1;\n\tprivate $_colleauge2;\n\tpublic function set($col1, $col2)\n\t{\n\t\t$this->_colleauge1 = $col1;\n\t\t$this->_colleauge2 = $col2;\n\t}\n\tpublic function send($message, $colleague)\n\t{\n\t\tif($this->_colleauge1 == $colleague){\n\t\t\t$this->_colleauge1->notify($message);\n\t\t}else{\n\t\t\t$this->_colleauge2->notify($message);\n\t\t}\n\t}\n}\n$newMediator = new NewMediator();\n$col1 = new Colleague1($newMediator);\n$col2 = new Colleague2($newMediator);\n$newMediator->set($col1, $col2);\n$col1->send('hello col1');\n$col2->send('hello col2');\n```\n\n### 备忘录模式\n>保存一个对象的某个状态，以便在适当的时候恢复对象  \n所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态  \n通过一个备忘录类专门存储对象状态  \n客户不与备忘录类耦合，与备忘录管理类耦合  \n>**优点：**  \n>1. 给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 \n>2. 实现了信息的封装，使得用户不需要关心状态的保存细节。  \n>\n>**缺点：**  \n消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。  \n>\n>**注意事项：**  \n>1. 为了符合迪米特原则，还要增加一个管理备忘录的类。 \n>2. 为了节约内存，可使用原型模式+备忘录模式。\n\n```\n<?php\n/**\n * 备忘录模式  --  memento pattern\n */\nclass Memento\n{\n\tprivate $_memento;\n\tpublic function __construct(string $state)\n\t{\n\t\t$this->_memento = $state;\n\t}\n\tpublic function getState()\n\t{\n\t\treturn $this->_memento;\n\t}\n}\nclass Originator\n{\n\tprivate $_state;\n\tpublic function setState(string $state)\n\t{\n\t\t$this->_state = $state;\n\t}\n\tpublic function getState()\n\t{\n\t\treturn $this->_state;\n\t}\n\tpublic function saveMemento()\n\t{\n\t\treturn new Memento($this->_state);\n\t}\n\tpublic function getMemento(Memento $memento)\n\t{\n\t\t$this->_state = $memento->getState();\n\t}\n}\nclass CakeTask\n{\n\tprivate $_mementoList;\n\tpublic function __construct()\n\t{\n\t\t$this->_mementoList = array();\n\t}\n\tpublic function add(Memento $memento)\n\t{\n\t\t$this->_mementoList[] = $memento;\n\t}\n\tpublic function get(int $index)\n\t{\n\t\treturn $this->_mementoList[$index];\n\t}\n}\n$originator = new Originator();\n$cakeTask = new CakeTask();\n$originator->setState('hello one');\n$originator->setState('hello two');\n$cakeTask->add($originator->saveMemento());\n$originator->setState('hello three');\n$cakeTask->add($originator->saveMemento());\n$originator->setState('hello four');\n\necho $originator->getState();\n$originator->getMemento($cakeTask->get(0));\necho $originator->getState();\n$originator->getMemento($cakeTask->get(1));\necho $originator->getState();\n```\n\n### 观察者模式\n>对象间存在一对多关系  \n当一个对象被修改时，则会自动通知它的依赖对象并被自动更新  \n**优点：**\n>1. 观察者和被观察者是抽象耦合的。 \n>2. 建立一套触发机制。\n>\n>**缺点：**\n>1. 如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 \n>2. 如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 \n>3. 观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。\n>\n>**注意事项：**\n>1. 避免循环引用。 \n>2. 如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。\n\n```\n<?php\n/**\n * 观察者模式  -- observer pattern\n */\n// 定义接口\ninterface Observer\n{\n\tpublic function onSendMsg($name);\n\tpublic function getName();\n}\nclass UserListLogger implements Observer\n{\n\tpublic function onSendMsg($name)\n\t{\n\t\techo $name . ' send to UserListLogger';\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'userlist_logger';\n\t}\n}\nclass OtherObserver implements Observer\n{\n\tpublic function onSendMsg($name)\n\t{\n\t\techo $name . ' send to OtherObserver';\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'other_observer';\n\t}\n}\ninterface Observerable\n{\n\tpublic function add(Observer $observer);\n\tpublic function remove($name);\n}\nclass UserList implements Observerable\n{\n\tprivate $_observer = array();\n\tpublic function add(Observer $observer)\n\t{\n\t\t$this->_observer[] = $observer;\n\t}\n\tpublic function remove($name)\n\t{\n\t\tforeach($this->_observer as $k=>$val){\n\t\t\tif($val->getName() == $name){\n\t\t\t\tunset($this->_observer[$k]);\n\t\t\t}\n\t\t}\n\t}\n\tpublic function sendMsg($name)\n\t{\n\t\tforeach($this->_observer as $val){\n\t\t\t$val->onSendMsg($name);\n\t\t}\n\t}\n}\n$userList = new UserList();\n$userList->add(new UserListLogger());\n$userList->add(new OtherObserver());\n$userList->sendMsg('jone');\n$userList->remove('userlist_logger');\n$userList->sendMsg('jami');\n```\n\n### 状态模式\n>类的行为是基于它的状态改变的  \n对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。  \n**优点：**\n>1. 封装了转换规则。 \n>2. 枚举可能的状态，在枚举状态之前需要确定状态种类。 \n>3. 将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 \n>4. 允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 \n>5. 可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。\n>\n>**缺点：**\n>1. 状态模式的使用必然会增加系统类和对象的个数。 \n>2. 状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 \n>3. 状态模式对\"开闭原则\"的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。\n>\n>**注意事项：**  \n在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。\n\n```\n<?php\n/**\n * 状态模式  --  state pattern\n */\ninterface State\n{\n\tpublic function handle(Context $context);\n}\nclass StateA implements State\n{\n\tprivate static $_instance;\n\tprivate function __construct()\n\t{\n\n\t}\n\tpublic static function getInstance()\n\t{\n\t\tif(is_null(self::$_instance)){\n\t\t\tself::$_instance = new StateA();\n\t\t}\n\t\treturn self::$_instance;\n\t}\n\tpublic function handle(Context $context)\n\t{\n\t\techo \"context A\";\n\t\t$context->setState(StateB::getInstance());\n\t}\n}\nclass StateB implements State\n{\n\tprivate static $_instance;\n\tprivate function __construct()\n\t{\n\n\t}\n\tpublic static function getInstance()\n\t{\n\t\tif(is_null(self::$_instance)){\n\t\t\tself::$_instance = new StateB();\n\t\t}\n\t\treturn self::$_instance;\n\t}\n\tpublic function handle(Context $context)\n\t{\n\t\techo \"context B\";\n\t\t$context->setState(StateA::getInstance());\n\t}\n}\nclass Context{\n\tprivate $_state;\n\tpublic function __construct()\n\t{\n\t\t$this->_state = StateA::getInstance();\n\t}\n\tpublic function setState(State $state)\n\t{\n\t\t$this->_state = $state;\n\t}\n\tpublic function request()\n\t{\n\t\t$this->_state->handle($this);\n\t}\n}\n$context = new Context();\n$context->request();\n$context->request();\n$context->request();\n$context->request();\n```\n\n### 空对象模式\n>一个空对象取代 NULL 对象实例的检查  \n在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。\n\n```\n<?php\n/**\n * 空对象模式  --  null object pattern\n */\nabstract class AbstractCustom\n{\n\tprivate $_name;\n\tabstract public function isNil();\n\tabstract public function getName();\n}\nclass RealCustom extends AbstractCustom\n{\n\tprivate $_name;\n\tpublic function __construct($name)\n\t{\n\t\t$this->_name = $name;\n\t}\n\tpublic function getName()\n\t{\n\t\treturn $this->_name;\n\t}\n\tpublic function isNil()\n\t{\n\t\treturn false;\n\t}\n}\nclass NullCustom extends AbstractCustom\n{\n\tpublic function getName()\n\t{\n\t\treturn \"this is null custom\";\n\t}\n\tpublic function isNil()\n\t{\n\t\treturn false;\n\t}\n}\nclass NullFactory\n{\n\tprivate $_arr = array('one', 'two');\n\tpublic function getCustom($name){\n\t\tif(in_array($name, $this->_arr)){\n\t\t\treturn new RealCustom($name);\n\t\t}\n\t\treturn new NullCustom();\n\t}\n}\n$obj = new NullFactory();\n$test1 = $obj->getCustom('one');\n$test2 = $obj->getCustom('one_one');\n$test3 = $obj->getCustom('two');\n$test4 = $obj->getCustom('two_two');\necho $test1->getName();\necho $test2->getName();\necho $test3->getName();\necho $test4->getName();\n```\n\n### 策略模式\n>一个类的行为或其算法可以在运行时更改  \n定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换  \n**优点：**\n>1. 算法可以自由切换。 \n>2. 避免使用多重条件判断。 \n>3. 扩展性良好。\n>\n>**缺点：**\n>1. 策略类会增多。 \n>2. 所有策略类都需要对外暴露。\n>\n>**注意事项：**  \n如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题\n\n```\n<?php\n/**\n * 策略模式  -- strategy pattern\n */\ninterface Strategy\n{\n\tpublic function do_method();\n}\nclass StrategyA implements Strategy\n{\n\tpublic function do_method()\n\t{\n\t\techo \"this is strategy A\";\n\t}\n}\nclass StrategyB implements Strategy\n{\n\tpublic function do_method()\n\t{\n\t\techo \"this is strategy B\";\n\t}\n}\nclass StrategyC implements Strategy\n{\n\tpublic function do_method()\n\t{\n\t\techo \"this is strategy C\";\n\t}\n}\n\nclass Question\n{\n\tprivate $_strategy;\n\tpublic function __construct($strategy)\n\t{\n\t\t$this->_strategy = $strategy;\n\t}\n\tpublic function handle()\n\t{\n\t\t$this->_strategy->do_method();\n\t}\n}\n$a = new Question(new StrategyA());\n$a->handle();\n$b = new Question(new StrategyB());\n$b->handle();\n$c = new Question(new StrategyC());\n$c->handle();\n```\n\n### 模板模式\n>一些方法通用，却在每一个子类都重新写了这一方法  \n将这些通用算法抽象出来  \n在抽象类实现，其他步骤在子类实现  \n**优点：**\n>1. 封装不变部分，扩展可变部分。 \n>2. 提取公共代码，便于维护。 \n>3. 行为由父类控制，子类实现。\n>\n>**缺点：**  \n每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。\n>\n>**注意事项：**  \n为防止恶意操作，一般模板方法都加上 final 关键词。\n\n```\n<?php\n/**\n * 模板模式 -- template pattern\n */\nabstract class Game\n{\n\tabstract public function start();\n\tabstract public function end();\n\tpublic function action()\n\t{\n\t\t$this->start();\n\t\t$this->end();\n\t}\n}\nclass SuperMary extends Game\n{\n\tpublic function start()\n\t{\n\t\techo \"the game is starting\";\n\t}\n\tpublic function end()\n\t{\n\t\techo \"the game is ending\";\n\t}\n}\n$superMary = new SuperMary();\n$superMary->action();\n```\n\n### 访问者模式\n>使用了一个访问者类，它改变了元素类的执行算法  \n元素的执行算法可以随着访问者改变而改变  \n稳定的数据结构和易变的操作耦合问题。  \n在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。  \n**优点：**\n>1. 符合单一职责原则。 \n>2. 优秀的扩展性。 \n>3. 灵活性。\n>\n>**缺点：**\n>1. 具体元素对访问者公布细节，违反了迪米特原则。 \n>2. 具体元素变更比较困难。 \n>3. 违反了依赖倒置原则，依赖了具体类，没有依赖抽象。\n>\n>**注意事项：**  \n访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。\n\n```\n<?php\n/**\n *\n */\ninterface ComputerPart\n{\n\tpublic function accept(Visitor $visitor);\n}\nclass Computer implements ComputerPart\n{\n\tprivate $_computerPart = array();\n\tpublic function accept(Visitor $visitor)\n\t{\n\t\tforeach($this->_computerPart as $val){\n\t\t\t$val->accept($visitor);\n\t\t}\n\t\t$visitor->visit($this);\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'computer';\n\t}\n\tpublic function setAttach(ComputerPart $computerPart)\n\t{\n\t\tarray_push($this->_computerPart, $computerPart);\n\t}\n}\nclass Mouse implements ComputerPart\n{\n\tpublic function accept(Visitor $visitor)\n\t{\n\t\t$visitor->visit($this);\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'mouse';\n\t}\n}\nclass KeyBoard implements ComputerPart\n{\n\tpublic function accept(Visitor $visitor)\n\t{\n\t\t$visitor->visit($this);\n\t}\n\tpublic function getName()\n\t{\n\t\treturn 'keyboard';\n\t}\n}\nclass Visitor\n{\n\tpublic function visit(ComputerPart $computerPart)\n\t{\n\t\techo \"this is \".$computerPart->getName();\n\t}\n}\n$computer = new Computer();\n$computer->setAttach(new Mouse());\n$computer->setAttach(new KeyBoard());\n$computer->accept(new Visitor());\n```","slug":"behavioral_patterns","published":1,"updated":"2019-04-09T14:31:42.289Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cju9wdmfp0047vjcguru81j59","content":"<h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><blockquote>\n<p>为请求创建了一个接收者对象的链<br>这种模式给予请求的类型，对请求的发送者和接收者进行解耦<br><strong>优点：</strong>  </p>\n<ol>\n<li>降低耦合度。它将请求的发送者和接收者解耦。 </li>\n<li>简化了对象。使得对象不需要知道链的结构。 </li>\n<li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 </li>\n<li>增加新的请求处理类很方便。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>不能保证请求一定被接收。 </li>\n<li>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 </li>\n<li>可能不容易观察运行时的特征，有碍于除错</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 责任链模式  -- responsibility pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Responsibility</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprotected $next;</span><br><span class=\"line\">\tpublic function setNext(Responsibility $obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;next = $obj;</span><br><span class=\"line\">\t\treturn $this;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tabstract public function operator();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ResponsibilityA extends Responsibility</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(false == is_null($this-&gt;next))&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;next-&gt;operator();</span><br><span class=\"line\">\t\t\techo &quot;this is responsibility A&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ResponsibilityB extends Responsibility</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(false == is_null($this-&gt;next))&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;next-&gt;operator();</span><br><span class=\"line\">\t\t\techo &quot;this is responsibility B&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$responsibilityA = new ResponsibilityA();</span><br><span class=\"line\">$responsibilityB = new ResponsibilityB();</span><br><span class=\"line\">$responsibilityA-&gt;setNext($responsibilityB);</span><br><span class=\"line\">$responsibilityA-&gt;operator();</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><blockquote>\n<p>请求以命令的形式包裹在对象中，并传给调用对象。<br>调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。<br>通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。<br><strong>优点：</strong></p>\n<ol>\n<li>降低了系统耦合度。</li>\n<li>新的命令可以很容易添加到系统中去。</li>\n</ol>\n<p><strong>缺点：</strong><br>使用命令模式可能会导致某些系统有过多的具体命令类。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 命令模式  -- commandpattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface Command</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function execute();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RealCommand implements Command</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_receiver;</span><br><span class=\"line\">\tpublic function __construct(Receiver $receiver)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_receiver = $receiver;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function execute()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_receiver-&gt;action();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 接受者</span><br><span class=\"line\">class Receiver</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_name;</span><br><span class=\"line\">\tpublic function __construct($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_name = $name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function action()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is receiver&quot; . $this-&gt;_name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 请求者</span><br><span class=\"line\">class Invoker</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_realCommand;</span><br><span class=\"line\">\tpublic function __construct(RealCommand $realCommand)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_realCommand = $realCommand;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_realCommand-&gt;execute();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$receiver = new Receiver(&apos;hello world&apos;);</span><br><span class=\"line\">$realCommand = new RealCommand($receiver);</span><br><span class=\"line\">$invoker = new Invoker($realCommand);</span><br><span class=\"line\">$invoker-&gt;operator();</span><br></pre></td></tr></table></figure>\n<h3 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h3><blockquote>\n<p>一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。<br><strong>优点：</strong></p>\n<ol>\n<li>可扩展性比较好，灵活。 </li>\n<li>增加了新的解释表达式的方式。 </li>\n<li>易于实现简单文法。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>可利用场景比较少。 </li>\n<li>对于复杂的文法比较难维护。 </li>\n<li>解释器模式会引起类膨胀。 </li>\n<li>解释器模式采用递归调用方法。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 解释器模式  -- interpreter pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface Expression</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function interpreter($data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class NumberExpression implements Expression</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function interpreter($num)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tswitch($num)&#123;</span><br><span class=\"line\">\t\t\tcase &apos;0&apos;: return &apos;零&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;1&apos;: return &apos;一&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;2&apos;: return &apos;二&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;3&apos;: return &apos;三&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;4&apos;: return &apos;四&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;5&apos;: return &apos;五&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;6&apos;: return &apos;六&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;7&apos;: return &apos;七&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;8&apos;: return &apos;八&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;9&apos;: return &apos;久&apos;;</span><br><span class=\"line\">\t\t\tdefault: return &apos;无&apos;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StringExpression implements Expression</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function interpreter($str)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn strtoupper($str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Interpreter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function execute($string)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$expression = null;</span><br><span class=\"line\">\t\tfor($i=0; $i&lt;strlen($string); $i++)&#123;</span><br><span class=\"line\">\t\t\tif(is_numeric($string[$i]))&#123;</span><br><span class=\"line\">\t\t\t\t$expression = new NumberExpression();</span><br><span class=\"line\">\t\t\t&#125;elseif(is_string($string[$i]))&#123;</span><br><span class=\"line\">\t\t\t\t$expression = new StringExpression();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\techo $expression-&gt;interpreter($string[$i]);</span><br><span class=\"line\">\t\t\techo &quot;&lt;br/&gt;&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new Interpreter();</span><br><span class=\"line\">$obj-&gt;execute(&apos;123sqwe09843&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><blockquote>\n<p>顺序访问集合对象的元素，不需要知道集合对象的底层表示。<br><strong>优点：</strong></p>\n<ol>\n<li>它支持以不同的方式遍历一个聚合对象。 </li>\n<li>迭代器简化了聚合类。 </li>\n<li>在同一个聚合上可以有多个遍历。 </li>\n<li>在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li>\n</ol>\n<p><strong>缺点：</strong><br>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p>\n<p><strong>注意事项：</strong><br>迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 迭代器模式  --  iterator pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Sample implements Iterator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_item;</span><br><span class=\"line\">\tpublic function __construct($data)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_item = $data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function current()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn current($this-&gt;_item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function next()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn next($this-&gt;_item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function key()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn key($this-&gt;_item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function rewind()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treset($this-&gt;_item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function valid()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn ($this-&gt;current() !== false);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$data = array(&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;);</span><br><span class=\"line\">$obj = new Sample($data);</span><br><span class=\"line\">echo $obj-&gt;current();</span><br><span class=\"line\">echo $obj-&gt;next();</span><br><span class=\"line\">echo $obj-&gt;key();</span><br><span class=\"line\">echo $obj-&gt;rewind();</span><br><span class=\"line\">echo $obj-&gt;valid();</span><br></pre></td></tr></table></figure>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><blockquote>\n<p>降低多个对象和类之间的通信复杂性。<br>该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。<br><strong>优点：</strong></p>\n<ol>\n<li>降低了类的复杂度，将一对多转化成了一对一。 </li>\n<li>各个类之间的解耦。 3、符合迪米特原则。</li>\n</ol>\n<p><strong>缺点：</strong><br>中介者会庞大，变得复杂难以维护。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 中介者模式  -- mediator pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Mediator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tabstract public function send($message, $colleague);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abstract class Colleague</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_mediator;</span><br><span class=\"line\">\tpublic function __construct($mediator)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_mediator = $mediator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function send($message)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_mediator-&gt;send($message, $this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tabstract public function notify($message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Colleague1 extends Colleague</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function notify($message)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;colleague1 &quot; . $message;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Colleague2 extends Colleague</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function notify($message)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;colleague2 &quot; . $message;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class NewMediator extends Mediator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_colleauge1;</span><br><span class=\"line\">\tprivate $_colleauge2;</span><br><span class=\"line\">\tpublic function set($col1, $col2)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_colleauge1 = $col1;</span><br><span class=\"line\">\t\t$this-&gt;_colleauge2 = $col2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function send($message, $colleague)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif($this-&gt;_colleauge1 == $colleague)&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;_colleauge1-&gt;notify($message);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;_colleauge2-&gt;notify($message);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$newMediator = new NewMediator();</span><br><span class=\"line\">$col1 = new Colleague1($newMediator);</span><br><span class=\"line\">$col2 = new Colleague2($newMediator);</span><br><span class=\"line\">$newMediator-&gt;set($col1, $col2);</span><br><span class=\"line\">$col1-&gt;send(&apos;hello col1&apos;);</span><br><span class=\"line\">$col2-&gt;send(&apos;hello col2&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h3><blockquote>\n<p>保存一个对象的某个状态，以便在适当的时候恢复对象<br>所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态<br>通过一个备忘录类专门存储对象状态<br>客户不与备忘录类耦合，与备忘录管理类耦合<br><strong>优点：</strong>  </p>\n<ol>\n<li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 </li>\n<li>实现了信息的封装，使得用户不需要关心状态的保存细节。  </li>\n</ol>\n<p><strong>缺点：</strong><br>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。  </p>\n<p><strong>注意事项：</strong>  </p>\n<ol>\n<li>为了符合迪米特原则，还要增加一个管理备忘录的类。 </li>\n<li>为了节约内存，可使用原型模式+备忘录模式。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 备忘录模式  --  memento pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Memento</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_memento;</span><br><span class=\"line\">\tpublic function __construct(string $state)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_memento = $state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getState()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;_memento;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Originator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_state;</span><br><span class=\"line\">\tpublic function setState(string $state)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state = $state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getState()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;_state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function saveMemento()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn new Memento($this-&gt;_state);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getMemento(Memento $memento)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state = $memento-&gt;getState();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class CakeTask</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_mementoList;</span><br><span class=\"line\">\tpublic function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_mementoList = array();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function add(Memento $memento)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_mementoList[] = $memento;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function get(int $index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;_mementoList[$index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$originator = new Originator();</span><br><span class=\"line\">$cakeTask = new CakeTask();</span><br><span class=\"line\">$originator-&gt;setState(&apos;hello one&apos;);</span><br><span class=\"line\">$originator-&gt;setState(&apos;hello two&apos;);</span><br><span class=\"line\">$cakeTask-&gt;add($originator-&gt;saveMemento());</span><br><span class=\"line\">$originator-&gt;setState(&apos;hello three&apos;);</span><br><span class=\"line\">$cakeTask-&gt;add($originator-&gt;saveMemento());</span><br><span class=\"line\">$originator-&gt;setState(&apos;hello four&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">echo $originator-&gt;getState();</span><br><span class=\"line\">$originator-&gt;getMemento($cakeTask-&gt;get(0));</span><br><span class=\"line\">echo $originator-&gt;getState();</span><br><span class=\"line\">$originator-&gt;getMemento($cakeTask-&gt;get(1));</span><br><span class=\"line\">echo $originator-&gt;getState();</span><br></pre></td></tr></table></figure>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><blockquote>\n<p>对象间存在一对多关系<br>当一个对象被修改时，则会自动通知它的依赖对象并被自动更新<br><strong>优点：</strong></p>\n<ol>\n<li>观察者和被观察者是抽象耦合的。 </li>\n<li>建立一套触发机制。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 </li>\n<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 </li>\n<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>\n</ol>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>避免循环引用。 </li>\n<li>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 观察者模式  -- observer pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function onSendMsg($name);</span><br><span class=\"line\">\tpublic function getName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UserListLogger implements Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function onSendMsg($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo $name . &apos; send to UserListLogger&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;userlist_logger&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class OtherObserver implements Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function onSendMsg($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo $name . &apos; send to OtherObserver&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;other_observer&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Observerable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function add(Observer $observer);</span><br><span class=\"line\">\tpublic function remove($name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UserList implements Observerable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_observer = array();</span><br><span class=\"line\">\tpublic function add(Observer $observer)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_observer[] = $observer;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function remove($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_observer as $k=&gt;$val)&#123;</span><br><span class=\"line\">\t\t\tif($val-&gt;getName() == $name)&#123;</span><br><span class=\"line\">\t\t\t\tunset($this-&gt;_observer[$k]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function sendMsg($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_observer as $val)&#123;</span><br><span class=\"line\">\t\t\t$val-&gt;onSendMsg($name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$userList = new UserList();</span><br><span class=\"line\">$userList-&gt;add(new UserListLogger());</span><br><span class=\"line\">$userList-&gt;add(new OtherObserver());</span><br><span class=\"line\">$userList-&gt;sendMsg(&apos;jone&apos;);</span><br><span class=\"line\">$userList-&gt;remove(&apos;userlist_logger&apos;);</span><br><span class=\"line\">$userList-&gt;sendMsg(&apos;jami&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><blockquote>\n<p>类的行为是基于它的状态改变的<br>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。<br><strong>优点：</strong></p>\n<ol>\n<li>封装了转换规则。 </li>\n<li>枚举可能的状态，在枚举状态之前需要确定状态种类。 </li>\n<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 </li>\n<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 </li>\n<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>状态模式的使用必然会增加系统类和对象的个数。 </li>\n<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 </li>\n<li>状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</li>\n</ol>\n<p><strong>注意事项：</strong><br>在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 状态模式  --  state pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface State</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function handle(Context $context);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StateA implements State</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate static $_instance;</span><br><span class=\"line\">\tprivate function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static function getInstance()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(is_null(self::$_instance))&#123;</span><br><span class=\"line\">\t\t\tself::$_instance = new StateA();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn self::$_instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function handle(Context $context)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;context A&quot;;</span><br><span class=\"line\">\t\t$context-&gt;setState(StateB::getInstance());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StateB implements State</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate static $_instance;</span><br><span class=\"line\">\tprivate function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static function getInstance()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(is_null(self::$_instance))&#123;</span><br><span class=\"line\">\t\t\tself::$_instance = new StateB();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn self::$_instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function handle(Context $context)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;context B&quot;;</span><br><span class=\"line\">\t\t$context-&gt;setState(StateA::getInstance());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Context&#123;</span><br><span class=\"line\">\tprivate $_state;</span><br><span class=\"line\">\tpublic function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state = StateA::getInstance();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function setState(State $state)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state = $state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function request()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state-&gt;handle($this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$context = new Context();</span><br><span class=\"line\">$context-&gt;request();</span><br><span class=\"line\">$context-&gt;request();</span><br><span class=\"line\">$context-&gt;request();</span><br><span class=\"line\">$context-&gt;request();</span><br></pre></td></tr></table></figure>\n<h3 id=\"空对象模式\"><a href=\"#空对象模式\" class=\"headerlink\" title=\"空对象模式\"></a>空对象模式</h3><blockquote>\n<p>一个空对象取代 NULL 对象实例的检查<br>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 空对象模式  --  null object pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class AbstractCustom</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_name;</span><br><span class=\"line\">\tabstract public function isNil();</span><br><span class=\"line\">\tabstract public function getName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RealCustom extends AbstractCustom</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_name;</span><br><span class=\"line\">\tpublic function __construct($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_name = $name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;_name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function isNil()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class NullCustom extends AbstractCustom</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &quot;this is null custom&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function isNil()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class NullFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_arr = array(&apos;one&apos;, &apos;two&apos;);</span><br><span class=\"line\">\tpublic function getCustom($name)&#123;</span><br><span class=\"line\">\t\tif(in_array($name, $this-&gt;_arr))&#123;</span><br><span class=\"line\">\t\t\treturn new RealCustom($name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn new NullCustom();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new NullFactory();</span><br><span class=\"line\">$test1 = $obj-&gt;getCustom(&apos;one&apos;);</span><br><span class=\"line\">$test2 = $obj-&gt;getCustom(&apos;one_one&apos;);</span><br><span class=\"line\">$test3 = $obj-&gt;getCustom(&apos;two&apos;);</span><br><span class=\"line\">$test4 = $obj-&gt;getCustom(&apos;two_two&apos;);</span><br><span class=\"line\">echo $test1-&gt;getName();</span><br><span class=\"line\">echo $test2-&gt;getName();</span><br><span class=\"line\">echo $test3-&gt;getName();</span><br><span class=\"line\">echo $test4-&gt;getName();</span><br></pre></td></tr></table></figure>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><blockquote>\n<p>一个类的行为或其算法可以在运行时更改<br>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换<br><strong>优点：</strong></p>\n<ol>\n<li>算法可以自由切换。 </li>\n<li>避免使用多重条件判断。 </li>\n<li>扩展性良好。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>策略类会增多。 </li>\n<li>所有策略类都需要对外暴露。</li>\n</ol>\n<p><strong>注意事项：</strong><br>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 策略模式  -- strategy pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function do_method();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StrategyA implements Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function do_method()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is strategy A&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StrategyB implements Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function do_method()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is strategy B&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StrategyC implements Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function do_method()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is strategy C&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Question</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_strategy;</span><br><span class=\"line\">\tpublic function __construct($strategy)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_strategy = $strategy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function handle()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_strategy-&gt;do_method();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a = new Question(new StrategyA());</span><br><span class=\"line\">$a-&gt;handle();</span><br><span class=\"line\">$b = new Question(new StrategyB());</span><br><span class=\"line\">$b-&gt;handle();</span><br><span class=\"line\">$c = new Question(new StrategyC());</span><br><span class=\"line\">$c-&gt;handle();</span><br></pre></td></tr></table></figure>\n<h3 id=\"模板模式\"><a href=\"#模板模式\" class=\"headerlink\" title=\"模板模式\"></a>模板模式</h3><blockquote>\n<p>一些方法通用，却在每一个子类都重新写了这一方法<br>将这些通用算法抽象出来<br>在抽象类实现，其他步骤在子类实现<br><strong>优点：</strong></p>\n<ol>\n<li>封装不变部分，扩展可变部分。 </li>\n<li>提取公共代码，便于维护。 </li>\n<li>行为由父类控制，子类实现。</li>\n</ol>\n<p><strong>缺点：</strong><br>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p>\n<p><strong>注意事项：</strong><br>为防止恶意操作，一般模板方法都加上 final 关键词。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 模板模式 -- template pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Game</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tabstract public function start();</span><br><span class=\"line\">\tabstract public function end();</span><br><span class=\"line\">\tpublic function action()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;start();</span><br><span class=\"line\">\t\t$this-&gt;end();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class SuperMary extends Game</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function start()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;the game is starting&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function end()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;the game is ending&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$superMary = new SuperMary();</span><br><span class=\"line\">$superMary-&gt;action();</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h3><blockquote>\n<p>使用了一个访问者类，它改变了元素类的执行算法<br>元素的执行算法可以随着访问者改变而改变<br>稳定的数据结构和易变的操作耦合问题。<br>在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。<br><strong>优点：</strong></p>\n<ol>\n<li>符合单一职责原则。 </li>\n<li>优秀的扩展性。 </li>\n<li>灵活性。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>具体元素对访问者公布细节，违反了迪米特原则。 </li>\n<li>具体元素变更比较困难。 </li>\n<li>违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</li>\n</ol>\n<p><strong>注意事项：</strong><br>访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface ComputerPart</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function accept(Visitor $visitor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Computer implements ComputerPart</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_computerPart = array();</span><br><span class=\"line\">\tpublic function accept(Visitor $visitor)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_computerPart as $val)&#123;</span><br><span class=\"line\">\t\t\t$val-&gt;accept($visitor);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$visitor-&gt;visit($this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;computer&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function setAttach(ComputerPart $computerPart)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tarray_push($this-&gt;_computerPart, $computerPart);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Mouse implements ComputerPart</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function accept(Visitor $visitor)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$visitor-&gt;visit($this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;mouse&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class KeyBoard implements ComputerPart</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function accept(Visitor $visitor)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$visitor-&gt;visit($this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;keyboard&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Visitor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function visit(ComputerPart $computerPart)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is &quot;.$computerPart-&gt;getName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$computer = new Computer();</span><br><span class=\"line\">$computer-&gt;setAttach(new Mouse());</span><br><span class=\"line\">$computer-&gt;setAttach(new KeyBoard());</span><br><span class=\"line\">$computer-&gt;accept(new Visitor());</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"责任链模式\"><a href=\"#责任链模式\" class=\"headerlink\" title=\"责任链模式\"></a>责任链模式</h3><blockquote>\n<p>为请求创建了一个接收者对象的链<br>这种模式给予请求的类型，对请求的发送者和接收者进行解耦<br><strong>优点：</strong>  </p>\n<ol>\n<li>降低耦合度。它将请求的发送者和接收者解耦。 </li>\n<li>简化了对象。使得对象不需要知道链的结构。 </li>\n<li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 </li>\n<li>增加新的请求处理类很方便。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>不能保证请求一定被接收。 </li>\n<li>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 </li>\n<li>可能不容易观察运行时的特征，有碍于除错</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 责任链模式  -- responsibility pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Responsibility</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprotected $next;</span><br><span class=\"line\">\tpublic function setNext(Responsibility $obj)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;next = $obj;</span><br><span class=\"line\">\t\treturn $this;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tabstract public function operator();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ResponsibilityA extends Responsibility</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(false == is_null($this-&gt;next))&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;next-&gt;operator();</span><br><span class=\"line\">\t\t\techo &quot;this is responsibility A&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class ResponsibilityB extends Responsibility</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(false == is_null($this-&gt;next))&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;next-&gt;operator();</span><br><span class=\"line\">\t\t\techo &quot;this is responsibility B&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$responsibilityA = new ResponsibilityA();</span><br><span class=\"line\">$responsibilityB = new ResponsibilityB();</span><br><span class=\"line\">$responsibilityA-&gt;setNext($responsibilityB);</span><br><span class=\"line\">$responsibilityA-&gt;operator();</span><br></pre></td></tr></table></figure>\n<h3 id=\"命令模式\"><a href=\"#命令模式\" class=\"headerlink\" title=\"命令模式\"></a>命令模式</h3><blockquote>\n<p>请求以命令的形式包裹在对象中，并传给调用对象。<br>调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。<br>通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。<br><strong>优点：</strong></p>\n<ol>\n<li>降低了系统耦合度。</li>\n<li>新的命令可以很容易添加到系统中去。</li>\n</ol>\n<p><strong>缺点：</strong><br>使用命令模式可能会导致某些系统有过多的具体命令类。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 命令模式  -- commandpattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface Command</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function execute();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RealCommand implements Command</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_receiver;</span><br><span class=\"line\">\tpublic function __construct(Receiver $receiver)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_receiver = $receiver;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function execute()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_receiver-&gt;action();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 接受者</span><br><span class=\"line\">class Receiver</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_name;</span><br><span class=\"line\">\tpublic function __construct($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_name = $name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function action()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is receiver&quot; . $this-&gt;_name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 请求者</span><br><span class=\"line\">class Invoker</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_realCommand;</span><br><span class=\"line\">\tpublic function __construct(RealCommand $realCommand)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_realCommand = $realCommand;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function operator()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_realCommand-&gt;execute();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$receiver = new Receiver(&apos;hello world&apos;);</span><br><span class=\"line\">$realCommand = new RealCommand($receiver);</span><br><span class=\"line\">$invoker = new Invoker($realCommand);</span><br><span class=\"line\">$invoker-&gt;operator();</span><br></pre></td></tr></table></figure>\n<h3 id=\"解释器模式\"><a href=\"#解释器模式\" class=\"headerlink\" title=\"解释器模式\"></a>解释器模式</h3><blockquote>\n<p>一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。<br><strong>优点：</strong></p>\n<ol>\n<li>可扩展性比较好，灵活。 </li>\n<li>增加了新的解释表达式的方式。 </li>\n<li>易于实现简单文法。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>可利用场景比较少。 </li>\n<li>对于复杂的文法比较难维护。 </li>\n<li>解释器模式会引起类膨胀。 </li>\n<li>解释器模式采用递归调用方法。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 解释器模式  -- interpreter pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface Expression</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function interpreter($data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class NumberExpression implements Expression</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function interpreter($num)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tswitch($num)&#123;</span><br><span class=\"line\">\t\t\tcase &apos;0&apos;: return &apos;零&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;1&apos;: return &apos;一&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;2&apos;: return &apos;二&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;3&apos;: return &apos;三&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;4&apos;: return &apos;四&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;5&apos;: return &apos;五&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;6&apos;: return &apos;六&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;7&apos;: return &apos;七&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;8&apos;: return &apos;八&apos;;</span><br><span class=\"line\">\t\t\tcase &apos;9&apos;: return &apos;久&apos;;</span><br><span class=\"line\">\t\t\tdefault: return &apos;无&apos;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StringExpression implements Expression</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function interpreter($str)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn strtoupper($str);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Interpreter</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function execute($string)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$expression = null;</span><br><span class=\"line\">\t\tfor($i=0; $i&lt;strlen($string); $i++)&#123;</span><br><span class=\"line\">\t\t\tif(is_numeric($string[$i]))&#123;</span><br><span class=\"line\">\t\t\t\t$expression = new NumberExpression();</span><br><span class=\"line\">\t\t\t&#125;elseif(is_string($string[$i]))&#123;</span><br><span class=\"line\">\t\t\t\t$expression = new StringExpression();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\techo $expression-&gt;interpreter($string[$i]);</span><br><span class=\"line\">\t\t\techo &quot;&lt;br/&gt;&quot;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new Interpreter();</span><br><span class=\"line\">$obj-&gt;execute(&apos;123sqwe09843&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"迭代器模式\"><a href=\"#迭代器模式\" class=\"headerlink\" title=\"迭代器模式\"></a>迭代器模式</h3><blockquote>\n<p>顺序访问集合对象的元素，不需要知道集合对象的底层表示。<br><strong>优点：</strong></p>\n<ol>\n<li>它支持以不同的方式遍历一个聚合对象。 </li>\n<li>迭代器简化了聚合类。 </li>\n<li>在同一个聚合上可以有多个遍历。 </li>\n<li>在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li>\n</ol>\n<p><strong>缺点：</strong><br>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p>\n<p><strong>注意事项：</strong><br>迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 迭代器模式  --  iterator pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Sample implements Iterator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_item;</span><br><span class=\"line\">\tpublic function __construct($data)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_item = $data;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function current()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn current($this-&gt;_item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function next()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn next($this-&gt;_item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function key()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn key($this-&gt;_item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function rewind()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treset($this-&gt;_item);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function valid()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn ($this-&gt;current() !== false);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$data = array(&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;);</span><br><span class=\"line\">$obj = new Sample($data);</span><br><span class=\"line\">echo $obj-&gt;current();</span><br><span class=\"line\">echo $obj-&gt;next();</span><br><span class=\"line\">echo $obj-&gt;key();</span><br><span class=\"line\">echo $obj-&gt;rewind();</span><br><span class=\"line\">echo $obj-&gt;valid();</span><br></pre></td></tr></table></figure>\n<h3 id=\"中介者模式\"><a href=\"#中介者模式\" class=\"headerlink\" title=\"中介者模式\"></a>中介者模式</h3><blockquote>\n<p>降低多个对象和类之间的通信复杂性。<br>该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。<br><strong>优点：</strong></p>\n<ol>\n<li>降低了类的复杂度，将一对多转化成了一对一。 </li>\n<li>各个类之间的解耦。 3、符合迪米特原则。</li>\n</ol>\n<p><strong>缺点：</strong><br>中介者会庞大，变得复杂难以维护。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 中介者模式  -- mediator pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Mediator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tabstract public function send($message, $colleague);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">abstract class Colleague</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_mediator;</span><br><span class=\"line\">\tpublic function __construct($mediator)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_mediator = $mediator;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function send($message)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_mediator-&gt;send($message, $this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tabstract public function notify($message);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Colleague1 extends Colleague</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function notify($message)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;colleague1 &quot; . $message;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Colleague2 extends Colleague</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function notify($message)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;colleague2 &quot; . $message;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class NewMediator extends Mediator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_colleauge1;</span><br><span class=\"line\">\tprivate $_colleauge2;</span><br><span class=\"line\">\tpublic function set($col1, $col2)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_colleauge1 = $col1;</span><br><span class=\"line\">\t\t$this-&gt;_colleauge2 = $col2;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function send($message, $colleague)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif($this-&gt;_colleauge1 == $colleague)&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;_colleauge1-&gt;notify($message);</span><br><span class=\"line\">\t\t&#125;else&#123;</span><br><span class=\"line\">\t\t\t$this-&gt;_colleauge2-&gt;notify($message);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$newMediator = new NewMediator();</span><br><span class=\"line\">$col1 = new Colleague1($newMediator);</span><br><span class=\"line\">$col2 = new Colleague2($newMediator);</span><br><span class=\"line\">$newMediator-&gt;set($col1, $col2);</span><br><span class=\"line\">$col1-&gt;send(&apos;hello col1&apos;);</span><br><span class=\"line\">$col2-&gt;send(&apos;hello col2&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"备忘录模式\"><a href=\"#备忘录模式\" class=\"headerlink\" title=\"备忘录模式\"></a>备忘录模式</h3><blockquote>\n<p>保存一个对象的某个状态，以便在适当的时候恢复对象<br>所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态<br>通过一个备忘录类专门存储对象状态<br>客户不与备忘录类耦合，与备忘录管理类耦合<br><strong>优点：</strong>  </p>\n<ol>\n<li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 </li>\n<li>实现了信息的封装，使得用户不需要关心状态的保存细节。  </li>\n</ol>\n<p><strong>缺点：</strong><br>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。  </p>\n<p><strong>注意事项：</strong>  </p>\n<ol>\n<li>为了符合迪米特原则，还要增加一个管理备忘录的类。 </li>\n<li>为了节约内存，可使用原型模式+备忘录模式。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 备忘录模式  --  memento pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">class Memento</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_memento;</span><br><span class=\"line\">\tpublic function __construct(string $state)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_memento = $state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getState()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;_memento;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Originator</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_state;</span><br><span class=\"line\">\tpublic function setState(string $state)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state = $state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getState()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;_state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function saveMemento()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn new Memento($this-&gt;_state);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getMemento(Memento $memento)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state = $memento-&gt;getState();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class CakeTask</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_mementoList;</span><br><span class=\"line\">\tpublic function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_mementoList = array();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function add(Memento $memento)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_mementoList[] = $memento;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function get(int $index)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;_mementoList[$index];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$originator = new Originator();</span><br><span class=\"line\">$cakeTask = new CakeTask();</span><br><span class=\"line\">$originator-&gt;setState(&apos;hello one&apos;);</span><br><span class=\"line\">$originator-&gt;setState(&apos;hello two&apos;);</span><br><span class=\"line\">$cakeTask-&gt;add($originator-&gt;saveMemento());</span><br><span class=\"line\">$originator-&gt;setState(&apos;hello three&apos;);</span><br><span class=\"line\">$cakeTask-&gt;add($originator-&gt;saveMemento());</span><br><span class=\"line\">$originator-&gt;setState(&apos;hello four&apos;);</span><br><span class=\"line\"></span><br><span class=\"line\">echo $originator-&gt;getState();</span><br><span class=\"line\">$originator-&gt;getMemento($cakeTask-&gt;get(0));</span><br><span class=\"line\">echo $originator-&gt;getState();</span><br><span class=\"line\">$originator-&gt;getMemento($cakeTask-&gt;get(1));</span><br><span class=\"line\">echo $originator-&gt;getState();</span><br></pre></td></tr></table></figure>\n<h3 id=\"观察者模式\"><a href=\"#观察者模式\" class=\"headerlink\" title=\"观察者模式\"></a>观察者模式</h3><blockquote>\n<p>对象间存在一对多关系<br>当一个对象被修改时，则会自动通知它的依赖对象并被自动更新<br><strong>优点：</strong></p>\n<ol>\n<li>观察者和被观察者是抽象耦合的。 </li>\n<li>建立一套触发机制。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 </li>\n<li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 </li>\n<li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li>\n</ol>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>避免循环引用。 </li>\n<li>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 观察者模式  -- observer pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">// 定义接口</span><br><span class=\"line\">interface Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function onSendMsg($name);</span><br><span class=\"line\">\tpublic function getName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UserListLogger implements Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function onSendMsg($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo $name . &apos; send to UserListLogger&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;userlist_logger&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class OtherObserver implements Observer</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function onSendMsg($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo $name . &apos; send to OtherObserver&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;other_observer&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">interface Observerable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function add(Observer $observer);</span><br><span class=\"line\">\tpublic function remove($name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class UserList implements Observerable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_observer = array();</span><br><span class=\"line\">\tpublic function add(Observer $observer)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_observer[] = $observer;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function remove($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_observer as $k=&gt;$val)&#123;</span><br><span class=\"line\">\t\t\tif($val-&gt;getName() == $name)&#123;</span><br><span class=\"line\">\t\t\t\tunset($this-&gt;_observer[$k]);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function sendMsg($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_observer as $val)&#123;</span><br><span class=\"line\">\t\t\t$val-&gt;onSendMsg($name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$userList = new UserList();</span><br><span class=\"line\">$userList-&gt;add(new UserListLogger());</span><br><span class=\"line\">$userList-&gt;add(new OtherObserver());</span><br><span class=\"line\">$userList-&gt;sendMsg(&apos;jone&apos;);</span><br><span class=\"line\">$userList-&gt;remove(&apos;userlist_logger&apos;);</span><br><span class=\"line\">$userList-&gt;sendMsg(&apos;jami&apos;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"状态模式\"><a href=\"#状态模式\" class=\"headerlink\" title=\"状态模式\"></a>状态模式</h3><blockquote>\n<p>类的行为是基于它的状态改变的<br>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。<br><strong>优点：</strong></p>\n<ol>\n<li>封装了转换规则。 </li>\n<li>枚举可能的状态，在枚举状态之前需要确定状态种类。 </li>\n<li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 </li>\n<li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 </li>\n<li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>状态模式的使用必然会增加系统类和对象的个数。 </li>\n<li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 </li>\n<li>状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</li>\n</ol>\n<p><strong>注意事项：</strong><br>在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 状态模式  --  state pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface State</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function handle(Context $context);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StateA implements State</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate static $_instance;</span><br><span class=\"line\">\tprivate function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static function getInstance()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(is_null(self::$_instance))&#123;</span><br><span class=\"line\">\t\t\tself::$_instance = new StateA();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn self::$_instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function handle(Context $context)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;context A&quot;;</span><br><span class=\"line\">\t\t$context-&gt;setState(StateB::getInstance());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StateB implements State</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate static $_instance;</span><br><span class=\"line\">\tprivate function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic static function getInstance()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tif(is_null(self::$_instance))&#123;</span><br><span class=\"line\">\t\t\tself::$_instance = new StateB();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn self::$_instance;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function handle(Context $context)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;context B&quot;;</span><br><span class=\"line\">\t\t$context-&gt;setState(StateA::getInstance());</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Context&#123;</span><br><span class=\"line\">\tprivate $_state;</span><br><span class=\"line\">\tpublic function __construct()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state = StateA::getInstance();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function setState(State $state)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state = $state;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function request()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_state-&gt;handle($this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$context = new Context();</span><br><span class=\"line\">$context-&gt;request();</span><br><span class=\"line\">$context-&gt;request();</span><br><span class=\"line\">$context-&gt;request();</span><br><span class=\"line\">$context-&gt;request();</span><br></pre></td></tr></table></figure>\n<h3 id=\"空对象模式\"><a href=\"#空对象模式\" class=\"headerlink\" title=\"空对象模式\"></a>空对象模式</h3><blockquote>\n<p>一个空对象取代 NULL 对象实例的检查<br>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 空对象模式  --  null object pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class AbstractCustom</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_name;</span><br><span class=\"line\">\tabstract public function isNil();</span><br><span class=\"line\">\tabstract public function getName();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class RealCustom extends AbstractCustom</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_name;</span><br><span class=\"line\">\tpublic function __construct($name)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_name = $name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn $this-&gt;_name;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function isNil()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class NullCustom extends AbstractCustom</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &quot;this is null custom&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function isNil()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn false;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class NullFactory</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_arr = array(&apos;one&apos;, &apos;two&apos;);</span><br><span class=\"line\">\tpublic function getCustom($name)&#123;</span><br><span class=\"line\">\t\tif(in_array($name, $this-&gt;_arr))&#123;</span><br><span class=\"line\">\t\t\treturn new RealCustom($name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn new NullCustom();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$obj = new NullFactory();</span><br><span class=\"line\">$test1 = $obj-&gt;getCustom(&apos;one&apos;);</span><br><span class=\"line\">$test2 = $obj-&gt;getCustom(&apos;one_one&apos;);</span><br><span class=\"line\">$test3 = $obj-&gt;getCustom(&apos;two&apos;);</span><br><span class=\"line\">$test4 = $obj-&gt;getCustom(&apos;two_two&apos;);</span><br><span class=\"line\">echo $test1-&gt;getName();</span><br><span class=\"line\">echo $test2-&gt;getName();</span><br><span class=\"line\">echo $test3-&gt;getName();</span><br><span class=\"line\">echo $test4-&gt;getName();</span><br></pre></td></tr></table></figure>\n<h3 id=\"策略模式\"><a href=\"#策略模式\" class=\"headerlink\" title=\"策略模式\"></a>策略模式</h3><blockquote>\n<p>一个类的行为或其算法可以在运行时更改<br>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换<br><strong>优点：</strong></p>\n<ol>\n<li>算法可以自由切换。 </li>\n<li>避免使用多重条件判断。 </li>\n<li>扩展性良好。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>策略类会增多。 </li>\n<li>所有策略类都需要对外暴露。</li>\n</ol>\n<p><strong>注意事项：</strong><br>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 策略模式  -- strategy pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function do_method();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StrategyA implements Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function do_method()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is strategy A&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StrategyB implements Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function do_method()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is strategy B&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class StrategyC implements Strategy</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function do_method()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is strategy C&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Question</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_strategy;</span><br><span class=\"line\">\tpublic function __construct($strategy)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_strategy = $strategy;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function handle()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;_strategy-&gt;do_method();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$a = new Question(new StrategyA());</span><br><span class=\"line\">$a-&gt;handle();</span><br><span class=\"line\">$b = new Question(new StrategyB());</span><br><span class=\"line\">$b-&gt;handle();</span><br><span class=\"line\">$c = new Question(new StrategyC());</span><br><span class=\"line\">$c-&gt;handle();</span><br></pre></td></tr></table></figure>\n<h3 id=\"模板模式\"><a href=\"#模板模式\" class=\"headerlink\" title=\"模板模式\"></a>模板模式</h3><blockquote>\n<p>一些方法通用，却在每一个子类都重新写了这一方法<br>将这些通用算法抽象出来<br>在抽象类实现，其他步骤在子类实现<br><strong>优点：</strong></p>\n<ol>\n<li>封装不变部分，扩展可变部分。 </li>\n<li>提取公共代码，便于维护。 </li>\n<li>行为由父类控制，子类实现。</li>\n</ol>\n<p><strong>缺点：</strong><br>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p>\n<p><strong>注意事项：</strong><br>为防止恶意操作，一般模板方法都加上 final 关键词。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 模板模式 -- template pattern</span><br><span class=\"line\"> */</span><br><span class=\"line\">abstract class Game</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tabstract public function start();</span><br><span class=\"line\">\tabstract public function end();</span><br><span class=\"line\">\tpublic function action()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$this-&gt;start();</span><br><span class=\"line\">\t\t$this-&gt;end();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class SuperMary extends Game</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function start()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;the game is starting&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function end()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;the game is ending&quot;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$superMary = new SuperMary();</span><br><span class=\"line\">$superMary-&gt;action();</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问者模式\"><a href=\"#访问者模式\" class=\"headerlink\" title=\"访问者模式\"></a>访问者模式</h3><blockquote>\n<p>使用了一个访问者类，它改变了元素类的执行算法<br>元素的执行算法可以随着访问者改变而改变<br>稳定的数据结构和易变的操作耦合问题。<br>在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。<br><strong>优点：</strong></p>\n<ol>\n<li>符合单一职责原则。 </li>\n<li>优秀的扩展性。 </li>\n<li>灵活性。</li>\n</ol>\n<p><strong>缺点：</strong></p>\n<ol>\n<li>具体元素对访问者公布细节，违反了迪米特原则。 </li>\n<li>具体元素变更比较困难。 </li>\n<li>违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</li>\n</ol>\n<p><strong>注意事项：</strong><br>访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">/**</span><br><span class=\"line\"> *</span><br><span class=\"line\"> */</span><br><span class=\"line\">interface ComputerPart</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function accept(Visitor $visitor);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Computer implements ComputerPart</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tprivate $_computerPart = array();</span><br><span class=\"line\">\tpublic function accept(Visitor $visitor)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tforeach($this-&gt;_computerPart as $val)&#123;</span><br><span class=\"line\">\t\t\t$val-&gt;accept($visitor);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t$visitor-&gt;visit($this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;computer&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function setAttach(ComputerPart $computerPart)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tarray_push($this-&gt;_computerPart, $computerPart);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Mouse implements ComputerPart</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function accept(Visitor $visitor)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$visitor-&gt;visit($this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;mouse&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class KeyBoard implements ComputerPart</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function accept(Visitor $visitor)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t$visitor-&gt;visit($this);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tpublic function getName()</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\treturn &apos;keyboard&apos;;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">class Visitor</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpublic function visit(ComputerPart $computerPart)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\techo &quot;this is &quot;.$computerPart-&gt;getName();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$computer = new Computer();</span><br><span class=\"line\">$computer-&gt;setAttach(new Mouse());</span><br><span class=\"line\">$computer-&gt;setAttach(new KeyBoard());</span><br><span class=\"line\">$computer-&gt;accept(new Visitor());</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cju9wdma60001vjcgj6xanx8a","category_id":"cju9wdmac0004vjcgmgyuec74","_id":"cju9wdmal000evjcg7mjh9hmt"},{"post_id":"cju9wdmaa0003vjcglxfrstoc","category_id":"cju9wdmah000avjcg8pf2xvye","_id":"cju9wdmao000lvjcgsq5wwh3k"},{"post_id":"cju9wdmae0007vjcgvwxkb6oo","category_id":"cju9wdmal000fvjcg1ti7dkah","_id":"cju9wdmat000svjcgqi6pbldw"},{"post_id":"cju9wdmao000jvjcg427b9xu9","category_id":"cju9wdmal000fvjcg1ti7dkah","_id":"cju9wdmau000wvjcgb5qukmmd"},{"post_id":"cju9wdmaq000ovjcgwzmht8h4","category_id":"cju9wdmal000fvjcg1ti7dkah","_id":"cju9wdmaw000zvjcg6zlxab0e"},{"post_id":"cju9wdmaf0008vjcguyux9l99","category_id":"cju9wdmal000fvjcg1ti7dkah","_id":"cju9wdmay0012vjcgcm9zyupk"},{"post_id":"cju9wdmag0009vjcgofp5nq0d","category_id":"cju9wdmal000fvjcg1ti7dkah","_id":"cju9wdmaz0015vjcgu8p20irm"},{"post_id":"cju9wdmax0010vjcgcsge1dko","category_id":"cju9wdmal000fvjcg1ti7dkah","_id":"cju9wdmb1001cvjcg4pv1p3bo"},{"post_id":"cju9wdmah000cvjcgcg9njmmw","category_id":"cju9wdmaw000yvjcglauxbr73","_id":"cju9wdmb2001gvjcga4dosv8f"},{"post_id":"cju9wdmay0014vjcgey3q0lws","category_id":"cju9wdmal000fvjcg1ti7dkah","_id":"cju9wdmb4001kvjcghoxfpe0a"},{"post_id":"cju9wdmaz0018vjcgbuwb7bm3","category_id":"cju9wdmal000fvjcg1ti7dkah","_id":"cju9wdmb5001ovjcgurpvddgs"},{"post_id":"cju9wdmak000dvjcg7wvggn36","category_id":"cju9wdmaw000yvjcglauxbr73","_id":"cju9wdmb6001svjcgi4h8px0m"},{"post_id":"cju9wdmam000hvjcgwqzpcl24","category_id":"cju9wdmaw000yvjcglauxbr73","_id":"cju9wdmb7001vvjcgd5rur4vd"},{"post_id":"cju9wdmas000qvjcgihp2bmgh","category_id":"cju9wdmb4001lvjcg00ptkorp","_id":"cju9wdmb90022vjcg65n2v73g"},{"post_id":"cju9wdmat000vvjcgjy0o8ajy","category_id":"cju9wdmb7001wvjcgvtpgsnnc","_id":"cju9wdmbc0029vjcgduyo7pr4"},{"post_id":"cju9wdmav000xvjcg1n7prh8y","category_id":"cju9wdmb7001wvjcgvtpgsnnc","_id":"cju9wdmbf002evjcg019ziox6"},{"post_id":"cju9wdmb0001bvjcgkeqehlfy","category_id":"cju9wdmbc0028vjcg0pphig2s","_id":"cju9wdmbi002kvjcgki7g5nhj"},{"post_id":"cju9wdmbf002dvjcg3exr07uu","category_id":"cju9wdmb4001lvjcg00ptkorp","_id":"cju9wdmbi002mvjcgc49mwwxw"},{"post_id":"cju9wdmb2001fvjcglfo4u3ao","category_id":"cju9wdmbc0028vjcg0pphig2s","_id":"cju9wdmbj002pvjcgpr370j11"},{"post_id":"cju9wdmb3001jvjcg7xezpeug","category_id":"cju9wdmbc0028vjcg0pphig2s","_id":"cju9wdmbk002tvjcg93p0jpjx"},{"post_id":"cju9wdmb4001nvjcgkrs01oua","category_id":"cju9wdmbc0028vjcg0pphig2s","_id":"cju9wdmbk002xvjcgvfccdgqq"},{"post_id":"cju9wdmb5001rvjcgtdb43r16","category_id":"cju9wdmbc0028vjcg0pphig2s","_id":"cju9wdmbl0030vjcgeawfgzuh"},{"post_id":"cju9wdmb6001uvjcg81966qw5","category_id":"cju9wdmbk002wvjcgyxi3pla2","_id":"cju9wdmbm0035vjcg2bnb7no0"},{"post_id":"cju9wdmb8001zvjcgagzolvo6","category_id":"cju9wdmbk002wvjcgyxi3pla2","_id":"cju9wdmbn0039vjcg1og4tj12"},{"post_id":"cju9wdmb80021vjcg35bbdf8p","category_id":"cju9wdmbk002wvjcgyxi3pla2","_id":"cju9wdmbo003dvjcgq3k1mvkf"},{"post_id":"cju9wdmba0025vjcg8x52zmot","category_id":"cju9wdmbk002wvjcgyxi3pla2","_id":"cju9wdmbp003hvjcguw4s1w38"},{"post_id":"cju9wdmbb0027vjcgl4di4mye","category_id":"cju9wdmbk002wvjcgyxi3pla2","_id":"cju9wdmbp003kvjcg50gp6edg"},{"post_id":"cju9wdmbd002bvjcg5jpxzj6t","category_id":"cju9wdmbp003gvjcgv2vhtlim","_id":"cju9wdmbq003ovjcgq8c39k3t"},{"post_id":"cju9wdmbg002hvjcg2r5h8h8l","category_id":"cju9wdmbk002wvjcgyxi3pla2","_id":"cju9wdmbr003rvjcgsj1vtqh4"},{"post_id":"cju9wdmez0043vjcgdcm6sby5","category_id":"cju9wdmb7001wvjcgvtpgsnnc","_id":"cju9wdmf20046vjcgwddts8dh"},{"post_id":"cju9wdmfp0047vjcguru81j59","category_id":"cju9wdmb7001wvjcgvtpgsnnc","_id":"cju9wdmfr0049vjcgarzjeb5g"}],"PostTag":[{"post_id":"cju9wdma60001vjcgj6xanx8a","tag_id":"cju9wdmad0005vjcgdxwozmmh","_id":"cju9wdman000ivjcgywrf3q2r"},{"post_id":"cju9wdma60001vjcgj6xanx8a","tag_id":"cju9wdmah000bvjcgqxxsmokt","_id":"cju9wdmao000kvjcg0bba2i2p"},{"post_id":"cju9wdmaa0003vjcglxfrstoc","tag_id":"cju9wdmal000gvjcgju24km2d","_id":"cju9wdmar000pvjcge77cptrt"},{"post_id":"cju9wdmaq000ovjcgwzmht8h4","tag_id":"cju9wdmal000gvjcgju24km2d","_id":"cju9wdmat000tvjcgdsc5wuep"},{"post_id":"cju9wdmae0007vjcgvwxkb6oo","tag_id":"cju9wdmap000nvjcg0kxc1gcg","_id":"cju9wdmay0013vjcg041nja6l"},{"post_id":"cju9wdmae0007vjcgvwxkb6oo","tag_id":"cju9wdmat000uvjcg919oguux","_id":"cju9wdmaz0017vjcguglbp72u"},{"post_id":"cju9wdmax0010vjcgcsge1dko","tag_id":"cju9wdmal000gvjcgju24km2d","_id":"cju9wdmb0001avjcggcfqk673"},{"post_id":"cju9wdmay0014vjcgey3q0lws","tag_id":"cju9wdmal000gvjcgju24km2d","_id":"cju9wdmb2001evjcg3hxw9e1v"},{"post_id":"cju9wdmaf0008vjcguyux9l99","tag_id":"cju9wdmap000nvjcg0kxc1gcg","_id":"cju9wdmb3001ivjcg0ls00kbl"},{"post_id":"cju9wdmaz0018vjcgbuwb7bm3","tag_id":"cju9wdmap000nvjcg0kxc1gcg","_id":"cju9wdmb4001mvjcg57q24c48"},{"post_id":"cju9wdmaz0018vjcgbuwb7bm3","tag_id":"cju9wdmat000uvjcg919oguux","_id":"cju9wdmb5001qvjcg9eq7je5i"},{"post_id":"cju9wdmag0009vjcgofp5nq0d","tag_id":"cju9wdmap000nvjcg0kxc1gcg","_id":"cju9wdmb6001tvjcg9rqvvyy8"},{"post_id":"cju9wdmag0009vjcgofp5nq0d","tag_id":"cju9wdmat000uvjcg919oguux","_id":"cju9wdmb7001yvjcgx9tfthtc"},{"post_id":"cju9wdmah000cvjcgcg9njmmw","tag_id":"cju9wdmb5001pvjcg27z30k8l","_id":"cju9wdmb80020vjcgmp0lwstv"},{"post_id":"cju9wdmak000dvjcg7wvggn36","tag_id":"cju9wdmb5001pvjcg27z30k8l","_id":"cju9wdmbb0026vjcgnmgw0zt0"},{"post_id":"cju9wdmam000hvjcgwqzpcl24","tag_id":"cju9wdmb5001pvjcg27z30k8l","_id":"cju9wdmbe002cvjcgt41mhhxx"},{"post_id":"cju9wdmao000jvjcg427b9xu9","tag_id":"cju9wdmap000nvjcg0kxc1gcg","_id":"cju9wdmbi002lvjcg8vahxnf2"},{"post_id":"cju9wdmao000jvjcg427b9xu9","tag_id":"cju9wdmat000uvjcg919oguux","_id":"cju9wdmbj002nvjcgj0q37xd7"},{"post_id":"cju9wdmas000qvjcgihp2bmgh","tag_id":"cju9wdmbh002ivjcgwdccsgv0","_id":"cju9wdmbj002rvjcgyr7jj6oh"},{"post_id":"cju9wdmat000vvjcgjy0o8ajy","tag_id":"cju9wdmbj002qvjcgpj9z4dk3","_id":"cju9wdmbk002vvjcgtog5yybc"},{"post_id":"cju9wdmav000xvjcg1n7prh8y","tag_id":"cju9wdmbj002qvjcgpj9z4dk3","_id":"cju9wdmbl002zvjcgp4tp79cz"},{"post_id":"cju9wdmb0001bvjcgkeqehlfy","tag_id":"cju9wdmbl002yvjcgvo3tk6mh","_id":"cju9wdmbm0033vjcgztqzm84m"},{"post_id":"cju9wdmb2001fvjcglfo4u3ao","tag_id":"cju9wdmbl002yvjcgvo3tk6mh","_id":"cju9wdmbn0037vjcgrexwmaac"},{"post_id":"cju9wdmb3001jvjcg7xezpeug","tag_id":"cju9wdmbl002yvjcgvo3tk6mh","_id":"cju9wdmbo003bvjcgcrie8ci1"},{"post_id":"cju9wdmb4001nvjcgkrs01oua","tag_id":"cju9wdmbl002yvjcgvo3tk6mh","_id":"cju9wdmbp003fvjcgxf1h6lx8"},{"post_id":"cju9wdmb5001rvjcgtdb43r16","tag_id":"cju9wdmbl002yvjcgvo3tk6mh","_id":"cju9wdmbp003jvjcgks92q1jy"},{"post_id":"cju9wdmb6001uvjcg81966qw5","tag_id":"cju9wdmbp003ivjcgx347vccz","_id":"cju9wdmbq003nvjcgmfqjfpiv"},{"post_id":"cju9wdmb8001zvjcgagzolvo6","tag_id":"cju9wdmbp003ivjcgx347vccz","_id":"cju9wdmbr003qvjcggolib72g"},{"post_id":"cju9wdmb80021vjcg35bbdf8p","tag_id":"cju9wdmbp003ivjcgx347vccz","_id":"cju9wdmbr003tvjcgtscw6hf2"},{"post_id":"cju9wdmba0025vjcg8x52zmot","tag_id":"cju9wdmbp003ivjcgx347vccz","_id":"cju9wdmbs003vvjcg53xwa3ea"},{"post_id":"cju9wdmbb0027vjcgl4di4mye","tag_id":"cju9wdmbp003ivjcgx347vccz","_id":"cju9wdmbs003xvjcg1buz75n7"},{"post_id":"cju9wdmbd002bvjcg5jpxzj6t","tag_id":"cju9wdmbs003wvjcgm5ct9kz6","_id":"cju9wdmbt003zvjcgk27ue9cm"},{"post_id":"cju9wdmbf002dvjcg3exr07uu","tag_id":"cju9wdmbh002ivjcgwdccsgv0","_id":"cju9wdmbt0041vjcgkc80asg3"},{"post_id":"cju9wdmbg002hvjcg2r5h8h8l","tag_id":"cju9wdmbp003ivjcgx347vccz","_id":"cju9wdmbt0042vjcgsnujmli3"},{"post_id":"cju9wdmez0043vjcgdcm6sby5","tag_id":"cju9wdmbj002qvjcgpj9z4dk3","_id":"cju9wdmf10045vjcgiz4ja9pq"},{"post_id":"cju9wdmfp0047vjcguru81j59","tag_id":"cju9wdmbj002qvjcgpj9z4dk3","_id":"cju9wdmfr0048vjcgb5wx3fa4"}],"Tag":[{"name":"算法","_id":"cju9wdmad0005vjcgdxwozmmh"},{"name":"结构","_id":"cju9wdmah000bvjcgqxxsmokt"},{"name":"Article","_id":"cju9wdmal000gvjcgju24km2d"},{"name":"hexo","_id":"cju9wdmap000nvjcg0kxc1gcg"},{"name":"next","_id":"cju9wdmat000uvjcg919oguux"},{"name":"Composer","_id":"cju9wdmb5001pvjcg27z30k8l"},{"name":"GIT","_id":"cju9wdmbh002ivjcgwdccsgv0"},{"name":"设计模式","_id":"cju9wdmbj002qvjcgpj9z4dk3"},{"name":"Web前端","_id":"cju9wdmbl002yvjcgvo3tk6mh"},{"name":"数据库","_id":"cju9wdmbp003ivjcgx347vccz"},{"name":"运维","_id":"cju9wdmbs003wvjcgm5ct9kz6"}]}}