<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王志鹏</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhipenwang.github.io/"/>
  <updated>2019-07-13T04:52:36.871Z</updated>
  <id>https://zhipenwang.github.io/</id>
  
  <author>
    <name>王志鹏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Prometheus+grafana监控告警系统</title>
    <link href="https://zhipenwang.github.io/2019/07/13/2019_07_13/"/>
    <id>https://zhipenwang.github.io/2019/07/13/2019_07_13/</id>
    <published>2019-07-12T16:00:00.000Z</published>
    <updated>2019-07-13T04:52:36.871Z</updated>
    
    <content type="html"><![CDATA[<p>介绍<br>Prometheus是一个开源的系统监控和报警的工具包，最初由SoundCloud发布。<br>特点：<br>● 多维数据模型（有metric名称和键值对确定的时间序列）<br>● 灵活的查询语言<br>● 不依赖分布式存储<br>● 通过pull方式采集时间序列，通过http协议传输<br>● 支持通过中介网关的push时间序列的方式<br>● 监控数据通过服务或者静态配置来发现<br>● 支持图表和dashboard等多种方式</p><p>Prometheus 生态圈中包含了多个组件，其中许多组件是可选的：<br>● Prometheus Server: 用于收集和存储时间序列数据。<br>● Client Library: 客户端库，为需要监控的服务生成相应的 metrics 并暴露给 Prometheus server。当 Prometheus server 来 pull 时，直接返回实时状态的 metrics。<br>● Push Gateway: 主要用于短期的 jobs。由于这类 jobs 存在时间较短，可能在 Prometheus 来 pull 之前就消失了。为此，这次 jobs 可以直接向 Prometheus server 端推送它们的 metrics。这种方式主要用于服务层面的 metrics，对于机器层面的 metrices，需要使用 node exporter。<br>● Exporters: 用于暴露已有的第三方服务的 metrics 给 Prometheus。<br>● Alertmanager: 从 Prometheus server 端接收到 alerts 后，会进行去除重复数据，分组，并路由到对收的接受方式，发出报警。常见的接收方式有：电子邮件，pagerduty，OpsGenie, webhook 等。<br>● 一些其他的工具。</p><h3 id="prometheus原理"><a href="#prometheus原理" class="headerlink" title="prometheus原理"></a>prometheus原理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、prometheus server定期从配置好的jobs或exporters中拉取metrics，或者直接接收来自PushGateway发过来的metrics，或者从其他的prometheus server拉取metrics</span><br><span class="line">2、prometheus server在本地存储收集到的metrics，并运行已定义好的alert.rules，记录新的时间序列或者向Alertmanager发生警告</span><br><span class="line">3、Alertmanager根据配置文件，对接收到的告警进行处理，发出告警</span><br><span class="line">4、在图形界面化，可视化采集数据</span><br></pre></td></tr></table></figure><h3 id="下载安装prometheus"><a href="#下载安装prometheus" class="headerlink" title="下载安装prometheus"></a>下载安装prometheus</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">官方下载地址：https://prometheus.io/download/</span><br><span class="line">wget https://github.com/prometheus/prometheus/releases/download/v2.10.0/prometheus-2.10.0.linux-amd64.tar.gz</span><br><span class="line">解压：</span><br><span class="line">tar zxvf prometheus-2.10.0.linux-amd64.tar.gz</span><br><span class="line">查看：</span><br><span class="line">cd prometheus-2.10.0.linux-amd64.tar.gz</span><br><span class="line">./prometheus --help</span><br><span class="line">配置文件 prometheus.yml</span><br><span class="line">    global:</span><br><span class="line">        scrape_interval:     15s  # 默认15秒到目标处抓取数据</span><br><span class="line">    scrape_configs:</span><br><span class="line">        - job_name: prometheus</span><br><span class="line">          static_configs:</span><br><span class="line">            - targets: [&apos;localhost:9090&apos;]</span><br><span class="line"></span><br><span class="line">scrape_configs块，配置监控项。</span><br><span class="line">prometheus可以自己暴露metric，这里配置为监控自己</span><br><span class="line"></span><br><span class="line">启动</span><br><span class="line">./prometheus --config.file=prometheus.yml</span><br><span class="line">nohup ./prometheus --config.file=prometheus.yml &amp;</span><br><span class="line">访问，浏览器打开：ip:port(port默认9090)</span><br><span class="line">ip:port/metrics  // 监控自己</span><br><span class="line"></span><br><span class="line">修改配置文件后，重载方式：</span><br><span class="line">curl -X POST http://localhost:9090/-/reload</span><br></pre></td></tr></table></figure><h3 id="grafana图表化"><a href="#grafana图表化" class="headerlink" title="grafana图表化"></a>grafana图表化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">加入data source</span><br><span class="line">选择 prometheus</span><br><span class="line">settings</span><br><span class="line">url地址： ip:9090</span><br><span class="line">dashboards</span><br><span class="line">import导入模版</span><br><span class="line">直接查看面板即可</span><br></pre></td></tr></table></figure><h3 id="node-exporter监控系统性能"><a href="#node-exporter监控系统性能" class="headerlink" title="node_exporter监控系统性能"></a>node_exporter监控系统性能</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">下载：https://prometheus.io/download/</span><br><span class="line">找到node_exporter下载</span><br><span class="line">解压： tar -zxvf node_exporter-0.18.0.linux-amd64.tar.gz</span><br><span class="line">移动： mv node_exporter-0.18.0.linux-amd64.tar.gz /usr/local/node_exporter</span><br><span class="line">运行： ./node_exporter &amp;</span><br><span class="line">注意要在root用户下运行，为了获取系统cpu及内存信息</span><br><span class="line"></span><br><span class="line">找grafana的模版：https://grafana.com/dashboards/8919</span><br><span class="line">导入json即可</span><br><span class="line">按照模版下面的说明，需要按照插件-饼图插件：grafana-cli plugins install grafana-piechart-panel</span><br><span class="line">重启grafana service grafana-server restart</span><br><span class="line">Q&amp;A</span><br><span class="line">1、如果没有数据，需要稍等一会，时序数据有了之后才能进行占比的计算</span><br><span class="line">2、内存使用率不显示问题：内存使用率的panel,修改查询为如下</span><br><span class="line">    (1 - (node_memory_MemFree_bytes&#123;instance=~&quot;$node&quot;&#125; / (node_memory_MemTotal_bytes&#123;instance=~&quot;$node&quot;&#125;)))* 100</span><br><span class="line">    最新版的node_exporter将node_memory_MemAvailable_bytes改为node_memory_MemFree_bytes了。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;介绍&lt;br&gt;Prometheus是一个开源的系统监控和报警的工具包，最初由SoundCloud发布。&lt;br&gt;特点：&lt;br&gt;● 多维数据模型（有metric名称和键值对确定的时间序列）&lt;br&gt;● 灵活的查询语言&lt;br&gt;● 不依赖分布式存储&lt;br&gt;● 通过pull方式采集时间序
      
    
    </summary>
    
      <category term="监控系统" scheme="https://zhipenwang.github.io/categories/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Grafana" scheme="https://zhipenwang.github.io/tags/Grafana/"/>
    
      <category term="Prometheus" scheme="https://zhipenwang.github.io/tags/Prometheus/"/>
    
  </entry>
  
  <entry>
    <title>Telegraf+Influxdb+Grafana图表化实时监控分析数据</title>
    <link href="https://zhipenwang.github.io/2019/07/07/2019_07_07/"/>
    <id>https://zhipenwang.github.io/2019/07/07/2019_07_07/</id>
    <published>2019-07-06T16:00:00.000Z</published>
    <updated>2019-07-13T04:51:16.086Z</updated>
    
    <content type="html"><![CDATA[<p>本节开始，将展开多种监控系统的讨论。</p><blockquote><p>telegraf<br>influxdb<br>grafana</p></blockquote><h3 id="下载安装telegraf"><a href="#下载安装telegraf" class="headerlink" title="下载安装telegraf"></a>下载安装telegraf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">service telegraf status管理</span><br><span class="line">1、下载telegraf:</span><br><span class="line">    https://portal.influxdata.com/downloads/</span><br><span class="line">centos:</span><br><span class="line">    wget https://dl.influxdata.com/telegraf/releases/telegraf-1.10.4-1.x86_64.rpm</span><br><span class="line">    sudo yum localinstall telegraf-1.10.4-1.x86_64.rpm</span><br><span class="line">ubuntu:</span><br><span class="line">    wget https://dl.influxdata.com/telegraf/releases/telegraf_1.10.4-1_amd64.deb</span><br><span class="line">    sudo dpkg -i telegraf_1.10.4-1_amd64.deb</span><br><span class="line">Linux Binaries (64-bit)</span><br><span class="line">    wget https://dl.influxdata.com/telegraf/releases/telegraf-1.10.4_linux_amd64.tar.gz</span><br><span class="line">    tar xf telegraf-1.10.4_linux_amd64.tar.gz</span><br><span class="line">    解压出来后，</span><br><span class="line">    执行文件在 telegraf/usr/bin/telegraf</span><br><span class="line">    配置文件在 telegraf/etc/telegraf/telegraf.conf</span><br><span class="line"></span><br><span class="line">查看帮助</span><br><span class="line">telegraf --help</span><br><span class="line">生成配置文件(配置文件在安装后的etc目录下，也可直接配置生成)</span><br><span class="line">在当前目录下生成配置文件</span><br><span class="line">telegraf config &gt; telegraf.conf</span><br><span class="line"></span><br><span class="line">1、#生成带cpu、memroy、http_listener</span><br><span class="line"></span><br><span class="line">输出到kafka插件的配置文件</span><br><span class="line">telegraf --input-filter cpu:mem:http_listener --output-filter kafka config &gt; /etc/telegraf/telegraf.conf</span><br><span class="line"></span><br><span class="line">输出到influxdb插件的配置文件</span><br><span class="line">#生成带cpu、memroy、http_listener和influxdb插件的配置文件</span><br><span class="line">#telegraf --input-filter cpu:mem:http_listener --output-filter influxdb config &gt; /etc/telegraf/telegraf.conf</span><br><span class="line"></span><br><span class="line">想要追加监控信息可以直接加入：</span><br><span class="line">    cpu:mem:http_listener:disk:diskio:kernel:processes:swap:system:net:netstat</span><br><span class="line">    cpu ：系统CPU信息，如用户态和系统态利用率等等</span><br><span class="line">    mem ：系统内存信息，如物理、虚拟、交换内存量等等。</span><br><span class="line">    disk ：磁盘占用信息。</span><br><span class="line">    diskio ：磁盘IO性能。</span><br><span class="line">    net和netstat ：网卡和网络信息。</span><br><span class="line">    system ：当前系统负载信息，类似uptime信息。</span><br><span class="line">    file ：每个时间周期读取文件所有信息。</span><br><span class="line"></span><br><span class="line">修改配置文件中的influxdb相关信息：</span><br><span class="line">    ###############################################################################</span><br><span class="line">    #                            OUTPUT PLUGINS                                   #</span><br><span class="line">    ###############################################################################</span><br><span class="line">    </span><br><span class="line">    # Configuration for sending metrics to InfluxDB</span><br><span class="line">    [[outputs.influxdb]]</span><br><span class="line">    ...</span><br><span class="line">    ...</span><br><span class="line">    ## The full HTTP or UDP URL for your InfluxDB instance.</span><br><span class="line">    urls = [&quot;http://127.0.0.1:8086&quot;]</span><br><span class="line"></span><br><span class="line">    ## The target database for metrics; will be created as needed.</span><br><span class="line">    database = &quot;telegraf&quot;</span><br><span class="line"></span><br><span class="line">    ## Name of existing retention policy to write to.  Empty string writes to</span><br><span class="line">    ## the default retention policy.  Only takes effect when using HTTP.</span><br><span class="line">    retention_policy = &quot;&quot;</span><br><span class="line"></span><br><span class="line">    ## Timeout for HTTP messages.</span><br><span class="line">    timeout = &quot;5s&quot;</span><br><span class="line"></span><br><span class="line">    ## HTTP Basic Auth</span><br><span class="line">    username = &quot;telegraf&quot;</span><br><span class="line">    password = &quot;telegraf&quot;</span><br><span class="line"></span><br><span class="line">日志：/var/log/telegraf/telegraf.log</span><br><span class="line"></span><br><span class="line">编辑conf文件：注释掉 加载 pem认证文件掉几行</span><br><span class="line"></span><br><span class="line">2、创建消费者：</span><br><span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic telegraf --from-beginning</span><br><span class="line"></span><br><span class="line">3、运行程序,执行程序</span><br><span class="line">需要在root账号下</span><br><span class="line">service telegraf restart</span><br><span class="line"></span><br><span class="line">4、此时消费者接受到cpu信息和内存信息以及http响应信息</span><br></pre></td></tr></table></figure><h3 id="下载安装influxdb"><a href="#下载安装influxdb" class="headerlink" title="下载安装influxdb"></a>下载安装influxdb</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">service influxdb status管理</span><br><span class="line">1、下载influxdb:</span><br><span class="line">    https://portal.influxdata.com/downloads/</span><br><span class="line">Ubuntu:</span><br><span class="line">    wget https://dl.influxdata.com/influxdb/releases/influxdb_1.7.6_amd64.deb</span><br><span class="line">    sudo dpkg -i influxdb_1.7.6_amd64.deb</span><br><span class="line">Centos:</span><br><span class="line">    wget https://dl.influxdata.com/influxdb/releases/influxdb-1.7.6.x86_64.rpm</span><br><span class="line">    sudo yum localinstall influxdb-1.7.6.x86_64.rpm</span><br><span class="line">Linux Binaries (64-bit)</span><br><span class="line">    wget https://dl.influxdata.com/influxdb/releases/influxdb-1.7.6_linux_amd64.tar.gz</span><br><span class="line">    tar xvfz influxdb-1.7.6_linux_amd64.tar.gz</span><br><span class="line">    </span><br><span class="line">启动：</span><br><span class="line">root账号下</span><br><span class="line">service influxdb start</span><br><span class="line"></span><br><span class="line">启动influxdb客户端</span><br><span class="line">influx</span><br><span class="line">或者</span><br><span class="line">influx -username &apos;name&apos; -password &apos;passwd&apos;</span><br><span class="line"></span><br><span class="line">为了配合telegraf数据存入influxdb</span><br><span class="line">1、创建telegraf中的账号密码</span><br><span class="line">    create user telegraf with password &apos;telegraf&apos; with all privileges</span><br><span class="line">2、创建数据库</span><br><span class="line">    create database telegraf</span><br><span class="line">3、进入数据库</span><br><span class="line">    use telegraf</span><br><span class="line">4、查看表</span><br><span class="line">    show measurements</span><br><span class="line">5、修改完telegraf的配置文件重启后，等待一会</span><br><span class="line">6、查看表</span><br><span class="line">    表内有了数据cpu、mem内存</span><br></pre></td></tr></table></figure><h3 id="下载安装grafana"><a href="#下载安装grafana" class="headerlink" title="下载安装grafana"></a>下载安装grafana</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">service grafana-server status管理</span><br><span class="line">官方地址：https://grafana.com/grafana/download</span><br><span class="line">ubuntu:</span><br><span class="line">    wget https://dl.grafana.com/oss/release/grafana_6.2.1_amd64.deb </span><br><span class="line">    sudo dpkg -i grafana_6.2.1_amd64.deb </span><br><span class="line">centos:</span><br><span class="line">    wget https://dl.grafana.com/oss/release/grafana-6.2.1-1.x86_64.rpm </span><br><span class="line">    sudo yum localinstall grafana-6.2.1-1.x86_64.rpm </span><br><span class="line">Linux Binaries(64 Bit)    </span><br><span class="line">    wget https://dl.grafana.com/oss/release/grafana-6.2.1.linux-amd64.tar.gz </span><br><span class="line">    tar -zxvf grafana-6.2.1.linux-amd64.tar.gz </span><br><span class="line">mac:</span><br><span class="line">    brew update</span><br><span class="line">    brew install grafana</span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">root账号下：</span><br><span class="line">service grafana-server start</span><br><span class="line">mac下：brew services start grafana   // 停止 brew services stop grafana</span><br><span class="line"></span><br><span class="line">浏览器打开：ip:port (grafana默认端口为 3000)</span><br><span class="line">第一次登陆默认账号命名为：admin admin</span><br><span class="line">第一次登陆成功后会让你修改密码</span><br><span class="line"></span><br><span class="line">官方模版：https://grafana.com/dashboards</span><br><span class="line"></span><br><span class="line">配置data source:</span><br><span class="line">    选择influxdb</span><br><span class="line">    http-auth鉴权选择basic auth即可</span><br><span class="line">    下面的user跟password填写正常的即可</span><br><span class="line">配置dashboard：</span><br><span class="line">    从官方模版 filter telegrah，选择Dynamic Dashboard，下载json文件</span><br><span class="line">    grafana + import，选择上传刚刚下载的json文件即可</span><br><span class="line">    然后选择源 --刚刚配置数据源中配置的名称</span><br><span class="line">    保存即可</span><br></pre></td></tr></table></figure><h3 id="grafana配置告警-email、钉钉"><a href="#grafana配置告警-email、钉钉" class="headerlink" title="grafana配置告警(email、钉钉)"></a>grafana配置告警(email、钉钉)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">email-修改/etc/grafana/grafana.ini配置文件</span><br><span class="line">    # 邮件服务器配置，自行修改配置</span><br><span class="line">    #################################### SMTP / Emailing ##########################</span><br><span class="line">    [smtp]</span><br><span class="line">    enabled = true  #是否允许开启</span><br><span class="line">    host = smtp.exmail.qq.com:465    #发送服务器地址，可以再邮箱的配置教程中找到：</span><br><span class="line">    user = 你的邮箱</span><br><span class="line">    # If the password contains # or ; you have to wrap it with trippel quotes. Ex &quot;&quot;&quot;#password;&quot;&quot;&quot;</span><br><span class="line">    # 这个密码是你开启smtp服务生成的密码</span><br><span class="line">    password = 你的密码</span><br><span class="line">    ;cert_file =</span><br><span class="line">    ;key_file =</span><br><span class="line">    ;skip_verify = false</span><br><span class="line">    from_address = 你的邮箱</span><br><span class="line">    from_name = Grafana</span><br><span class="line">    # EHLO identity in SMTP dialog (defaults to instance_name)</span><br><span class="line">    ehlo_identity = dashboard.example.com</span><br><span class="line">    </span><br><span class="line">    [emails]</span><br><span class="line">    ;welcome_email_on_sign_up = true</span><br><span class="line">    </span><br><span class="line">    #################################### Logging ##########################</span><br><span class="line"></span><br><span class="line">重启grafana: service grafana-service restart</span><br><span class="line"></span><br><span class="line">grafana配置告警接收方式</span><br><span class="line">Alerting =&gt; Notification channels</span><br><span class="line">添加一个email的，填写接收邮箱即可</span><br><span class="line"></span><br><span class="line">钉钉的先去钉钉添加一个机器人拿到webhook地址</span><br><span class="line">添加一个dingding的，把从钉钉机器人获取的webhook地址填写到url中即可</span><br><span class="line"></span><br><span class="line">grafana配置告警规则-Alert Rules</span><br><span class="line">进入监控面板dashboard</span><br><span class="line">选择一个面板，edit进入，选择alert</span><br><span class="line">    Condition 选项中是配置监控指标的报警限制：</span><br><span class="line">    监控数据的什么指标（when）从此时开始1分钟内（query（A，1m，now））超出阈值（is above），则进行告警</span><br><span class="line">    如最大值（max()）</span><br><span class="line">    Notifications选择接收方式，message填写接收内容</span><br><span class="line">    保存即可</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本节开始，将展开多种监控系统的讨论。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;telegraf&lt;br&gt;influxdb&lt;br&gt;grafana&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;下载安装telegraf&quot;&gt;&lt;a href=&quot;#下载安装telegraf&quot; cl
      
    
    </summary>
    
      <category term="监控系统" scheme="https://zhipenwang.github.io/categories/%E7%9B%91%E6%8E%A7%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Grafana" scheme="https://zhipenwang.github.io/tags/Grafana/"/>
    
      <category term="Telegraf" scheme="https://zhipenwang.github.io/tags/Telegraf/"/>
    
  </entry>
  
  <entry>
    <title>zookeeper操作KAFKA</title>
    <link href="https://zhipenwang.github.io/2019/06/29/2019_06_29/"/>
    <id>https://zhipenwang.github.io/2019/06/29/2019_06_29/</id>
    <published>2019-06-28T16:00:00.000Z</published>
    <updated>2019-07-13T04:42:53.238Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote><p>kafka节点在zookeeper中表示为：<br>/brokers<br>kafka-topics为：<br>/brokers/topics  </p></blockquote><h3 id="kafka删除topic"><a href="#kafka删除topic" class="headerlink" title="kafka删除topic"></a>kafka删除topic</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1、修改配置文件server.properties</span><br><span class="line">    添加如下配置：</span><br><span class="line">    delete.topic.enable=true</span><br><span class="line">   说明：官方-此项配置必须为true，默认为false。配置完重启kafka、zookeeper</span><br><span class="line">2、通过zookeeper删除</span><br><span class="line">    进入zookeeper客户端 ./zkCli.sh  -server 127.0.0.1:2182</span><br><span class="line">    找到topic目录</span><br><span class="line">        ls   /brokers/topics</span><br><span class="line">    删掉对应topic</span><br><span class="line">        rmr  /brokers/topic/topic-name</span><br><span class="line">    找到目录</span><br><span class="line">        ls    /config/topics</span><br><span class="line">    删掉对应topic</span><br><span class="line">        rmr  /config/topics/topic-name  </span><br><span class="line">以上两步全部执行才算彻底删除topic</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;kafka节点在zookeeper中表示为：&lt;br&gt;/brokers&lt;br&gt;kafka-topics为：&lt;br&gt;/
      
    
    </summary>
    
      <category term="KAFKA" scheme="https://zhipenwang.github.io/categories/KAFKA/"/>
    
    
      <category term="KAFKA" scheme="https://zhipenwang.github.io/tags/KAFKA/"/>
    
      <category term="Zookeeper" scheme="https://zhipenwang.github.io/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>PHP与KAFKA的两种消费方式</title>
    <link href="https://zhipenwang.github.io/2019/06/23/2019_06_23/"/>
    <id>https://zhipenwang.github.io/2019/06/23/2019_06_23/</id>
    <published>2019-06-22T16:00:00.000Z</published>
    <updated>2019-07-13T04:39:30.055Z</updated>
    
    <content type="html"><![CDATA[<p>KAFKA的低级消费</p><blockquote><p>多次读取同一个消息</p><ol><li>指定消费Topic Partition的Leader broker及备份broker；</li><li>构造并发送请求数据；</li><li>处理leader broker的变更；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$rk = new RdKafka\Consumer();</span><br><span class="line">$rk-&gt;setLogLevel(LOG_DEBUG);</span><br><span class="line">$rk-&gt;addBrokers(&quot;127.0.0.1:9092&quot;);</span><br><span class="line"></span><br><span class="line">$topic = $rk-&gt;newTopic(&quot;na-fleeper-users-profile&quot;);</span><br><span class="line"></span><br><span class="line">$topic-&gt;consumeStart(0, RD_KAFKA_OFFSET_BEGINNING);</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">    $msg = $topic-&gt;consume(0, 1000);</span><br><span class="line">    if(isset($msg-&gt;err) &amp;&amp; $msg-&gt;err)&#123;</span><br><span class="line">        echo $msg-&gt;errstr() . &quot;\n&quot;;</span><br><span class="line">        break;</span><br><span class="line">    &#125; elseif(isset($msg-&gt;payload) &amp;&amp; $msg-&gt;payload) &#123;</span><br><span class="line">        echo $msg-&gt;payload . &quot;\n&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></blockquote><p>KAFKA的高级消费</p><ol><li>同一个消费群组中，如果线程数大于Topic分区数，那么一些线程永远接收不到消息；</li><li>同一个消费群组中，如果线程数小于Topic分区数，部分线程将从多个分区接收消息；</li><li>对于从多个分区接收消息的线程，消费每个分区内的消息是有序的，但消费多个分区之间的消息是无序的；<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">$conf = new RdKafka\Conf();</span><br><span class="line"></span><br><span class="line">$conf-&gt;setRebalanceCb(function (RdKafka\KafkaConsumer $kafka, $err, array $partitions = null) &#123;</span><br><span class="line">   switch ($err) &#123;</span><br><span class="line">       case RD_KAFKA_RESP_ERR__ASSIGN_PARTITIONS:</span><br><span class="line">           echo &quot;Assign: &quot;;</span><br><span class="line">           var_dump($partitions);</span><br><span class="line">           $kafka-&gt;assign($partitions);</span><br><span class="line">           break;</span><br><span class="line">       case RD_KAFKA_RESP_ERR__REVOKE_PARTITIONS:</span><br><span class="line">           echo &quot;Revoke: &quot;;</span><br><span class="line">           var_dump($partitions);</span><br><span class="line">           $kafka-&gt;assign(NULL);</span><br><span class="line">           break;</span><br><span class="line">       default:</span><br><span class="line">           throw new \Exception($err);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">$conf-&gt;set(&apos;group.id&apos;, &quot;myConsumerGroup&quot;);</span><br><span class="line">$conf-&gt;set(&quot;metadata.broker.list&quot;, &quot;127.0.0.1:9092&quot;);</span><br><span class="line">$topicConf = new RdKafka\TopicConf();</span><br><span class="line">$topicConf-&gt;set(&apos;auto.offset.reset&apos;, &apos;smallest&apos;);</span><br><span class="line">$conf-&gt;setDefaultTopicConf($topicConf);</span><br><span class="line"></span><br><span class="line">$consumer = new RdKafka\KafkaConsumer($conf);</span><br><span class="line"></span><br><span class="line">$consumer-&gt;subscribe([&quot;test_nginx&quot;]);</span><br><span class="line"></span><br><span class="line">while (true) &#123;</span><br><span class="line">    $message = $consumer-&gt;consume(120*1000);</span><br><span class="line">    switch ($message-&gt;err) &#123;</span><br><span class="line">        case RD_KAFKA_RESP_ERR_NO_ERROR:</span><br><span class="line">            var_dump($message);</span><br><span class="line">            break;</span><br><span class="line">        case RD_KAFKA_RESP_ERR__PARTITION_EOF:</span><br><span class="line">            echo &quot;No more message; will wait for more\n&quot;;</span><br><span class="line">            break;</span><br><span class="line">        case RD_KAFKA_RESP_ERR__TIMED_OUT:</span><br><span class="line">            echo &apos;Timed out\n&apos;;</span><br><span class="line">            break;</span><br><span class="line">        default:</span><br><span class="line">            throw new \Exception($message-&gt;errstr(), $message-&gt;err);</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;KAFKA的低级消费&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;多次读取同一个消息&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;指定消费Topic Partition的Leader broker及备份broker；&lt;/li&gt;
&lt;li&gt;构造并发送请求数据；&lt;/li&gt;
&lt;li&gt;处理leader b
      
    
    </summary>
    
      <category term="KAFKA" scheme="https://zhipenwang.github.io/categories/KAFKA/"/>
    
    
      <category term="PHP" scheme="https://zhipenwang.github.io/tags/PHP/"/>
    
      <category term="KAFKA" scheme="https://zhipenwang.github.io/tags/KAFKA/"/>
    
  </entry>
  
  <entry>
    <title>PHP使用KAFKA</title>
    <link href="https://zhipenwang.github.io/2019/06/15/2019_06_15/"/>
    <id>https://zhipenwang.github.io/2019/06/15/2019_06_15/</id>
    <published>2019-06-14T16:00:00.000Z</published>
    <updated>2019-07-13T04:30:20.601Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境部署（PHP-RdKafka扩展）"><a href="#环境部署（PHP-RdKafka扩展）" class="headerlink" title="环境部署（PHP-RdKafka扩展）"></a>环境部署（PHP-RdKafka扩展）</h3><p><em>上一节说了KAFKA的单节点部署，本节就不再细述了。</em><br>为了允许KAFKA被PHP远程调用，需要修改KAFKA配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">在kafka的server.properties中修改如下kafka配置项：</span><br><span class="line">    advertised.listeners=PLAINTEXT://ip:port</span><br><span class="line">默认该项配置是注释掉的，如果不修改的话，kafka默认使用listeners配置项或者localhost+port来生产或者消费消息</span><br><span class="line">重启KAFKA</span><br></pre></td></tr></table></figure></p><p>安装lib库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/edenhill/librdkafka.git</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure></p><p>安装php-kafka扩展<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/arnaud-lb/php-rdkafka.git</span><br><span class="line">cd php-rdkafka</span><br><span class="line">phpize</span><br><span class="line">./configure --with-php-config=/usr/local/bin/php-config</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">在php.ini中加入：</span><br><span class="line">extension=rdkafka.so</span><br><span class="line">重启php-fpm</span><br></pre></td></tr></table></figure></p><h3 id="PHP-RdKAFKA使用"><a href="#PHP-RdKAFKA使用" class="headerlink" title="PHP-RdKAFKA使用"></a>PHP-RdKAFKA使用</h3><p>PHP-生产<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">try &#123;</span><br><span class="line">$rcf = new RdKafka\Conf();</span><br><span class="line">$rcf-&gt;set(&apos;group.id&apos;, &apos;test&apos;);</span><br><span class="line">$cf = new RdKafka\TopicConf();</span><br><span class="line">$cf-&gt;set(&apos;offset.store.method&apos;, &apos;broker&apos;);</span><br><span class="line">$cf-&gt;set(&apos;auto.offset.reset&apos;, &apos;smallest&apos;);</span><br><span class="line"></span><br><span class="line">$rk = new RdKafka\Producer($rcf);</span><br><span class="line">$rk-&gt;setLogLevel(LOG_DEBUG);</span><br><span class="line">$rk-&gt;addBrokers(&quot;127.0.0.1:9092&quot;);</span><br><span class="line">$topic = $rk-&gt;newTopic(&quot;test&quot;, $cf);</span><br><span class="line"></span><br><span class="line">for($i = 0; $i &lt; 10; $i++) &#123;</span><br><span class="line">$topic-&gt;produce(0,0,&apos;test&apos; . $i);</span><br><span class="line">&#125; </span><br><span class="line">&#125;catch (Exception $e) &#123;</span><br><span class="line">echo $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>PHP-消费<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">try &#123;</span><br><span class="line">    $rcf = new RdKafka\Conf();</span><br><span class="line">    $rcf-&gt;set(&apos;group.id&apos;, &apos;test&apos;);</span><br><span class="line">$cf = new RdKafka\TopicConf();</span><br><span class="line">    $cf-&gt;set(&apos;auto.offset.reset&apos;, &apos;smallest&apos;);</span><br><span class="line">    $cf-&gt;set(&apos;auto.commit.enable&apos;, true);</span><br><span class="line"> </span><br><span class="line">    $rk = new RdKafka\Consumer($rcf);</span><br><span class="line">    $rk-&gt;setLogLevel(LOG_DEBUG);</span><br><span class="line">    $rk-&gt;addBrokers(&quot;127.0.0.1:9092&quot;);</span><br><span class="line">    $topic = $rk-&gt;newTopic(&quot;test&quot;, $cf);</span><br><span class="line">    while (true) &#123;</span><br><span class="line">        $topic-&gt;consumeStart(0, RD_KAFKA_OFFSET_STORED);</span><br><span class="line">        $msg = $topic-&gt;consume(0, 1000);</span><br><span class="line">        var_dump($msg);</span><br><span class="line">        if (isset($msg-&gt;err) &amp;&amp; $msg-&gt;err) &#123;</span><br><span class="line">            echo $msg-&gt;errstr(), &quot;\n&quot;;</span><br><span class="line">        &#125; elseif(isset($msg-&gt;payload)) &#123;</span><br><span class="line">            echo $msg-&gt;payload, &quot;\n&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        $topic-&gt;consumeStop(0);</span><br><span class="line">        sleep(1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; catch (Exception $e) &#123;</span><br><span class="line">    echo $e-&gt;getMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>PHP-RdKAKFA消费KAFKA的时候，有两种方式，低级方式与高级方式，在下节会展开讨论。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境部署（PHP-RdKafka扩展）&quot;&gt;&lt;a href=&quot;#环境部署（PHP-RdKafka扩展）&quot; class=&quot;headerlink&quot; title=&quot;环境部署（PHP-RdKafka扩展）&quot;&gt;&lt;/a&gt;环境部署（PHP-RdKafka扩展）&lt;/h3&gt;&lt;p&gt;&lt;e
      
    
    </summary>
    
      <category term="KAFKA" scheme="https://zhipenwang.github.io/categories/KAFKA/"/>
    
    
      <category term="PHP" scheme="https://zhipenwang.github.io/tags/PHP/"/>
    
      <category term="KAFKA" scheme="https://zhipenwang.github.io/tags/KAFKA/"/>
    
  </entry>
  
  <entry>
    <title>KAFKA单机器单节点部署</title>
    <link href="https://zhipenwang.github.io/2019/06/05/2019_06_05/"/>
    <id>https://zhipenwang.github.io/2019/06/05/2019_06_05/</id>
    <published>2019-06-04T16:00:00.000Z</published>
    <updated>2019-07-13T04:18:16.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>Kafka是最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的分布式日志系统（也可以当做MQ系统），常见可以用于web/nginx日志、访问日志，消息服务等等，Linkedin于2010年贡献给了Apache基金会并成为顶级开源项目。</p></blockquote><blockquote><p>主要应用场景是：日志收集系统和消息系统。</p></blockquote><p>Kafka主要设计目标如下：</p><ol><li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能。</li><li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输。</li><li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个partition内的消息顺序传输。</li><li>同时支持离线数据处理和实时数据处理。</li><li>Scale out:支持在线水平扩展</li></ol><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>下载地址：<a href="http://kafka.apache.org/downloads.html" target="_blank" rel="noopener">http://kafka.apache.org/downloads.html</a><br>直接下载解压即可</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>启动zookeeper<br><em>前提：如果安装了zookeeper则需要启动zookeeper，这样就不需要启动KAFKA自带的zookeeper了</em><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/zookeeper-server-start.sh config/zookeeper.properties &amp;</span><br></pre></td></tr></table></figure></p><p>启动KAFKA<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">kafka配置文件：/config/zookeeper.properties中包含了zookeeper的监听地址：</span><br><span class="line">    zookeeper.connect=127.0.0.1:2181</span><br><span class="line">配置中其他主要信息：</span><br><span class="line">    broker.id=0</span><br><span class="line">    listeners=PLAINTEXT://:9092</span><br><span class="line"></span><br><span class="line">sh bin/kafka-server-start.sh config/server.properties</span><br><span class="line">守护进程后台启动：</span><br><span class="line">sh bin/kafka-server-start.sh config/server.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><p>启动生产者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure></p><p>启动消费者<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">0.90版本之前启动方式：</span><br><span class="line">sh bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span><br><span class="line">0.90版本之后启动方式：</span><br><span class="line">bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic test --from-beginning</span><br></pre></td></tr></table></figure></p><blockquote><p>生产者窗口发送消息，消费者窗口接收消息</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Kafka是最初由Linkedin公司开发，是一个分布式、分区的、多副本的、多订阅者，基于zookeeper协调的
      
    
    </summary>
    
      <category term="KAFKA" scheme="https://zhipenwang.github.io/categories/KAFKA/"/>
    
    
      <category term="KAFKA" scheme="https://zhipenwang.github.io/tags/KAFKA/"/>
    
  </entry>
  
  <entry>
    <title>nginx支持多域名</title>
    <link href="https://zhipenwang.github.io/2019/05/30/2019_05_30/"/>
    <id>https://zhipenwang.github.io/2019/05/30/2019_05_30/</id>
    <published>2019-05-29T16:00:00.000Z</published>
    <updated>2019-07-13T04:14:45.861Z</updated>
    
    <content type="html"><![CDATA[<h3 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h3><blockquote><p>某个域名支持http和https访问<br>某个域名只支持https访问<br>这种情况无法支持，因为加载的配置文件中，包含了listen 80支持http<br>所以另外一个域名也一样支持http<br>建议：<br>将80的重定向到https，这样所有的http访问都会重定向的定义的重定向https域名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">如：所有的http，不管什么域名,访问80端口都会重定向到https://www.test.com</span><br><span class="line">server &#123;</span><br><span class="line">listen 80;</span><br><span class="line">server_name  www.test.com;</span><br><span class="line">rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test1.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.test1.com</span><br><span class="line">    </span><br><span class="line">    #ssl on; 这里要注释掉</span><br><span class="line">    ssl_certificate /usr/local/nginx/conf/ssl/www_test1_com.crt;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/conf/ssl/www_test1_com.key;</span><br><span class="line"></span><br><span class="line">    #以下配置省略...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test2.conf</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.test2.com</span><br><span class="line">    </span><br><span class="line">    #ssl on; 这里要注释掉</span><br><span class="line">    ssl_certificate /usr/local/nginx/conf/ssl/www_test2_com.crt;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/conf/ssl/www_test2_com.key;</span><br><span class="line"></span><br><span class="line">    #以下配置省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;某个域名支持http和https访问&lt;br&gt;某个域名只支持https访问&lt;br&gt;这种情况无法支持，因为加载的配置文
      
    
    </summary>
    
      <category term="Nginx" scheme="https://zhipenwang.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://zhipenwang.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置80、443端口</title>
    <link href="https://zhipenwang.github.io/2019/05/24/2019_05_24/"/>
    <id>https://zhipenwang.github.io/2019/05/24/2019_05_24/</id>
    <published>2019-05-23T16:00:00.000Z</published>
    <updated>2019-05-26T04:04:35.117Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>nginx server 上 80、443端口，http与https共存<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name www.test.com</span><br><span class="line">    </span><br><span class="line">    #ssl on; 这里要注释掉</span><br><span class="line">    ssl_certificate /usr/local/nginx/conf/ssl/www_iamle_com.crt;</span><br><span class="line">    ssl_certificate_key /usr/local/nginx/conf/ssl/www_iamle_com.key;</span><br><span class="line"></span><br><span class="line">    #以下配置省略...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>nginx 80端口重定向到443端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.test.com;</span><br><span class="line">    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443;</span><br><span class="line">    server_name www.test.com;</span><br><span class="line">    ssl on;</span><br><span class="line">    ssl_certificate   /etc/pki/CA/certs/214321311540956.pem;</span><br><span class="line">    ssl_certificate_key  /etc/pki/CA/certs/214321311540956.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    ssl_prefer_server_ciphers on;   </span><br><span class="line">    index index.php index.htm index.html;</span><br><span class="line">    error_page 404 /404.html;</span><br><span class="line">    error_page 500 502 503 504 /50x.html;</span><br><span class="line"></span><br><span class="line">    location ~ \.php &#123;</span><br><span class="line">    root /alidata/www/html;</span><br><span class="line">    fastcgi_pass unix:/tmp/php-cgi.sock;</span><br><span class="line">    fastcgi_index index.php;</span><br><span class="line">    include   fastcgi.conf;</span><br><span class="line"></span><br><span class="line">    set $path_info &quot;&quot;;</span><br><span class="line">    set $fastcgi_script_name_new $fastcgi_script_name;</span><br><span class="line"></span><br><span class="line">        if ($fastcgi_script_name ~*   &quot;^(.+\.php)(/.+)$&quot;  ) &#123;</span><br><span class="line">            set $fastcgi_script_name_new $1;</span><br><span class="line">        set $path_info $2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fastcgi_param   SCRIPT_FILENAME   $document_root$fastcgi_script_name_new;</span><br><span class="line">    fastcgi_param   SCRIPT_NAME   $fastcgi_script_name_new;                    </span><br><span class="line">    fastcgi_param   PATH_INFO $path_info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">    root /alidata/www/html;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line">    if (!-e  $request_filename)&#123;</span><br><span class="line">        rewrite ^(.*)$ /index.php$1 last;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;nginx server 上 80、443端口，http与https共存&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line
      
    
    </summary>
    
      <category term="Nginx" scheme="https://zhipenwang.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://zhipenwang.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>redis的两种高可用方案：主从复制与哨兵机制</title>
    <link href="https://zhipenwang.github.io/2019/05/16/2019_05_16/"/>
    <id>https://zhipenwang.github.io/2019/05/16/2019_05_16/</id>
    <published>2019-05-15T16:00:00.000Z</published>
    <updated>2019-05-14T07:25:38.390Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redis数据主从复制"><a href="#redis数据主从复制" class="headerlink" title="redis数据主从复制"></a>redis数据主从复制</h3><h4 id="旧版本–全量复制"><a href="#旧版本–全量复制" class="headerlink" title="旧版本–全量复制"></a>旧版本–全量复制</h4><blockquote><p>命令：sync  </p><p>流程：  </p><ul><li>从服务器向主服务器发送sync命令  </li><li>主服务器收到sync命令后，调用bgsave命令生成最新的rdb文件，将这个文件同步给从服务器，从服务器载入rdb文件后，状态就跟主服务器执行bgsave命令时的状态一致了。  </li><li>主服务器将保存在命令缓冲区的写命令同步给从服务器，从服务器执行这些命令，这样从服务器的状态就跟主服务器当前状态一致了</li></ul></blockquote><p><img src="/img/redis_1.png" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">缺点：</span><br><span class="line">最大的问题在于从服务器断开重连的时候，即使从服务器已经复制了一部分数据了，，也需要全量复制所有数据，这样的效率很低，于是新版本的Redis做了改进</span><br></pre></td></tr></table></figure><h4 id="新版本–全量复制"><a href="#新版本–全量复制" class="headerlink" title="新版本–全量复制"></a>新版本–全量复制</h4><blockquote><p>命令：psync<br>既可实现完整全同步，也可实现部分同步  </p></blockquote><h5 id="复制偏移量：执行复制的双方，主从服务器，分别会维护一个复制偏移量："><a href="#复制偏移量：执行复制的双方，主从服务器，分别会维护一个复制偏移量：" class="headerlink" title="复制偏移量：执行复制的双方，主从服务器，分别会维护一个复制偏移量："></a>复制偏移量：执行复制的双方，主从服务器，分别会维护一个复制偏移量：</h5><ul><li>主服务器每次向从服务器同步了N字节数据后，将修改自己的复制偏移量+N  </li><li>从服务器每次从主服务器同步了N字节数据后，将修改自己的复制偏移量+N  </li></ul><h5 id="复制积压缓冲区"><a href="#复制积压缓冲区" class="headerlink" title="复制积压缓冲区"></a>复制积压缓冲区</h5><blockquote><p>主服务器内部维护了一个先进先出的队列作为复制积压缓冲区，其默认大小为1MB<br>在主服务器进行命令传播时，不仅会将写命令同步到从服务器，还会将写命令写入复制积压缓冲区</p></blockquote><p><img src="/img/redis_2.png" alt=""></p><h5 id="服务器运行ID"><a href="#服务器运行ID" class="headerlink" title="服务器运行ID"></a>服务器运行ID</h5><p>每个Redis服务器，都有其运行ID，运行ID由服务器在启动时自动生成，主服务器会将自己的运行ID发送给从服务器，从服务器会将主服务器的运行ID存起来。<br>从服务器Redis断开重连的时候，就是根据运行ID来判断同步的进度：  </p><ul><li>如果从服务器上保存的主服务器运行ID与当前主服务器运行ID一致，则表示此次断开重连的是之前复制的主服务器，主服务器可以继续尝试部分同步操作  </li><li>否则，如果前后两次的主服务器运行ID不相同，则认为是完成全同步流程</li></ul><h5 id="psync命令流程"><a href="#psync命令流程" class="headerlink" title="psync命令流程"></a>psync命令流程</h5><p>psync命令的大体流程如下：   </p><ul><li>如果从服务器之前没有复制过任何主服务器，或者之前执行过slaveof no one命令，从服务器就会向主服务器发送psync ? -1命令，请求主服务器进行数据的全量同步  </li><li>否则，如果前面从服务器已经同步过部分数据，此时从服务器就会发送psync {runid} {offset}命令给主服务器，其中runid是上一次主服务器的运行ID，offset是当前从服务器的复制偏移量</li></ul><p>主服务器收到psync命令后，会出现以下三种可能：</p><ul><li>主服务器返回 fullresync {runid} {offset}回复，表示主服务器要求与从服务器进行数据的完整全量复制，其中runid表示主服务器的运行ID，offset表示当前主服务器的复制偏移量</li><li>如果主服务器返回 +continue，表示主服务器与从服务器会进行部分数据的同步操作，将从服务器缺失的数据复制过来即可</li><li>如果主服务器返回 -err，表示主服务器的Redis版本低于2.8，无法识别psync命令，此时从服务器会向主服务器发送sync命令，进行完整的数据全量复制</li></ul><p><img src="/img/redis_3.png" alt=""></p><h3 id="哨兵机制"><a href="#哨兵机制" class="headerlink" title="哨兵机制"></a>哨兵机制</h3><blockquote><p>工作原理：  </p><ul><li>redis使用一组哨兵（sentinel）节点来监控Redis主从服务的可用性</li><li>一旦发现Redis主节点失效，就会从从节点中选取一个作为领导者（leader）</li><li>哨兵领导者再从剩余的Redis从节点中选取一个作为Redis主节点来对外服务<br>以上将Redis节点分为两类：  </li><li>哨兵节点（sentinel）：负责监控节点的运行情况</li><li>数据节点：即正常服务客户端的redis节点，有主从区分</li></ul></blockquote><h4 id="三个监控任务：对Redis数据节点进行监控"><a href="#三个监控任务：对Redis数据节点进行监控" class="headerlink" title="三个监控任务：对Redis数据节点进行监控"></a>三个监控任务：对Redis数据节点进行监控</h4><blockquote><p>哨兵节点通过三个定时监控任务来监控Redis数据节点的服务可用性  </p></blockquote><h5 id="info命令"><a href="#info命令" class="headerlink" title="info命令"></a>info命令</h5><p>每隔十秒，每个哨兵节点都会向Redis的主、从节点发送info命令，获取新的拓扑结构信息。<br>Redis拓扑结构信息包含：</p><ul><li>本节点角色：主或从</li><li>主从节点的地址、端口信息</li></ul><blockquote><p>这样哨兵节点就能从info命令中获取从节点的信息，因此后续加入的从节点不需要进行显性的配置就能自动感知。</p></blockquote><p><img src="/img/redis_4.png" alt=""></p><h5 id="向sentinel-hello频道同步信息"><a href="#向sentinel-hello频道同步信息" class="headerlink" title="向sentinel:hello频道同步信息"></a>向<strong>sentinel</strong>:hello频道同步信息</h5><p>每隔2秒，每个哨兵节点将会向redis数据节点的<strong>sentinel</strong>:hello频道同步自身得到的主节点信息以及当前哨兵节点的信息，由于其他哨兵节点也订阅了这个频道，因此实际上这个操作可以交换哨兵节点之间关于主节点以及哨兵节点的信息。</p><p>这一操作实际上完成了两件事情： </p><ul><li>发现新的哨兵节点：如果有新的哨兵节点加入，此时保存下来这个新哨兵节点的信息，后续与该哨兵节点建立连接。 </li><li>交换主节点的状态信息，作为后续客观判断主节点下线的依据。</li></ul><p><img src="/img/redis_5.png" alt=""></p><h5 id="向数据节点做心跳探测"><a href="#向数据节点做心跳探测" class="headerlink" title="向数据节点做心跳探测"></a>向数据节点做心跳探测</h5><p>每隔1秒，每个哨兵节点向主、从数据节点以及其他sentinel节点发送ping命令做心跳探测，这个心跳探测是后续主观判断数据节点下线的依据。</p><p><img src="/img/redis_6.png" alt=""></p><h4 id="主观下线和客观下线"><a href="#主观下线和客观下线" class="headerlink" title="主观下线和客观下线"></a>主观下线和客观下线</h4><h5 id="主观下线"><a href="#主观下线" class="headerlink" title="主观下线"></a>主观下线</h5><p>上面三个监控任务中的第三个探测心跳任务，如果在配置的down-after-milliseconds之后没有收到有效回复，那么就认为该数据节点“主观下线（sdown）”。</p><p><img src="/img/redis_7.png" alt=""></p><p>为什么称为“主观下线”？因为在一个分布式系统中，有多个机器在一起联动工作，网络可能出现各种状况，仅凭一个节点的判断还不足以认为一个数据节点下线了，这就需要后面的“客观下线”。</p><h5 id="客观下线"><a href="#客观下线" class="headerlink" title="客观下线"></a>客观下线</h5><p>当一个哨兵节点认为主节点主观下线时，该哨兵节点需要通过”sentinel is-master-down-by addr”命令向其他哨兵节点咨询该主节点是否下线了，如果有超过半数的哨兵节点都回答了下线，此时认为主节点“客观下线”。</p><p><img src="/img/redis_8.png" alt=""></p><h4 id="选举哨兵领导者"><a href="#选举哨兵领导者" class="headerlink" title="选举哨兵领导者"></a>选举哨兵领导者</h4><p>当主节点客观下线时，需要选举出一个哨兵节点做为哨兵领导者，以完成后续选出新的主节点的工作。</p><p>这个选举的大体思路是：</p><ul><li>每个哨兵节点通过向其他哨兵节点发送”sentinel is-master-down-by addr”命令来申请成为哨兵领导者。</li><li>而每个哨兵节点在收到一个”sentinel is-master-down-by addr”命令时，只允许给第一个节点投票，其他节点的该命令都会被拒绝。</li><li>如果一个哨兵节点收到了半数以上的同意票，则成为哨兵领导者。</li><li>如果前面三步在一定时间内都没有选出一个哨兵领导者，将重新开始下一次选举。  </li></ul><p>可以看到，这个选举领导者的流程很像raft中选举leader的流程。</p><p><img src="/img/redis_9.png" alt=""></p><h4 id="选出新的主节点"><a href="#选出新的主节点" class="headerlink" title="选出新的主节点"></a>选出新的主节点</h4><p>在剩下的redis从节点中，按照以下顺序来选择新的主节点：</p><ul><li>过滤掉“不健康”的数据节点：比如主观下线、断线的从节点、五秒内没有回复过哨兵节点ping命令的节点、与主节点失联的从节点。</li><li>选择slave-priority（从节点优先级）最高的从节点，如果存在则返回不存在则继续后面的流程。</li><li>选择复制偏移量最大的从节点，这意味着这个从节点上面的数据最完整，如果存在则返回不存在则继续后面的流程。 </li><li>到了这里，所有剩余从节点的状态都是一样的，选择runid最小的从节点。</li></ul><p><img src="/img/redis_10.png" alt=""></p><h4 id="提升新的主节点"><a href="#提升新的主节点" class="headerlink" title="提升新的主节点"></a>提升新的主节点</h4><p>选择了新的主节点之后，还需要最后的流程让该节点成为新的主节点：</p><ul><li>哨兵领导者向上一步选出的从节点发出“slaveof no one”命令，让该节点成为主节点。</li><li>哨兵领导者向剩余的从节点发送命令，让它们成为新主节点的从节点。</li><li>哨兵节点集合会将原来的主节点更新为从节点，当其恢复之后命令它去复制新的主节点的数据</li></ul><p><img src="/img/redis_11.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;redis数据主从复制&quot;&gt;&lt;a href=&quot;#redis数据主从复制&quot; class=&quot;headerlink&quot; title=&quot;redis数据主从复制&quot;&gt;&lt;/a&gt;redis数据主从复制&lt;/h3&gt;&lt;h4 id=&quot;旧版本–全量复制&quot;&gt;&lt;a href=&quot;#旧版本–全量复制&quot;
      
    
    </summary>
    
      <category term="Redis" scheme="https://zhipenwang.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://zhipenwang.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>PHP错误及异常处理</title>
    <link href="https://zhipenwang.github.io/2019/05/10/2019_05_10/"/>
    <id>https://zhipenwang.github.io/2019/05/10/2019_05_10/</id>
    <published>2019-05-09T16:00:00.000Z</published>
    <updated>2019-05-10T08:58:26.320Z</updated>
    
    <content type="html"><![CDATA[<h3 id="set-error-handler"><a href="#set-error-handler" class="headerlink" title="set_error_handler()"></a>set_error_handler()</h3><blockquote><p>捕获错误，只能捕获系统产生的一些Warning、Notice级别错误<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">代码：</span><br><span class="line">set_error_handler(&apos;func_error&apos;);</span><br><span class="line">function func_error($type, $message, $file, $line) &#123;</span><br><span class="line">var_dump(&quot;&lt;b&gt;set_error_handler: &quot; . $type . &quot;:&quot; . $message . &quot; in &quot; . $file . &quot; on &quot; . $line . &quot; line .&lt;/b&gt;&lt;br /&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">echo $name;</span><br><span class="line"></span><br><span class="line">执行结果：string(108) &quot;set_error_handler: 8:Undefined variable: name in /data/code/www/test/exception.php on 10 line .&quot;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="register-shutdown-function"><a href="#register-shutdown-function" class="headerlink" title="register_shutdown_function()"></a>register_shutdown_function()</h3><blockquote><p>PHP执行结束前最后一个调用的函数<br>只在parse-time出错时是不会调用本函数的。只有在run-time出错的时候，才会调用本函数<br>error_get_last() 可以拿到本次执行产生的所有错误</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">代码：</span><br><span class="line">register_shutdown_function(&apos;func_shutdown&apos;);</span><br><span class="line">function func_shutdown() &#123;</span><br><span class="line">if ($error = error_get_last()) &#123;</span><br><span class="line">var_dump(&quot;&lt;b&gt;register_shutdown_function: Type:&quot; . $error[&apos;type&apos;] . &quot; Msg:&quot; . $error[&apos;message&apos;] . &quot; in &quot; . $error[&apos;file&apos;] . &quot;on line &quot; . $error[&apos;line&apos;] . &quot;&lt;/b&gt;&lt;br /&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">require_once(&quot;error.php&quot;);</span><br><span class="line"></span><br><span class="line">error.php: </span><br><span class="line">echo 23++--;</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">Parse error: syntax error, unexpected &apos;++&apos; (T_INC), expecting &apos;,&apos; or &apos;;&apos; in /data/code/www/test/error.php on line 2</span><br><span class="line">string(153) &quot;register_shutdown_function: Type:4 Msg:syntax error, unexpected &apos;++&apos; (T_INC), expecting &apos;,&apos; or &apos;;&apos; in /data/code/www/test/error.phpon line 2&quot;</span><br></pre></td></tr></table></figure><h3 id="set-exception-handler"><a href="#set-exception-handler" class="headerlink" title="set_exception_handler()"></a>set_exception_handler()</h3><blockquote><p>没有用try/catch块来捕获的异常或没有被捕获的异常就会进入此方法，回调函数执行后异常会中止</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">代码</span><br><span class="line">set_exception_handler(&apos;func_exception&apos;);</span><br><span class="line">function func_exception(Exception $e) &#123;</span><br><span class="line">var_dump(&quot;&lt;b&gt;set_exception_handler: Exception: &quot; . $e-&gt;getMessage() . &quot;&lt;/b&gt;&lt;br /&gt;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">throw new Exception(&quot;Error Processing Request&quot;, 1);</span><br><span class="line"></span><br><span class="line">执行结果：</span><br><span class="line">string(71) &quot;set_exception_handler: Exception: Error Processing Request&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;set-error-handler&quot;&gt;&lt;a href=&quot;#set-error-handler&quot; class=&quot;headerlink&quot; title=&quot;set_error_handler()&quot;&gt;&lt;/a&gt;set_error_handler()&lt;/h3&gt;&lt;blockquo
      
    
    </summary>
    
      <category term="PHP" scheme="https://zhipenwang.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://zhipenwang.github.io/tags/PHP/"/>
    
  </entry>
  
  <entry>
    <title>URL在Nginx与Apache下的重写规则</title>
    <link href="https://zhipenwang.github.io/2019/05/04/2019_05_04/"/>
    <id>https://zhipenwang.github.io/2019/05/04/2019_05_04/</id>
    <published>2019-05-03T16:00:00.000Z</published>
    <updated>2019-05-05T09:18:10.105Z</updated>
    
    <content type="html"><![CDATA[<h3 id="nginx下的url重写"><a href="#nginx下的url重写" class="headerlink" title="nginx下的url重写"></a>nginx下的url重写</h3><p>修改nginx的配置文件，nginx.conf<br>修改某个站点目录下的url重写规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    location /zhipeng/ &#123;</span><br><span class="line">        if (!-e $request_filename)&#123;</span><br><span class="line">            rewrite  ^/zhipeng/(.*)$  /zhipeng/index.php?s=$1  last;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改整站的url重写规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    rewrite  ^/zhipeng/(.*)$  /zhipeng/index.php?s=$1  last;</span><br><span class="line">    //rewrite 规则 定向路径 重写类型</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>规则：可以是字符串或者正则来表示想匹配的目标url<br>定向路径：表示匹配到规则后要定向的路径，如果规则里有正则，则可以使用$index来表示正则里的捕获分组<br>重写类型：  </p><blockquote><p>last ：相当于Apache里德(L)标记，表示完成rewrite，浏览器地址栏URL地址不变<br>    break；本条规则匹配完成后，终止匹配，不再匹配后面的规则，浏览器地址栏URL地址不变<br>    redirect：返回302临时重定向，浏览器地址会显示跳转后的URL地址<br>    permanent：返回301永久重定向，浏览器地址栏会显示跳转后的URL地址  </p></blockquote></blockquote><h3 id="apache下的url重写"><a href="#apache下的url重写" class="headerlink" title="apache下的url重写"></a>apache下的url重写</h3><p>修改apache的配置文件http.conf<br>开启 rewrite模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LoadModule rewrite_module modules/mod_rewrite.so</span><br></pre></td></tr></table></figure></p><p>自定义站点目录的重写规则<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">在要支持url rewrite的目录启用：</span><br><span class="line"> Options FollowSymLinks 和 AllowOverride All</span><br></pre></td></tr></table></figure></p><p>站点目录下添加 .htaccess文件,添加内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line">  Options +FollowSymlinks</span><br><span class="line">  RewriteEngine On</span><br><span class="line"></span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line">  RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line">  RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>%{REQUEST_FILENAME}获得一个服务器变量的值<br>!-f是正则，其中感叹号表否定，-f用来检测当前值所代表的路径是否是一个常规文件<br>$1代表引用RewriteRule中的第一个正则(.*)代表的字符  </p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;nginx下的url重写&quot;&gt;&lt;a href=&quot;#nginx下的url重写&quot; class=&quot;headerlink&quot; title=&quot;nginx下的url重写&quot;&gt;&lt;/a&gt;nginx下的url重写&lt;/h3&gt;&lt;p&gt;修改nginx的配置文件，nginx.conf&lt;br&gt;修改某
      
    
    </summary>
    
      <category term="服务器" scheme="https://zhipenwang.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="PHP" scheme="https://zhipenwang.github.io/tags/PHP/"/>
    
      <category term="Nginx" scheme="https://zhipenwang.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>redis：内存满了你能怎么办</title>
    <link href="https://zhipenwang.github.io/2019/04/23/2019_04_23/"/>
    <id>https://zhipenwang.github.io/2019/04/23/2019_04_23/</id>
    <published>2019-04-22T16:00:00.000Z</published>
    <updated>2019-04-23T08:21:51.944Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>redis是纯内存，key-value的数据库。</p></blockquote><p>解决方法：</p><ol><li>增加内存</li><li>使用内存淘汰策略（LRU）</li><li>Redis集群</li></ol><p><em>第一点是最笨的方法，耗钱耗资源，适合有钱的大佬😂，本文主要讲解第二点跟第三点。</em></p><h3 id="使用内存淘汰策略（LRU）"><a href="#使用内存淘汰策略（LRU）" class="headerlink" title="使用内存淘汰策略（LRU）"></a>使用内存淘汰策略（LRU）</h3><blockquote><p>redis设置配置文件的maxmemory参数，可以控制其最大可以用的内存大小（字节）。<br>当所需内存超过了maxmemory后，需要去修改配置文件的maxmemory-policy参数了。</p></blockquote><p>maxmemory-policy，默认值为【noeviction】，下列为删除redis键具有的淘汰规则。</p><blockquote><p>LRU算法，least RecentlyUsed，最近最少使用算法。也就是说默认删除最近最少使用的键。</p></blockquote><table><thead><tr><th>规则名称</th><th>规则说明</th></tr></thead><tbody><tr><td>volatile-lru</td><td>使用LRU算法删除一个键（只对设置了生存时间的键），最少使用的</td></tr><tr><td>allkeys-lru</td><td>使用LRU算法删除一个键，最少使用的</td></tr><tr><td>volatile-random</td><td>随机删除一个键（只对设置了生存长时间的键）</td></tr><tr><td>allkeys-random</td><td>随机删除一个键</td></tr><tr><td>volatile-ttl</td><td>删除生存时间最近的一个键</td></tr><tr><td>noeviction</td><td>不删除键，只返回错误</td></tr></tbody></table><blockquote><p>作为内存数据库，出于对性能和内存消耗的考虑，Redis 的淘汰算法实际实现上并非针对所有 key，而是抽样一小部分并且从中选出被淘汰的 key。</p><p>使用 Redis 缓存数据时，为了提高缓存命中率，需要保证缓存数据都是热点数据。可以将内存最大使用量设置为热点数据占用的内存量，然后启用 allkeys-lru 淘汰策略，将最近最少使用的数据淘汰。</p><p>Redis 4.0 引入了 volatile-lfu 和 allkeys-lfu 淘汰策略，LFU 策略通过统计访问频率，将访问频率最少的键值对淘汰。</p></blockquote><p>但是一定要注意一点！redis中并不会准确的删除所有键中最近最少使用的键，而是随机抽取3个键，删除这三个键中最近最少使用的键。<br>那么3这个数字也是可以设置的，对应位置是配置文件中的maxmeory-samples.</p><h3 id="Redis集群"><a href="#Redis集群" class="headerlink" title="Redis集群"></a>Redis集群</h3><p><em>Redis仅支持单实例，内存一般最多10~20GB。对于内存动辄100~200GB的系统，就需要通过集群来支持了。</em></p><p>Redis集群有三种方式：客户端分片、代理分片、RedisCluster。</p><h4 id="客户端分片"><a href="#客户端分片" class="headerlink" title="客户端分片"></a>客户端分片</h4><p>通过业务代码自己实现路由</p><blockquote><p>优势：可以自己控制分片算法、性能比代理的好<br>劣势：维护成本高、扩容/缩容等运维操作都需要自己研发</p></blockquote><h4 id="代理分片（redis中间件）"><a href="#代理分片（redis中间件）" class="headerlink" title="代理分片（redis中间件）"></a>代理分片（redis中间件）</h4><p>代理程序接收到来自业务程序的数据请求，根据路由规则，将这些请求分发给正确的Redis实例并返回给业务程序。使用类似Twemproxy、Codis等中间件实现。</p><blockquote><p>优势：运维方便、程序不用关心如何链接Redis实例<br>劣势：会带来性能消耗（大概20%）、无法平滑扩容/缩容，需要执行脚本迁移数据，不方便(Codis在Twemproxy基础上优化并实现了预分片来达到Auto Rebalance)。</p></blockquote><h4 id="Redis-Cluster"><a href="#Redis-Cluster" class="headerlink" title="Redis Cluster"></a>Redis Cluster</h4><blockquote><p>优势：官方集群解决方案、无中心节点，和客户端直连，性能较好<br>劣势：方案太重、无法平滑扩容/缩容，需要执行相应的脚本，不方便、太新，没有相应成熟的解决案例</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;redis是纯内存，key-value的数据库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;解决方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;增加内存&lt;/li&gt;
&lt;li&gt;使用内存淘汰策略（LRU）&lt;/li&gt;
&lt;li&gt;Redis集群&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="redis" scheme="https://zhipenwang.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://zhipenwang.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>深入理解cgi与fastcgi：nginx与fpm的工作机制</title>
    <link href="https://zhipenwang.github.io/2019/04/18/2019_04_18/"/>
    <id>https://zhipenwang.github.io/2019/04/18/2019_04_18/</id>
    <published>2019-04-17T16:00:00.000Z</published>
    <updated>2019-04-18T09:18:05.977Z</updated>
    
    <content type="html"><![CDATA[<p><em>本文主要是讨论Nginx与FPM的工作机制及其配置背后的原理，以此来真正理解Nginx与PHP的协同工作机制。</em></p><blockquote><p>先来谈谈CGI、FastCGI两个协议及PHP-FPM。</p></blockquote><h3 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h3><p>CGI是Web Server与后台语言交互的协议。通过此协议，开发者可以使用任何语言处理web server发来的请求，动态的生成内容。  </p><p>CGI的工作原理：<br>每当客户请求CGI的时候，WEB服务器就请求操作系统生成一个新的CGI解释器进程（如php-cgi.exe），CGI的一个进程处理完一个请求后就退出，下一个请求来时再创建新的进程。</p><p>CGI的缺点：<br>每处理一个请求都需要fork出一个全新的进程，随着Web的兴起，高并发越来越成为常态，这样低效的方式无法满足需求。于是FastCGI诞生了。</p><h3 id="FastCGI"><a href="#FastCGI" class="headerlink" title="FastCGI"></a>FastCGI</h3><p>FastCGI，顾名思义为更快的CGI，允许在一个进程内处理多个请求，而不是一个请求处理完毕就直接结束进程，性能上有了很大的提高。<br>FastCGI，就像一个常驻（long-live）型的CGI，可以一直执行着，只要激活后，不会每次都要花费时间去fork一次进程（这是CGI最为人诟病的fork-and-execute模式）。  </p><p>一般情况下，FastCGI的整个工作流程如下：  </p><ol><li>Web Server启动时载入FastCGI进程管理器（IIS ISAPI或Apache Module）</li><li>FastCGI进程管理器自身初始化。启动多个CGI解释器进程（可见多个php-cgi）并等待来自Web Server的连接</li><li>当客户端请求到达Web Server时，FastCGI进程管理器选择并连接到一个CGI解释器。Web Server将CGI环境变量和标准输入发送到FastCGI子进程php-cgi</li></ol><h3 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title="PHP_FPM"></a>PHP_FPM</h3><p>php-fpm是PHP内置的一个FastCGI进程管理器。是一种master（主）/worker（子）多进程架构，与nginx设计风格有点类似。<br>master进程只有一个，主要负责CGI及PHP环境初始化、端口监听、事件监听、子进程状态等等，接收来自Web Server的请求；而worker进程则一般有多个（具体数量根据实际需要配置），每个进程内部都嵌入了一个PHP解释器，是PHP代码真正执行的地方，负责处理php请求。</p><h4 id="运行模式"><a href="#运行模式" class="headerlink" title="运行模式"></a>运行模式</h4><p>在介绍允许原理之前，先了解它的几种运行模式。<br>php-fpm支持三种运行模式，分别为static、ondemand、dynamic，默认为dynamic。  </p><ol><li>static：静态模式，启动时分配固定的worker进程，通过设置pm.max_children固定的worker进程数</li><li>ondemand：按需分配，当收到用户请求时fork worker进程</li><li>dynamic：动态模式，启动时分配固定的进程，伴随着请求数增加，在设定的浮动范围调整worker进程</li></ol><h4 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h4><p>php-fpm采用master/worker架构设计，下面详细讲解这两个模块的运行原理。</p><h5 id="master进程"><a href="#master进程" class="headerlink" title="master进程"></a>master进程</h5><p>master进程工作流程分为4个阶段  </p><ol><li>cgi初始化阶段：分别调用fcgi_init()和 sapi_startup()函数，注册进程信号以及初始化sapi_globals全局变量。 </li><li>php环境初始化阶段：由cgi_sapi_module.startup 触发。实际调用php_cgi_startup函数，而php_cgi_startup内部又调用php_module_startup执行。<br> php_module_startup主要功能：  <ol><li>加载和解析php配置；  </li><li>加载php模块并记入函数符号表(function_table)；  </li><li>加载zend扩展 ;   </li><li>设置禁用函数和类库配置；  </li><li>注册回收内存方法； </li></ol></li><li>php-fpm初始化阶段：执行fpm_init()函数。负责解析php-fpm.conf文件配置，获取进程相关参数（允许进程打开的最大文件数等）,初始化进程池及事件模型等操作。 </li><li>php-fpm运行阶段：执行fpm_run() 函数，运行后主进程发生阻塞。<br> 该阶段分为两部分：fork子进程 和 循环事件。<br> fork子进程部分交由fpm_children_create_initial函数处理（ 注：ondemand模式在fpm_pctl_on_socket_accept函数创建）。<br> 循环事件部分通过fpm_event_loop函数处理，其内部是一个死循环，负责事件的收集工作。</li></ol><h5 id="worker进程"><a href="#worker进程" class="headerlink" title="worker进程"></a>worker进程</h5><p>worker进程分为 接收客户端请求、处理请求、请求结束三个阶段。  </p><ol><li><p>接收客户端请求：执行fcgi_accept_request函数，其内部通过调用accept 函数获取客户端请求。</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//请求锁</span><br><span class="line">FCGI_LOCK(req-&gt;listen_socket);</span><br><span class="line">req-&gt;fd = accept(listen_socket, (struct sockaddr *)&amp;sa, &amp;len);</span><br><span class="line">//释放锁</span><br><span class="line">FCGI_UNLOCK(req-&gt;listen_socket);</span><br></pre></td></tr></table></figure><p> 从上面的代码，可以注意到accept之前有一个请求锁的操作，这么设计是为了避免请求出现“惊群”的现象。当然，这是一个可选的选项，可以取消该功能。</p></li><li>处理请求阶段：  <ol><li>首先，分别调用fpm_request_info、php_request_startup获取请求内容及注册全局变量(GET、_POST、SERVER、_ENV、$_FILES)；  </li><li>然后根据请求信息调用php_fopen_primary_script访问脚本文件；  </li><li>最后交给php_execute_script执行。php_execute_script内部调用zend_execute_scripts方法将脚本交给zend引擎处理。 </li></ol></li><li>请求结束阶段：执行php_request_shutdown函数。此时回调register_shutdown_function注册的函数及__destruct()方法，发送响应内容、释放内存等操作。</li></ol><h4 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h4><p>从FPM接收到请求到处理完毕，其具体流程如下：</p><ol><li>FPM的master进程接收到请求</li><li>master进程根据配置指派特定的worker进程进行请求处理，如果没有可用进程，返回错误，这也是在配合Nginx遇到502错误比较多的原因</li><li>worker进程处理请求，如果超时，返回504错误</li><li>请求处理结束，返回结果</li></ol><blockquote><p>下面从Nginx层面来说明与fpm的请求处理。</p></blockquote><h3 id="Nginx与fpm"><a href="#Nginx与fpm" class="headerlink" title="Nginx与fpm"></a>Nginx与fpm</h3><p>Nginx不仅仅是一个Web服务器，也是一个功能强大的Proxy服务器，除了进行http请求的代理，也可以进行许多其他协议请求的代理，包括本文与fpm相关的fastcgi协议。  </p><blockquote><p>为了能够使 Nginx 理解 fastcgi 协议，Nginx 提供了 fastcgi 模块来将 http 请求映射为对应的 fastcgi 请求。</p></blockquote><h4 id="Nginx的fastcgi-模块"><a href="#Nginx的fastcgi-模块" class="headerlink" title="Nginx的fastcgi 模块"></a>Nginx的fastcgi 模块</h4><ol><li>提供了 fastcgi_param 指令来主要处理这些映射关系，其主要完成的工作是将 Nginx 中的变量翻译成 PHP 中能够理解的变量。  </li><li>提供了 fastcgi_pass 指令，这个指令用于指定 fpm 进程监听的地址，Nginx 会把所有的 php 请求翻译成 fastcgi 请求之后再发送到这个地址</li></ol><p>下面是一个简单的可用工作的Nginx配置文件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    root         /data/code/www;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /data/code/www;</span><br><span class="line">        index  index.php index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root            /data/code/www;</span><br><span class="line">        fastcgi_index   index.php;</span><br><span class="line">        fastcgi_pass    phpfpm_backend;</span><br><span class="line">        include         fastcgi_params;</span><br><span class="line">        fastcgi_param   SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class="line">        #fastcgi_param  SCRIPT_NAME      $fastcgi_script_name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>在这个配置文件中，新建了虚拟主机:<br>监听80端口,<br>Web根目录为：/data/code/www，<br>通过location指令，将所有的以.php结尾的文件都交给了fastcgi模块去处理，从而将所有的php求都交给了fpm处理，<br>完成了Nginx到fpm的闭环。</p></blockquote><p>希望通过本文，能够让大家对Nginx与FPM通信的整个流程比较清晰。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;本文主要是讨论Nginx与FPM的工作机制及其配置背后的原理，以此来真正理解Nginx与PHP的协同工作机制。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;先来谈谈CGI、FastCGI两个协议及PHP-FPM。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 i
      
    
    </summary>
    
      <category term="PHP" scheme="https://zhipenwang.github.io/categories/PHP/"/>
    
    
      <category term="PHP" scheme="https://zhipenwang.github.io/tags/PHP/"/>
    
      <category term="Nginx" scheme="https://zhipenwang.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>ab测试</title>
    <link href="https://zhipenwang.github.io/2019/04/14/2019_04_14/"/>
    <id>https://zhipenwang.github.io/2019/04/14/2019_04_14/</id>
    <published>2019-04-13T16:00:00.000Z</published>
    <updated>2019-04-14T12:53:15.638Z</updated>
    
    <content type="html"><![CDATA[<p>对于服务端开发而言，接口的测试是必不可少的，尤其是对于接口的压力测试，对于高并发的承受能力等。<br>接口测试一般使用postman测试即可，本文暂不详解，后续再更新说明吧。</p><p>网传postman也可以进行压力测试，本人就亲自去试了一把，果然出人意料啊，一传十、十传百，根本就不是大家说的那样啊。</p><blockquote><p>postman只是进行简单的接口测试<br>postman有个runnner功能，可以进行压力测试，但是不支持并发测试，其中的多次测试都是串行执行的</p></blockquote><p><em>那么接口的压力测试呢，目前行业内有很多工具支持，如Jmeter、Loadrunner、ab等.</em><br><em>网上说了很多的测试工具，其中ab工具是最直接最简单的，所以本文针对ab测试展开讨论。</em></p><h4 id="ab工具的简单介绍"><a href="#ab工具的简单介绍" class="headerlink" title="ab工具的简单介绍"></a>ab工具的简单介绍</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ab全称为：apache bench</span><br><span class="line">在apache官网的介绍如下：</span><br><span class="line">ab是Apache超文本传输协议(HTTP)的性能测试工具。其设计意图是描绘当前所安装的Apache的执行性能，主要是显示你安装的Apache每秒可以处理多少个请求。</span><br></pre></td></tr></table></figure><h4 id="ab工具的安装"><a href="#ab工具的安装" class="headerlink" title="ab工具的安装"></a>ab工具的安装</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mac的安装：</span><br><span class="line">mac下本身系统就自带了apache，所以可以直接使用ab工具，使用mac的有钱大佬可以跳过安装直接往下看了。</span><br><span class="line">ubuntu系统：</span><br><span class="line">使用apt命令直接安装即可</span><br><span class="line">sudo apt install apache2-utils</span><br><span class="line">centos系统：</span><br><span class="line">使用yum命令直接安装即可</span><br><span class="line">yum -y install httpd-tools</span><br><span class="line">windows系统：</span><br><span class="line">在官网下载，傻瓜式安装即可</span><br><span class="line">https://www.apachehaus.com/cgi-bin/download.plx</span><br></pre></td></tr></table></figure><h4 id="ab工具的使用"><a href="#ab工具的使用" class="headerlink" title="ab工具的使用"></a>ab工具的使用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 100 -c 10 https://www.baidu.com</span><br></pre></td></tr></table></figure><h4 id="ab工具的参数"><a href="#ab工具的参数" class="headerlink" title="ab工具的参数"></a>ab工具的参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ab:  http请求</span><br><span class="line">abs: https请求</span><br><span class="line">-n:  请求总次数</span><br><span class="line">-c:  并发用户数</span><br><span class="line">-T:  内容类型，一般和-p -起使用（Content-Type）</span><br><span class="line">-p:  包含POST参数的文件或数据</span><br><span class="line">-C:  cookie参数</span><br></pre></td></tr></table></figure><p>如果请求数过大失败显示连接数被限制了，解决<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ulimit -n 65535</span><br></pre></td></tr></table></figure></p><h4 id="ab测试后的参数说明"><a href="#ab测试后的参数说明" class="headerlink" title="ab测试后的参数说明"></a>ab测试后的参数说明</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">request pre second: 吞吐率</span><br><span class="line">    计算公式：总请求数/处理完所有请求花费的时间</span><br><span class="line">    request pre second = complete requests / time taken for tests</span><br><span class="line"></span><br><span class="line">complete requests: 总请求数</span><br><span class="line"></span><br><span class="line">time taken for tests 处理完请求花费的时间</span><br><span class="line"></span><br><span class="line">concurrency level: 并发用户数</span><br><span class="line">    要区分并发用户数与并发连接数，一个用户可能存在多个连接数</span><br><span class="line"></span><br><span class="line">time pre request: 用户平均请求等待时间</span><br><span class="line">    计算公式：处理完所有请求花费的时间 / （总请求数/并发用户数）</span><br><span class="line">    time pre request = time taken for tests / (complete request / concurrency level)</span><br><span class="line"></span><br><span class="line">time pre request: across all concurrent requests 服务器平均请求等待时间</span><br><span class="line">    计算公式：处理完所有请求花费的时间 / 总请求数</span><br><span class="line">    time taken for tests / complete requests</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对于服务端开发而言，接口的测试是必不可少的，尤其是对于接口的压力测试，对于高并发的承受能力等。&lt;br&gt;接口测试一般使用postman测试即可，本文暂不详解，后续再更新说明吧。&lt;/p&gt;
&lt;p&gt;网传postman也可以进行压力测试，本人就亲自去试了一把，果然出人意料啊，一传十、
      
    
    </summary>
    
      <category term="接口测试" scheme="https://zhipenwang.github.io/categories/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试" scheme="https://zhipenwang.github.io/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>hexo换了设备之后本地没问题，访问域名空白</title>
    <link href="https://zhipenwang.github.io/2019/04/10/hexo_bug/"/>
    <id>https://zhipenwang.github.io/2019/04/10/hexo_bug/</id>
    <published>2019-04-10T05:28:01.000Z</published>
    <updated>2019-04-10T05:35:27.962Z</updated>
    
    <content type="html"><![CDATA[<ul><li>hexo三件套<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>本地clone了仓库后，执行hexo s本地没问题<br>问题点：<br>本地新写了博客，然后执行hexo三件套,线上打开空白了<br>   解决：本地项目目录下Data/和archives/文件内清空，执行hexo三件套<br>如果还是不行，继续：<br>     解决：将本地项目目录下的 .deploy_git/文件夹删除，重新执行hexo三件套<br>这个时候一般就解决问题了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;hexo三件套&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span
      
    
    </summary>
    
      <category term="搭建博客" scheme="https://zhipenwang.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="Article" scheme="https://zhipenwang.github.io/tags/Article/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之数据表级联操作-数据完整性约束</title>
    <link href="https://zhipenwang.github.io/2018/07/15/mysql_key/"/>
    <id>https://zhipenwang.github.io/2018/07/15/mysql_key/</id>
    <published>2018-07-15T12:21:01.000Z</published>
    <updated>2019-04-09T14:57:32.976Z</updated>
    
    <content type="html"><![CDATA[<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><blockquote><p>目前mysql只有InnoDB存储引擎支持外键约束</p><ol><li>column_name 当前表外键字段名</li><li>table_name 外键表</li><li>index_column_name 外键所在外键表中字段名</li><li>ON DELETE 删除  ON UPDATE 更新</li><li>reference_option语法格式为：（没设置时候，默认两个都指定 RESTRICT）<br> 当删除或更新外键所在外键表的数据时候<br> RESTRICT      限制策略，系统不删除或更新外键当前表的数据<br> CASCADE          级联策略，自动删除或更新外键当前表的数据<br> SET FULL       置空策略，设置外键当前表的数据外键列数据为NULL，需要提前设置外键列未被限制 NOT NULL<br> NO ACTION       不采取实施策略，系统不删除或更新外键当前表的数据，与 RESTRICT 一致</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FOREIGN KEY ( column_name [(length)] [ASC | DESC] ) </span><br><span class="line">REFERENCES table_name(index_column_name)</span><br><span class="line">[MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]</span><br><span class="line">[ON DELETE reference_option]</span><br><span class="line">[ON UPDATE reference_option]</span><br></pre></td></tr></table></figure><h4 id="创建表，关联外键"><a href="#创建表，关联外键" class="headerlink" title="创建表，关联外键"></a>创建表，关联外键</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 创建 班级表</span><br><span class="line">create table if not exists class(</span><br><span class="line">id int(11) not null auto_increment,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">primary key (id)</span><br><span class="line">) ENGINE=InnoDB default charset=utf8;</span><br><span class="line"></span><br><span class="line">// 创建学生表，外键 班级id class_id，级联删除及更新</span><br><span class="line">create table if not exists student(</span><br><span class="line">id int(11) not null auto_increment,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">class_id int(11) not null,</span><br><span class="line">primary key(id),</span><br><span class="line">index(class_id),</span><br><span class="line">foreign key (class_id) references class(id) on delete cascade on update cascade</span><br><span class="line">) ENGINE=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><h4 id="插入数据操作"><a href="#插入数据操作" class="headerlink" title="插入数据操作"></a>插入数据操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//插入数据</span><br><span class="line">insert into class(name) values(&apos;one&apos;), (&apos;two&apos;), (&apos;three&apos;);</span><br><span class="line">// 生成 id 1,2,3</span><br><span class="line"></span><br><span class="line">insert into student(class_id,name) values(1, &apos;lili&apos;);</span><br><span class="line">insert into student(class_id,name) values(2, &apos;lili&apos;);</span><br><span class="line">insert into student(class_id,name) values(2, &apos;lili&apos;);</span><br><span class="line">insert into student(class_id,name) values(3, &apos;lili&apos;);</span><br><span class="line"></span><br><span class="line">// 插入失败，因为班级表中没有id =10的数据</span><br><span class="line">insert into student(class_id,name) values(10, &apos;lili&apos;);</span><br></pre></td></tr></table></figure><h4 id="更新数据操作"><a href="#更新数据操作" class="headerlink" title="更新数据操作"></a>更新数据操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//更新数据</span><br><span class="line">update class set id=5 where id=2;</span><br><span class="line">//此时 学生表中 sid=2的数据同步更新为了5</span><br></pre></td></tr></table></figure><h4 id="删除数据操作"><a href="#删除数据操作" class="headerlink" title="删除数据操作"></a>删除数据操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//删除数据</span><br><span class="line">delete from class where id=1;</span><br><span class="line">//此时 学生表中 sid=1的数据同步删除了</span><br></pre></td></tr></table></figure><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><blockquote><p>一个表中有且只有一个主键</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 单字段主键</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null</span><br><span class="line">) engine=InnoDB default charset=utf8;</span><br><span class="line"></span><br><span class="line">// 复合字段主键</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">primary key(id, name)</span><br><span class="line">) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><h3 id="候选键"><a href="#候选键" class="headerlink" title="候选键"></a>候选键</h3><blockquote><p>一个表中可以存在多个候选键<br>UNIQUE 来表示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment UNIQUE,</span><br><span class="line">name varchar(30) not null UNIQUE,</span><br><span class="line">) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><h3 id="字段条件约束"><a href="#字段条件约束" class="headerlink" title="字段条件约束"></a>字段条件约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// null</span><br><span class="line">id int(11) not null,</span><br><span class="line">sid int(11) null</span><br><span class="line"></span><br><span class="line">// check对列约束</span><br><span class="line">age int(2) not null check(age&gt;6 and age&lt;18)</span><br><span class="line"></span><br><span class="line">// check对表约束</span><br><span class="line">primary key(id),</span><br><span class="line">check(class_id in (select id from tb_class))</span><br></pre></td></tr></table></figure><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候使用</span><br><span class="line">constraint &lt;symbol&gt;</span><br><span class="line">[primary ... | foreign ... | check ...]</span><br><span class="line"></span><br><span class="line">// 更新表的完整性约束</span><br><span class="line">alter table table_name add constraint primary</span><br><span class="line">primary key(id)</span><br><span class="line"></span><br><span class="line">// 删除表的完整性约束</span><br><span class="line">alter table table_name drop [foreign key|index] &lt;symbol&gt; [primary key]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;外键约束&quot;&gt;&lt;a href=&quot;#外键约束&quot; class=&quot;headerlink&quot; title=&quot;外键约束&quot;&gt;&lt;/a&gt;外键约束&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;目前mysql只有InnoDB存储引擎支持外键约束&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;column_nam
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之索引</title>
    <link href="https://zhipenwang.github.io/2018/07/15/mysql_index/"/>
    <id>https://zhipenwang.github.io/2018/07/15/mysql_index/</id>
    <published>2018-07-15T11:21:01.000Z</published>
    <updated>2019-04-09T14:57:32.975Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>索引的两种存储类型：B树(BTree)索引、哈希(Hash)索引<br>BTree为系统默认索引</p></blockquote><h3 id="创建表时建立索引"><a href="#创建表时建立索引" class="headerlink" title="创建表时建立索引"></a>创建表时建立索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table (</span><br><span class="line">属性名 长度 是否为空,</span><br><span class="line">[UNIQUE | FULLTEXT | SPATIAL ]  INDEX|KEY [别名]( 属性名1 [(长度)] [ASC | DESC])</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="已建立的表中创建索引"><a href="#已建立的表中创建索引" class="headerlink" title="已建立的表中创建索引"></a>已建立的表中创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])</span><br></pre></td></tr></table></figure><h3 id="修改表结构添加索引"><a href="#修改表结构添加索引" class="headerlink" title="修改表结构添加索引"></a>修改表结构添加索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name add [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop INDEX 属性名 on table_name</span><br></pre></td></tr></table></figure><blockquote><ol><li>[]是可选项  </li><li>[UNIQUE | FULLTEXT | SPATIAL ] 可选项，分别代表唯一性索引、全文索引、空间索引</li><li>INDEX和KEY参数其中一个即可，用于指定字段索引</li><li>别名为可选项，创建的索引取新名称<br> 别名的参数如下：<br> 属性名1 必选项，指索引对应的字段名称，该字段必须预选被定义到表中<br> 长度    可选项，索引的长度，必须是字符串类型才可以使用<br> ASC/DESC可选项，ASC表示升序排列，DESC表示降序排列  </li><li>table_name 表名称</li></ol></blockquote><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><blockquote><p>在任何数据类型的字段中创建索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建了索引列 id</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">index(id)</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create index info on table_test (id)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add index info (id)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="唯一性索引"><a href="#唯一性索引" class="headerlink" title="唯一性索引"></a>唯一性索引</h3><blockquote><p>使用UNIQUE参数设置唯一索引，该索引的值必须唯一<br>主键是一种特殊的唯一索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建唯一索引 别名为 name 索引字段为 id，索引存储排序为 asc</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">UNIQUE INDEX name (id asc)</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create UNIQUE INDEX name on table_test (id asc)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add UNIQUE INDEX name (id asc)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><blockquote><p>使用FULLTEXT参数设置全文索引<br>只有myisam存储引擎的数据表支持fulltext全文索引<br>只能创建在数据类型为 char、varchar、text的字段上<br>默认情况下，应用全文索引大小写不敏感，索引的列使用二进制排序后，可以执行大小写敏感的全文索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建全文索引 别名为 name_info 索引字段为 name</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">FULLTEXT KEY name_info (name)</span><br><span class="line">) engine=MyISAM;</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create FULLTEXT INDEX name_info on table_test (name)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add FULLTEXT INDEX name_info (name)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h3><blockquote><p>只对应一个字段的索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建单列索引 别名为 name_info 索引字段为 name，索引字段长度为20</span><br><span class="line">// 数据表中的字段长度为30，而创建的索引的字段长度为20，这样做的目的是为了提高查询效率，优化查询速度</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">INDEX name_info (name(20))</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create INDEX name_info on table_test (name(20))</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add INDEX name_info (name(20))</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h3><blockquote><p>表的多个字段上创建索引<br>应用此索引，必须使用这些字段的第一个字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建多列索引 别名为 info 索引字段为 name、sex</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">sex bit(1) not null,</span><br><span class="line">INDEX info (name,sex)</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create INDEX info on table_test (name,sex)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add INDEX info (name,sex)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h3><blockquote><p>使用SPATIAL参数可以设置空间索引<br>只能建立在数据类型为空间类型的字段上<br>mysql只有MyISAM存储引擎支持空间检索，且索引的字段不能为空值<br>空间类型：geometry、point、linestring、polygon</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建空间索引 别名为 good_info 索引字段为 good</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">good geometry not null,</span><br><span class="line">SPATIAL INDEX good_info (good)</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create SPATIAL INDEX good_info on table_test (good)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add SPATIAL INDEX good_info (good)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;索引的两种存储类型：B树(BTree)索引、哈希(Hash)索引&lt;br&gt;BTree为系统默认索引&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;创建表时建立索引&quot;&gt;&lt;a href=&quot;#创建表时建立索引&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之流程控制语句</title>
    <link href="https://zhipenwang.github.io/2018/07/07/mysql_condition/"/>
    <id>https://zhipenwang.github.io/2018/07/07/mysql_condition/</id>
    <published>2018-07-07T12:21:01.000Z</published>
    <updated>2019-04-09T14:57:32.974Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>if、case、loop、while、iterate、leave</p></blockquote><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><blockquote><p>注意 分号不能省略</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF CONDITION THEN</span><br><span class="line">...;</span><br><span class="line">ELSEIF CONDITION THEN</span><br><span class="line">...;</span><br><span class="line">ELSE</span><br><span class="line">...;</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">调用：call do_if(10)</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_if(in x int)</span><br><span class="line">BEGIN</span><br><span class="line">IF x IS NULL THEN</span><br><span class="line">select 100;</span><br><span class="line">ELSEIF x=0 THEN</span><br><span class="line">select 101;</span><br><span class="line">ELSE</span><br><span class="line">select 102;</span><br><span class="line">END IF;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><blockquote><p>注意 分号不能省略</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CASE value</span><br><span class="line">WHEN value THEN ...;</span><br><span class="line">WHEN value THEN ...;</span><br><span class="line">ELSE ...;</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">调用：call do_case(10)</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_case(in x int)</span><br><span class="line">BEGIN</span><br><span class="line">CASE x</span><br><span class="line">WHEN x IS NULL THEN SELECT 100;</span><br><span class="line">WHEN x = 0 THEN SELECT 101;</span><br><span class="line">ELSE SELECT 102;</span><br><span class="line">END CASE;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><blockquote><p>注意 分号不能省略</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE CONDITION DO</span><br><span class="line">...;</span><br><span class="line">END WHILE;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">调用：</span><br><span class="line">call do_while(@sum)</span><br><span class="line">select @sum</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_while(out x int)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i int DEFAULT 1;</span><br><span class="line">DECLARE j int DEFAULT 0;</span><br><span class="line">WHILE i&lt;100 DO</span><br><span class="line">set j=j+i;</span><br><span class="line">set i=i+1;</span><br><span class="line">END WHILE;</span><br><span class="line">SET x=j;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><blockquote><p>注意 分号不能省略<br>LEAVE loop_label 退出 定义名称为loop_label的loop退出循环</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOOP</span><br><span class="line">...</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">调用：</span><br><span class="line">call do_loop(@sum)</span><br><span class="line">select @sum</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_loop(out x int)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i int DEFAULT 1;</span><br><span class="line">DECLARE j int DEFAULT 0;</span><br><span class="line">loop_label:LOOP</span><br><span class="line">set j=j+i;</span><br><span class="line">set i=i+1;</span><br><span class="line">IF i&gt;10 THEN</span><br><span class="line">LEAVE loop_label;</span><br><span class="line">END IF;</span><br><span class="line">END LOOP;</span><br><span class="line">set x=j;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><blockquote><p>注意 分号不能省略  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line">...</span><br><span class="line">UNTIL CONDITION</span><br><span class="line">END REPEAT;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">调用：</span><br><span class="line">call do_repeat(@sum)</span><br><span class="line">select @sum</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_repeat(out x int)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i int DEFAULT 1;</span><br><span class="line">DECLARE j int DEFAULT 0;</span><br><span class="line">REPEAT</span><br><span class="line">set j=j+i;</span><br><span class="line">set i=i+1;</span><br><span class="line">UNTIL i&gt;10</span><br><span class="line">END REPEAT;</span><br><span class="line">set x=j;</span><br><span class="line">END</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;if、case、loop、while、iterate、leave&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h3&gt;&lt;block
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之运算符操作</title>
    <link href="https://zhipenwang.github.io/2018/07/07/mysql_calculate/"/>
    <id>https://zhipenwang.github.io/2018/07/07/mysql_calculate/</id>
    <published>2018-07-07T11:21:01.000Z</published>
    <updated>2019-04-09T14:57:32.973Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">num int(11) null</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote><p>加(+)、减(-)、乘(*)、除(/)、余(%)、除(div)、余(mod)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select id, num, id+num, id-num, id*num, id/num, id%num, id div num, id mod num from test;</span><br><span class="line">结果：</span><br><span class="line">id num id+num id-num id*num id/num id%num id div num id mod num</span><br><span class="line">5  2   8  3      10     2.5    1      21</span><br><span class="line">6   nullnullnullnullnullnullnullnull</span><br><span class="line">null 5nullnullnullnullnullnullnull</span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><blockquote><p>大于(&gt;)、小于(&lt;)、等于(=)、不等于(!=或&lt;&gt;)、大于等于(&gt;=)、小于等于(&lt;=)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 符合条件的结果为1</span><br><span class="line">2. 不符合条件的结果为0</span><br><span class="line">3. 值为NULL的结果为null</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">&gt;是null(IS NULL)、不是null(IS NOT NULL)</span><br></pre></td></tr></table></figure><p>判断是否为空值可以采用 &lt;=&gt; 进行判断，a&lt;=&gt;0，值为0的结果为1，其他都为0；a&lt;=&gt;null，值为null的结果为1，其他都为0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;包含(between a and b)  </span><br><span class="line">&gt;包含(id IN (1,2,3))、不包含(id not in(1,2,3))  </span><br><span class="line">&gt;模式匹配(name like &apos;%keyword%&apos;)、模式不匹配(name not like &apos;%keyword%&apos;)</span><br></pre></td></tr></table></figure></p><ol><li>like ‘abc’  表示字符串=abc的匹配</li><li>like ‘%abc’ 表示以abc结尾的字符串匹配</li><li>like ‘abc%’ 表示以abc开头的字符串匹配</li><li>like ‘%abc%’表示包含abc的字符串匹配</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;正则匹配(a regexp &apos;^a&apos;)</span><br></pre></td></tr></table></figure><ol><li>a regexp ‘^abc’ 表示以abc开头的字符串匹配</li><li>a regexp ‘abc’  表示包含abc的字符串匹配</li><li><p>a regexp ‘abc$’ 表示以abc结尾的字符串匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 逻辑运算符</span><br><span class="line">&gt;与(&amp;&amp;或AND)、或(||或OR)、非(!或NOT)、异或(XOR)</span><br></pre></td></tr></table></figure></li><li><p>&amp;&amp;  只要有一个值为0，结果为0；有值为null，其他都不为0，结果为null；值都不为null与0的结果为1；</p></li><li>||  值都为0结果为0；值为0或者null结果为null；值存在不为0或者null的结果为1；</li><li>!   值为null结果为null；值为0的结果为1；值为非0或null的结果为1；</li><li><p>XOR 值存在null的结果为null；值都是非0或者都是0的结果为0；值存在0跟非0的结果为1；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 位运算符</span><br><span class="line">&gt;按位与(&amp;)、按位或(|)、按位取反(~)、按位异或(^)、按位左移(&lt;&lt;)、按位右移(&gt;&gt;)</span><br></pre></td></tr></table></figure></li><li><p>&amp;    将十进制数转换为二进制数，每个二进制数对应的位上进行与运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010&amp;0101 =&gt; 0000 =&gt; 0<br> 例：10&amp;6 =&gt; 1010&amp;0110 =&gt; 0010 =&gt; 2</p></li><li>|    将十进制数转换为二进制数，每个二进制数对应的位上进行或运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010|0101 =&gt; 1111 =&gt; 15<br> 例：10&amp;6 =&gt; 1010|0110 =&gt; 1110 =&gt; 14</li><li>~    将十进制数转换为二进制数，每位都进行取反运算<br> 例：10 =&gt; 1010 =&gt; 0101 =&gt; 18446744073709551605(字节计算结果)</li><li>^    将十进制数转换为二进制数，每个二进制数对应的位上进行异或运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010^0101 =&gt; 1111 =&gt; 15<br> 例：10&amp;6 =&gt; 1010^0110 =&gt; 1100 =&gt; 12</li><li>&lt;&lt;    m &lt;&lt; n 将十进制数m转换为二进制数，按位左移n位，右边补上n个0，最后转换为十进制数<br> 例：10 &lt;&lt; 1 =&gt; 1010 =&gt; 10100 =&gt; 20</li><li><blockquote><blockquote><p>   m &gt;&gt; n 将十进制数m转换为二进制数，按位右移n位，左边补上n个0，最后转换为十进制数<br> 例：10 &gt;&gt; 1 =&gt; 1010 =&gt; 0101 =&gt; 5<br><code>`</code></p></blockquote></blockquote></li></ol><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="https://wenku.baidu.com/content/216d3e2926284b73f242336c1eb91a37f11132c9?m=26e2fd787393eaa2973d6c1f478627b5&amp;type=pic&amp;src=04452f9619b2848d6d760be569e87603.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之操作数据（增删改查）</title>
    <link href="https://zhipenwang.github.io/2018/07/07/mysql_dba/"/>
    <id>https://zhipenwang.github.io/2018/07/07/mysql_dba/</id>
    <published>2018-07-07T10:21:01.000Z</published>
    <updated>2019-04-09T14:57:32.975Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据表结构"><a href="#数据表结构" class="headerlink" title="数据表结构"></a>数据表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$sql = `</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">sex tinyint(1) null</span><br><span class="line">)</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// insert value 插入</span><br><span class="line">$sql = &quot;insert into table_test values(1, &apos;name1&apos;, 1)&quot;;</span><br><span class="line">// 插入部分字段</span><br><span class="line">$sql = &quot;insert into table_test (name,sex) values(&apos;name2&apos;, 2)&quot;;</span><br><span class="line">// 插入多条语句</span><br><span class="line">$sql = &quot;insert into table_test (name,sex) values(&apos;name1&apos;, 1), (&apos;name2&apos;, 2)&quot;;</span><br><span class="line">// insert set 插入</span><br><span class="line">$sql = &quot;insert into table_test set name=&apos;name1&apos;,sex=1&quot;;</span><br><span class="line">// insert select插入</span><br><span class="line">$sql = &quot;insert into table_test (name,sex) select name,sex from table_test where id=1&quot;;</span><br></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// update set修改</span><br><span class="line">$sql = &quot;update table_test set name=&apos;name2&apos; where id=1&quot;;</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// delete where删除</span><br><span class="line">$sql = &quot;delete from table_test where id=1&quot;;</span><br><span class="line">// truncate table删除表所有行数据,且auto_increment 重新计数</span><br><span class="line">$sql = &quot;truncate table table_test&quot;;</span><br></pre></td></tr></table></figure><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><blockquote><p>条件顺序如下： group by … having … order by … limit …</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 普通查询</span><br><span class="line">$sql = &quot;select * from table_test&quot;;</span><br><span class="line">// in 查询</span><br><span class="line">$sql = &quot;select * from table_test where name in (&apos;name1&apos;, &apos;name2&apos;)&quot;;</span><br><span class="line">// distinct 查询某个字段去重(多字段表示多字段合并的去重 distinct name,sex)</span><br><span class="line">$sql = &quot;select distinct name from table_test&quot;;</span><br><span class="line">// group_concat(field1) group by field2(按field2分组后，field1的值用，隔开)</span><br><span class="line">$sql = &quot;select group_concat(money),order_id from table_test group by order_id&quot;;</span><br></pre></td></tr></table></figure><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><blockquote><p>count(*) 查询结果总数集<br>sum(field) 计算字段求和总值<br>avg(field) 计算字段平均值<br>max(field) 计算字段最大值<br>min(field) 计算字段最小值</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据表结构&quot;&gt;&lt;a href=&quot;#数据表结构&quot; class=&quot;headerlink&quot; title=&quot;数据表结构&quot;&gt;&lt;/a&gt;数据表结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
</feed>
