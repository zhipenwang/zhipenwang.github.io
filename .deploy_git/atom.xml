<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王志鹏</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhipenwang.github.io/"/>
  <updated>2019-04-09T14:26:39.626Z</updated>
  <id>https://zhipenwang.github.io/</id>
  
  <author>
    <name>王志鹏</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MYSQL之数据表级联操作-数据完整性约束</title>
    <link href="https://zhipenwang.github.io/2018/07/15/mysql_key/"/>
    <id>https://zhipenwang.github.io/2018/07/15/mysql_key/</id>
    <published>2018-07-15T12:21:01.000Z</published>
    <updated>2019-04-09T14:26:39.626Z</updated>
    
    <content type="html"><![CDATA[<h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><blockquote><p>目前mysql只有InnoDB存储引擎支持外键约束</p><ol><li>column_name 当前表外键字段名</li><li>table_name 外键表</li><li>index_column_name 外键所在外键表中字段名</li><li>ON DELETE 删除  ON UPDATE 更新</li><li>reference_option语法格式为：（没设置时候，默认两个都指定 RESTRICT）<br> 当删除或更新外键所在外键表的数据时候<br> RESTRICT      限制策略，系统不删除或更新外键当前表的数据<br> CASCADE          级联策略，自动删除或更新外键当前表的数据<br> SET FULL       置空策略，设置外键当前表的数据外键列数据为NULL，需要提前设置外键列未被限制 NOT NULL<br> NO ACTION       不采取实施策略，系统不删除或更新外键当前表的数据，与 RESTRICT 一致</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">FOREIGN KEY ( column_name [(length)] [ASC | DESC] ) </span><br><span class="line">REFERENCES table_name(index_column_name)</span><br><span class="line">[MATCH FULL | MATCH PARTIAL | MATCH SIMPLE]</span><br><span class="line">[ON DELETE reference_option]</span><br><span class="line">[ON UPDATE reference_option]</span><br></pre></td></tr></table></figure><h4 id="创建表，关联外键"><a href="#创建表，关联外键" class="headerlink" title="创建表，关联外键"></a>创建表，关联外键</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 创建 班级表</span><br><span class="line">create table if not exists class(</span><br><span class="line">id int(11) not null auto_increment,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">primary key (id)</span><br><span class="line">) ENGINE=InnoDB default charset=utf8;</span><br><span class="line"></span><br><span class="line">// 创建学生表，外键 班级id class_id，级联删除及更新</span><br><span class="line">create table if not exists student(</span><br><span class="line">id int(11) not null auto_increment,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">class_id int(11) not null,</span><br><span class="line">primary key(id),</span><br><span class="line">index(class_id),</span><br><span class="line">foreign key (class_id) references class(id) on delete cascade on update cascade</span><br><span class="line">) ENGINE=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><h4 id="插入数据操作"><a href="#插入数据操作" class="headerlink" title="插入数据操作"></a>插入数据操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//插入数据</span><br><span class="line">insert into class(name) values(&apos;one&apos;), (&apos;two&apos;), (&apos;three&apos;);</span><br><span class="line">// 生成 id 1,2,3</span><br><span class="line"></span><br><span class="line">insert into student(class_id,name) values(1, &apos;lili&apos;);</span><br><span class="line">insert into student(class_id,name) values(2, &apos;lili&apos;);</span><br><span class="line">insert into student(class_id,name) values(2, &apos;lili&apos;);</span><br><span class="line">insert into student(class_id,name) values(3, &apos;lili&apos;);</span><br><span class="line"></span><br><span class="line">// 插入失败，因为班级表中没有id =10的数据</span><br><span class="line">insert into student(class_id,name) values(10, &apos;lili&apos;);</span><br></pre></td></tr></table></figure><h4 id="更新数据操作"><a href="#更新数据操作" class="headerlink" title="更新数据操作"></a>更新数据操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//更新数据</span><br><span class="line">update class set id=5 where id=2;</span><br><span class="line">//此时 学生表中 sid=2的数据同步更新为了5</span><br></pre></td></tr></table></figure><h4 id="删除数据操作"><a href="#删除数据操作" class="headerlink" title="删除数据操作"></a>删除数据操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//删除数据</span><br><span class="line">delete from class where id=1;</span><br><span class="line">//此时 学生表中 sid=1的数据同步删除了</span><br></pre></td></tr></table></figure><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><blockquote><p>一个表中有且只有一个主键</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 单字段主键</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null</span><br><span class="line">) engine=InnoDB default charset=utf8;</span><br><span class="line"></span><br><span class="line">// 复合字段主键</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">primary key(id, name)</span><br><span class="line">) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><h3 id="候选键"><a href="#候选键" class="headerlink" title="候选键"></a>候选键</h3><blockquote><p>一个表中可以存在多个候选键<br>UNIQUE 来表示</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment UNIQUE,</span><br><span class="line">name varchar(30) not null UNIQUE,</span><br><span class="line">) engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><h3 id="字段条件约束"><a href="#字段条件约束" class="headerlink" title="字段条件约束"></a>字段条件约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// null</span><br><span class="line">id int(11) not null,</span><br><span class="line">sid int(11) null</span><br><span class="line"></span><br><span class="line">// check对列约束</span><br><span class="line">age int(2) not null check(age&gt;6 and age&lt;18)</span><br><span class="line"></span><br><span class="line">// check对表约束</span><br><span class="line">primary key(id),</span><br><span class="line">check(class_id in (select id from tb_class))</span><br></pre></td></tr></table></figure><h3 id="完整性约束"><a href="#完整性约束" class="headerlink" title="完整性约束"></a>完整性约束</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候使用</span><br><span class="line">constraint &lt;symbol&gt;</span><br><span class="line">[primary ... | foreign ... | check ...]</span><br><span class="line"></span><br><span class="line">// 更新表的完整性约束</span><br><span class="line">alter table table_name add constraint primary</span><br><span class="line">primary key(id)</span><br><span class="line"></span><br><span class="line">// 删除表的完整性约束</span><br><span class="line">alter table table_name drop [foreign key|index] &lt;symbol&gt; [primary key]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;外键约束&quot;&gt;&lt;a href=&quot;#外键约束&quot; class=&quot;headerlink&quot; title=&quot;外键约束&quot;&gt;&lt;/a&gt;外键约束&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;目前mysql只有InnoDB存储引擎支持外键约束&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;column_nam
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之索引</title>
    <link href="https://zhipenwang.github.io/2018/07/15/mysql_index/"/>
    <id>https://zhipenwang.github.io/2018/07/15/mysql_index/</id>
    <published>2018-07-15T11:21:01.000Z</published>
    <updated>2019-04-09T14:27:55.236Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>索引的两种存储类型：B树(BTree)索引、哈希(Hash)索引<br>BTree为系统默认索引</p></blockquote><h3 id="创建表时建立索引"><a href="#创建表时建立索引" class="headerlink" title="创建表时建立索引"></a>创建表时建立索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table (</span><br><span class="line">属性名 长度 是否为空,</span><br><span class="line">[UNIQUE | FULLTEXT | SPATIAL ]  INDEX|KEY [别名]( 属性名1 [(长度)] [ASC | DESC])</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="已建立的表中创建索引"><a href="#已建立的表中创建索引" class="headerlink" title="已建立的表中创建索引"></a>已建立的表中创建索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])</span><br></pre></td></tr></table></figure><h3 id="修改表结构添加索引"><a href="#修改表结构添加索引" class="headerlink" title="修改表结构添加索引"></a>修改表结构添加索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table table_name add [UNIQUE | FULLTEXT | SPATIAL ]  INDEX [别名] on table_name( 属性名1 [(长度)] [ASC | DESC])</span><br></pre></td></tr></table></figure><h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop INDEX 属性名 on table_name</span><br></pre></td></tr></table></figure><blockquote><ol><li>[]是可选项  </li><li>[UNIQUE | FULLTEXT | SPATIAL ] 可选项，分别代表唯一性索引、全文索引、空间索引</li><li>INDEX和KEY参数其中一个即可，用于指定字段索引</li><li>别名为可选项，创建的索引取新名称<br> 别名的参数如下：<br> 属性名1 必选项，指索引对应的字段名称，该字段必须预选被定义到表中<br> 长度    可选项，索引的长度，必须是字符串类型才可以使用<br> ASC/DESC可选项，ASC表示升序排列，DESC表示降序排列  </li><li>table_name 表名称</li></ol></blockquote><h3 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h3><blockquote><p>在任何数据类型的字段中创建索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建了索引列 id</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">index(id)</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create index info on table_test (id)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add index info (id)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="唯一性索引"><a href="#唯一性索引" class="headerlink" title="唯一性索引"></a>唯一性索引</h3><blockquote><p>使用UNIQUE参数设置唯一索引，该索引的值必须唯一<br>主键是一种特殊的唯一索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建唯一索引 别名为 name 索引字段为 id，索引存储排序为 asc</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">UNIQUE INDEX name (id asc)</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create UNIQUE INDEX name on table_test (id asc)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add UNIQUE INDEX name (id asc)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h3><blockquote><p>使用FULLTEXT参数设置全文索引<br>只有myisam存储引擎的数据表支持fulltext全文索引<br>只能创建在数据类型为 char、varchar、text的字段上<br>默认情况下，应用全文索引大小写不敏感，索引的列使用二进制排序后，可以执行大小写敏感的全文索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建全文索引 别名为 name_info 索引字段为 name</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">FULLTEXT KEY name_info (name)</span><br><span class="line">) engine=MyISAM;</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create FULLTEXT INDEX name_info on table_test (name)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add FULLTEXT INDEX name_info (name)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="单列索引"><a href="#单列索引" class="headerlink" title="单列索引"></a>单列索引</h3><blockquote><p>只对应一个字段的索引</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建单列索引 别名为 name_info 索引字段为 name，索引字段长度为20</span><br><span class="line">// 数据表中的字段长度为30，而创建的索引的字段长度为20，这样做的目的是为了提高查询效率，优化查询速度</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">INDEX name_info (name(20))</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create INDEX name_info on table_test (name(20))</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add INDEX name_info (name(20))</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="多列索引"><a href="#多列索引" class="headerlink" title="多列索引"></a>多列索引</h3><blockquote><p>表的多个字段上创建索引<br>应用此索引，必须使用这些字段的第一个字段</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建多列索引 别名为 info 索引字段为 name、sex</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">sex bit(1) not null,</span><br><span class="line">INDEX info (name,sex)</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create INDEX info on table_test (name,sex)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add INDEX info (name,sex)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure><h3 id="空间索引"><a href="#空间索引" class="headerlink" title="空间索引"></a>空间索引</h3><blockquote><p>使用SPATIAL参数可以设置空间索引<br>只能建立在数据类型为空间类型的字段上<br>mysql只有MyISAM存储引擎支持空间检索，且索引的字段不能为空值<br>空间类型：geometry、point、linestring、polygon</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 创建表的时候创建索引</span><br><span class="line">// 创建空间索引 别名为 good_info 索引字段为 good</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">good geometry not null,</span><br><span class="line">SPATIAL INDEX good_info (good)</span><br><span class="line">);</span><br><span class="line">// 已存在表中创建索引</span><br><span class="line">create SPATIAL INDEX good_info on table_test (good)</span><br><span class="line">// 修改表结构添加索引</span><br><span class="line">alter table table_test add SPATIAL INDEX good_info (good)</span><br><span class="line">// 查看表结构</span><br><span class="line">show create table table_test;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;索引的两种存储类型：B树(BTree)索引、哈希(Hash)索引&lt;br&gt;BTree为系统默认索引&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;创建表时建立索引&quot;&gt;&lt;a href=&quot;#创建表时建立索引&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之流程控制语句</title>
    <link href="https://zhipenwang.github.io/2018/07/07/mysql_condition/"/>
    <id>https://zhipenwang.github.io/2018/07/07/mysql_condition/</id>
    <published>2018-07-07T12:21:01.000Z</published>
    <updated>2019-04-09T14:28:30.770Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>if、case、loop、while、iterate、leave</p></blockquote><h3 id="if"><a href="#if" class="headerlink" title="if"></a>if</h3><blockquote><p>注意 分号不能省略</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">IF CONDITION THEN</span><br><span class="line">...;</span><br><span class="line">ELSEIF CONDITION THEN</span><br><span class="line">...;</span><br><span class="line">ELSE</span><br><span class="line">...;</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">调用：call do_if(10)</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_if(in x int)</span><br><span class="line">BEGIN</span><br><span class="line">IF x IS NULL THEN</span><br><span class="line">select 100;</span><br><span class="line">ELSEIF x=0 THEN</span><br><span class="line">select 101;</span><br><span class="line">ELSE</span><br><span class="line">select 102;</span><br><span class="line">END IF;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="case"><a href="#case" class="headerlink" title="case"></a>case</h3><blockquote><p>注意 分号不能省略</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CASE value</span><br><span class="line">WHEN value THEN ...;</span><br><span class="line">WHEN value THEN ...;</span><br><span class="line">ELSE ...;</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">调用：call do_case(10)</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_case(in x int)</span><br><span class="line">BEGIN</span><br><span class="line">CASE x</span><br><span class="line">WHEN x IS NULL THEN SELECT 100;</span><br><span class="line">WHEN x = 0 THEN SELECT 101;</span><br><span class="line">ELSE SELECT 102;</span><br><span class="line">END CASE;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><blockquote><p>注意 分号不能省略</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE CONDITION DO</span><br><span class="line">...;</span><br><span class="line">END WHILE;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">调用：</span><br><span class="line">call do_while(@sum)</span><br><span class="line">select @sum</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_while(out x int)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i int DEFAULT 1;</span><br><span class="line">DECLARE j int DEFAULT 0;</span><br><span class="line">WHILE i&lt;100 DO</span><br><span class="line">set j=j+i;</span><br><span class="line">set i=i+1;</span><br><span class="line">END WHILE;</span><br><span class="line">SET x=j;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><blockquote><p>注意 分号不能省略<br>LEAVE loop_label 退出 定义名称为loop_label的loop退出循环</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LOOP</span><br><span class="line">...</span><br><span class="line">END LOOP;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">调用：</span><br><span class="line">call do_loop(@sum)</span><br><span class="line">select @sum</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_loop(out x int)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i int DEFAULT 1;</span><br><span class="line">DECLARE j int DEFAULT 0;</span><br><span class="line">loop_label:LOOP</span><br><span class="line">set j=j+i;</span><br><span class="line">set i=i+1;</span><br><span class="line">IF i&gt;10 THEN</span><br><span class="line">LEAVE loop_label;</span><br><span class="line">END IF;</span><br><span class="line">END LOOP;</span><br><span class="line">set x=j;</span><br><span class="line">END</span><br></pre></td></tr></table></figure><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><blockquote><p>注意 分号不能省略  </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">REPEAT</span><br><span class="line">...</span><br><span class="line">UNTIL CONDITION</span><br><span class="line">END REPEAT;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">调用：</span><br><span class="line">call do_repeat(@sum)</span><br><span class="line">select @sum</span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE do_repeat(out x int)</span><br><span class="line">BEGIN</span><br><span class="line">DECLARE i int DEFAULT 1;</span><br><span class="line">DECLARE j int DEFAULT 0;</span><br><span class="line">REPEAT</span><br><span class="line">set j=j+i;</span><br><span class="line">set i=i+1;</span><br><span class="line">UNTIL i&gt;10</span><br><span class="line">END REPEAT;</span><br><span class="line">set x=j;</span><br><span class="line">END</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;if、case、loop、while、iterate、leave&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;if&quot;&gt;&lt;a href=&quot;#if&quot; class=&quot;headerlink&quot; title=&quot;if&quot;&gt;&lt;/a&gt;if&lt;/h3&gt;&lt;block
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之运算符操作</title>
    <link href="https://zhipenwang.github.io/2018/07/07/mysql_calculate/"/>
    <id>https://zhipenwang.github.io/2018/07/07/mysql_calculate/</id>
    <published>2018-07-07T11:21:01.000Z</published>
    <updated>2019-04-09T14:29:00.189Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">num int(11) null</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><blockquote><p>加(+)、减(-)、乘(*)、除(/)、余(%)、除(div)、余(mod)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select id, num, id+num, id-num, id*num, id/num, id%num, id div num, id mod num from test;</span><br><span class="line">结果：</span><br><span class="line">id num id+num id-num id*num id/num id%num id div num id mod num</span><br><span class="line">5  2   8  3      10     2.5    1      21</span><br><span class="line">6   nullnullnullnullnullnullnullnull</span><br><span class="line">null 5nullnullnullnullnullnullnull</span><br></pre></td></tr></table></figure><h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><blockquote><p>大于(&gt;)、小于(&lt;)、等于(=)、不等于(!=或&lt;&gt;)、大于等于(&gt;=)、小于等于(&lt;=)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1. 符合条件的结果为1</span><br><span class="line">2. 不符合条件的结果为0</span><br><span class="line">3. 值为NULL的结果为null</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line">&gt;是null(IS NULL)、不是null(IS NOT NULL)</span><br></pre></td></tr></table></figure><p>判断是否为空值可以采用 &lt;=&gt; 进行判断，a&lt;=&gt;0，值为0的结果为1，其他都为0；a&lt;=&gt;null，值为null的结果为1，其他都为0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;包含(between a and b)  </span><br><span class="line">&gt;包含(id IN (1,2,3))、不包含(id not in(1,2,3))  </span><br><span class="line">&gt;模式匹配(name like &apos;%keyword%&apos;)、模式不匹配(name not like &apos;%keyword%&apos;)</span><br></pre></td></tr></table></figure></p><ol><li>like ‘abc’  表示字符串=abc的匹配</li><li>like ‘%abc’ 表示以abc结尾的字符串匹配</li><li>like ‘abc%’ 表示以abc开头的字符串匹配</li><li>like ‘%abc%’表示包含abc的字符串匹配</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&gt;正则匹配(a regexp &apos;^a&apos;)</span><br></pre></td></tr></table></figure><ol><li>a regexp ‘^abc’ 表示以abc开头的字符串匹配</li><li>a regexp ‘abc’  表示包含abc的字符串匹配</li><li><p>a regexp ‘abc$’ 表示以abc结尾的字符串匹配</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 逻辑运算符</span><br><span class="line">&gt;与(&amp;&amp;或AND)、或(||或OR)、非(!或NOT)、异或(XOR)</span><br></pre></td></tr></table></figure></li><li><p>&amp;&amp;  只要有一个值为0，结果为0；有值为null，其他都不为0，结果为null；值都不为null与0的结果为1；</p></li><li>||  值都为0结果为0；值为0或者null结果为null；值存在不为0或者null的结果为1；</li><li>!   值为null结果为null；值为0的结果为1；值为非0或null的结果为1；</li><li><p>XOR 值存在null的结果为null；值都是非0或者都是0的结果为0；值存在0跟非0的结果为1；</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">### 位运算符</span><br><span class="line">&gt;按位与(&amp;)、按位或(|)、按位取反(~)、按位异或(^)、按位左移(&lt;&lt;)、按位右移(&gt;&gt;)</span><br></pre></td></tr></table></figure></li><li><p>&amp;    将十进制数转换为二进制数，每个二进制数对应的位上进行与运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010&amp;0101 =&gt; 0000 =&gt; 0<br> 例：10&amp;6 =&gt; 1010&amp;0110 =&gt; 0010 =&gt; 2</p></li><li>|    将十进制数转换为二进制数，每个二进制数对应的位上进行或运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010|0101 =&gt; 1111 =&gt; 15<br> 例：10&amp;6 =&gt; 1010|0110 =&gt; 1110 =&gt; 14</li><li>~    将十进制数转换为二进制数，每位都进行取反运算<br> 例：10 =&gt; 1010 =&gt; 0101 =&gt; 18446744073709551605(字节计算结果)</li><li>^    将十进制数转换为二进制数，每个二进制数对应的位上进行异或运算，最后转换为十进制数<br> 例：10&amp;5 =&gt; 1010^0101 =&gt; 1111 =&gt; 15<br> 例：10&amp;6 =&gt; 1010^0110 =&gt; 1100 =&gt; 12</li><li>&lt;&lt;    m &lt;&lt; n 将十进制数m转换为二进制数，按位左移n位，右边补上n个0，最后转换为十进制数<br> 例：10 &lt;&lt; 1 =&gt; 1010 =&gt; 10100 =&gt; 20</li><li><blockquote><blockquote><p>   m &gt;&gt; n 将十进制数m转换为二进制数，按位右移n位，左边补上n个0，最后转换为十进制数<br> 例：10 &gt;&gt; 1 =&gt; 1010 =&gt; 0101 =&gt; 5<br><code>`</code></p></blockquote></blockquote></li></ol><h3 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h3><p><img src="https://wenku.baidu.com/content/216d3e2926284b73f242336c1eb91a37f11132c9?m=26e2fd787393eaa2973d6c1f478627b5&amp;type=pic&amp;src=04452f9619b2848d6d760be569e87603.jpg" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之操作数据（增删改查）</title>
    <link href="https://zhipenwang.github.io/2018/07/07/mysql_dba/"/>
    <id>https://zhipenwang.github.io/2018/07/07/mysql_dba/</id>
    <published>2018-07-07T10:21:01.000Z</published>
    <updated>2019-04-09T14:29:22.108Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数据表结构"><a href="#数据表结构" class="headerlink" title="数据表结构"></a>数据表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$sql = `</span><br><span class="line">create table if not exists table_test(</span><br><span class="line">id int(11) not null auto_increment primary key,</span><br><span class="line">name varchar(30) not null,</span><br><span class="line">sex tinyint(1) null</span><br><span class="line">)</span><br><span class="line">`;</span><br></pre></td></tr></table></figure><h3 id="插入操作"><a href="#插入操作" class="headerlink" title="插入操作"></a>插入操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// insert value 插入</span><br><span class="line">$sql = &quot;insert into table_test values(1, &apos;name1&apos;, 1)&quot;;</span><br><span class="line">// 插入部分字段</span><br><span class="line">$sql = &quot;insert into table_test (name,sex) values(&apos;name2&apos;, 2)&quot;;</span><br><span class="line">// 插入多条语句</span><br><span class="line">$sql = &quot;insert into table_test (name,sex) values(&apos;name1&apos;, 1), (&apos;name2&apos;, 2)&quot;;</span><br><span class="line">// insert set 插入</span><br><span class="line">$sql = &quot;insert into table_test set name=&apos;name1&apos;,sex=1&quot;;</span><br><span class="line">// insert select插入</span><br><span class="line">$sql = &quot;insert into table_test (name,sex) select name,sex from table_test where id=1&quot;;</span><br></pre></td></tr></table></figure><h3 id="修改操作"><a href="#修改操作" class="headerlink" title="修改操作"></a>修改操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// update set修改</span><br><span class="line">$sql = &quot;update table_test set name=&apos;name2&apos; where id=1&quot;;</span><br></pre></td></tr></table></figure><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// delete where删除</span><br><span class="line">$sql = &quot;delete from table_test where id=1&quot;;</span><br><span class="line">// truncate table删除表所有行数据,且auto_increment 重新计数</span><br><span class="line">$sql = &quot;truncate table table_test&quot;;</span><br></pre></td></tr></table></figure><h3 id="查询操作"><a href="#查询操作" class="headerlink" title="查询操作"></a>查询操作</h3><blockquote><p>条件顺序如下： group by … having … order by … limit …</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 普通查询</span><br><span class="line">$sql = &quot;select * from table_test&quot;;</span><br><span class="line">// in 查询</span><br><span class="line">$sql = &quot;select * from table_test where name in (&apos;name1&apos;, &apos;name2&apos;)&quot;;</span><br><span class="line">// distinct 查询某个字段去重(多字段表示多字段合并的去重 distinct name,sex)</span><br><span class="line">$sql = &quot;select distinct name from table_test&quot;;</span><br><span class="line">// group_concat(field1) group by field2(按field2分组后，field1的值用，隔开)</span><br><span class="line">$sql = &quot;select group_concat(money),order_id from table_test group by order_id&quot;;</span><br></pre></td></tr></table></figure><h3 id="聚合查询"><a href="#聚合查询" class="headerlink" title="聚合查询"></a>聚合查询</h3><blockquote><p>count(*) 查询结果总数集<br>sum(field) 计算字段求和总值<br>avg(field) 计算字段平均值<br>max(field) 计算字段最大值<br>min(field) 计算字段最小值</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数据表结构&quot;&gt;&lt;a href=&quot;#数据表结构&quot; class=&quot;headerlink&quot; title=&quot;数据表结构&quot;&gt;&lt;/a&gt;数据表结构&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>MYSQL之操作数据表</title>
    <link href="https://zhipenwang.github.io/2018/07/07/mysql_operation/"/>
    <id>https://zhipenwang.github.io/2018/07/07/mysql_operation/</id>
    <published>2018-07-07T09:21:01.000Z</published>
    <updated>2019-04-09T14:29:44.651Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>文中均使用 <code>table_test</code> 作为表名</p></blockquote><h3 id="创建数据表"><a href="#创建数据表" class="headerlink" title="创建数据表"></a>创建数据表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists table_test(</span><br><span class="line">    id int(11) auto_increment primary key,</span><br><span class="line">    name varchar(30) not null comment &apos;名称&apos;,</span><br><span class="line">    password varchar(30) not null comment &apos;密码&apos;</span><br><span class="line">) comment=&quot;表名&quot;;</span><br></pre></td></tr></table></figure><h3 id="查看表结构"><a href="#查看表结构" class="headerlink" title="查看表结构"></a>查看表结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">show columns from table_test;</span><br><span class="line">或者</span><br><span class="line">describe table_test;</span><br><span class="line">或者</span><br><span class="line">desc table_test;</span><br></pre></td></tr></table></figure><h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><h4 id="1-添加新字段及修改存在字段"><a href="#1-添加新字段及修改存在字段" class="headerlink" title="1. 添加新字段及修改存在字段"></a>1. 添加新字段及修改存在字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alter table table_test</span><br><span class="line">    add sex enum(&apos;male&apos;, &apos;female&apos;) not null default &apos;male&apos; comment &apos;性别&apos;,</span><br><span class="line">    modify name varchar(40);</span><br></pre></td></tr></table></figure><h4 id="2-修改表字段名"><a href="#2-修改表字段名" class="headerlink" title="2. 修改表字段名"></a>2. 修改表字段名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table table_test</span><br><span class="line">    change column date create_time date null default &apos;0000-00-00&apos;;</span><br></pre></td></tr></table></figure><h4 id="3-删除字段"><a href="#3-删除字段" class="headerlink" title="3. 删除字段"></a>3. 删除字段</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table table_test </span><br><span class="line">    drop create_time;</span><br></pre></td></tr></table></figure><h4 id="4-修改表名"><a href="#4-修改表名" class="headerlink" title="4. 修改表名"></a>4. 修改表名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table table_test </span><br><span class="line">    rename as table_test_new;</span><br></pre></td></tr></table></figure><h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rename table table_test_new to table_test;</span><br></pre></td></tr></table></figure><h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><h4 id="1-复制表结构"><a href="#1-复制表结构" class="headerlink" title="1. 复制表结构"></a>1. 复制表结构</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table table_test_copy1 like table_test;</span><br></pre></td></tr></table></figure><h4 id="2-复制表结构及数据"><a href="#2-复制表结构及数据" class="headerlink" title="2. 复制表结构及数据"></a>2. 复制表结构及数据</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table table_test_copy2 as select * from table_test;</span><br></pre></td></tr></table></figure><h4 id="3-复制部分表结构及数据"><a href="#3-复制部分表结构及数据" class="headerlink" title="3. 复制部分表结构及数据"></a>3. 复制部分表结构及数据</h4><blockquote><p>只复制了<code>id</code>,<code>name</code>两个字段的表结构<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create table table_test_copy3 as select id,name from table_test&apos;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop table if not exists table_test;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;文中均使用 &lt;code&gt;table_test&lt;/code&gt; 作为表名&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;创建数据表&quot;&gt;&lt;a href=&quot;#创建数据表&quot; class=&quot;headerlink&quot; title=&quot;创建数据表&quot;&gt;&lt;/a&gt;创建
      
    
    </summary>
    
      <category term="MySQL" scheme="https://zhipenwang.github.io/categories/MySQL/"/>
    
    
      <category term="数据库" scheme="https://zhipenwang.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>PHP设计模式之行为型模式（behavioral patterns）</title>
    <link href="https://zhipenwang.github.io/2018/07/01/behavioral_patterns/"/>
    <id>https://zhipenwang.github.io/2018/07/01/behavioral_patterns/</id>
    <published>2018-07-01T12:21:01.000Z</published>
    <updated>2019-04-09T14:31:42.289Z</updated>
    
    <content type="html"><![CDATA[<h3 id="责任链模式"><a href="#责任链模式" class="headerlink" title="责任链模式"></a>责任链模式</h3><blockquote><p>为请求创建了一个接收者对象的链<br>这种模式给予请求的类型，对请求的发送者和接收者进行解耦<br><strong>优点：</strong>  </p><ol><li>降低耦合度。它将请求的发送者和接收者解耦。 </li><li>简化了对象。使得对象不需要知道链的结构。 </li><li>增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。 </li><li>增加新的请求处理类很方便。</li></ol><p><strong>缺点：</strong></p><ol><li>不能保证请求一定被接收。 </li><li>系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。 </li><li>可能不容易观察运行时的特征，有碍于除错</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 责任链模式  -- responsibility pattern</span><br><span class="line"> */</span><br><span class="line">abstract class Responsibility</span><br><span class="line">&#123;</span><br><span class="line">protected $next;</span><br><span class="line">public function setNext(Responsibility $obj)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;next = $obj;</span><br><span class="line">return $this;</span><br><span class="line">&#125;</span><br><span class="line">abstract public function operator();</span><br><span class="line">&#125;</span><br><span class="line">class ResponsibilityA extends Responsibility</span><br><span class="line">&#123;</span><br><span class="line">public function operator()</span><br><span class="line">&#123;</span><br><span class="line">if(false == is_null($this-&gt;next))&#123;</span><br><span class="line">$this-&gt;next-&gt;operator();</span><br><span class="line">echo &quot;this is responsibility A&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class ResponsibilityB extends Responsibility</span><br><span class="line">&#123;</span><br><span class="line">public function operator()</span><br><span class="line">&#123;</span><br><span class="line">if(false == is_null($this-&gt;next))&#123;</span><br><span class="line">$this-&gt;next-&gt;operator();</span><br><span class="line">echo &quot;this is responsibility B&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$responsibilityA = new ResponsibilityA();</span><br><span class="line">$responsibilityB = new ResponsibilityB();</span><br><span class="line">$responsibilityA-&gt;setNext($responsibilityB);</span><br><span class="line">$responsibilityA-&gt;operator();</span><br></pre></td></tr></table></figure><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><blockquote><p>请求以命令的形式包裹在对象中，并传给调用对象。<br>调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。<br>通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。<br><strong>优点：</strong></p><ol><li>降低了系统耦合度。</li><li>新的命令可以很容易添加到系统中去。</li></ol><p><strong>缺点：</strong><br>使用命令模式可能会导致某些系统有过多的具体命令类。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 命令模式  -- commandpattern</span><br><span class="line"> */</span><br><span class="line">// 定义接口</span><br><span class="line">interface Command</span><br><span class="line">&#123;</span><br><span class="line">public function execute();</span><br><span class="line">&#125;</span><br><span class="line">class RealCommand implements Command</span><br><span class="line">&#123;</span><br><span class="line">private $_receiver;</span><br><span class="line">public function __construct(Receiver $receiver)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_receiver = $receiver;</span><br><span class="line">&#125;</span><br><span class="line">public function execute()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_receiver-&gt;action();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 接受者</span><br><span class="line">class Receiver</span><br><span class="line">&#123;</span><br><span class="line">private $_name;</span><br><span class="line">public function __construct($name)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_name = $name;</span><br><span class="line">&#125;</span><br><span class="line">public function action()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;this is receiver&quot; . $this-&gt;_name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 请求者</span><br><span class="line">class Invoker</span><br><span class="line">&#123;</span><br><span class="line">private $_realCommand;</span><br><span class="line">public function __construct(RealCommand $realCommand)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_realCommand = $realCommand;</span><br><span class="line">&#125;</span><br><span class="line">public function operator()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_realCommand-&gt;execute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$receiver = new Receiver(&apos;hello world&apos;);</span><br><span class="line">$realCommand = new RealCommand($receiver);</span><br><span class="line">$invoker = new Invoker($realCommand);</span><br><span class="line">$invoker-&gt;operator();</span><br></pre></td></tr></table></figure><h3 id="解释器模式"><a href="#解释器模式" class="headerlink" title="解释器模式"></a>解释器模式</h3><blockquote><p>一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。<br><strong>优点：</strong></p><ol><li>可扩展性比较好，灵活。 </li><li>增加了新的解释表达式的方式。 </li><li>易于实现简单文法。</li></ol><p><strong>缺点：</strong></p><ol><li>可利用场景比较少。 </li><li>对于复杂的文法比较难维护。 </li><li>解释器模式会引起类膨胀。 </li><li>解释器模式采用递归调用方法。</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 解释器模式  -- interpreter pattern</span><br><span class="line"> */</span><br><span class="line">interface Expression</span><br><span class="line">&#123;</span><br><span class="line">public function interpreter($data);</span><br><span class="line">&#125;</span><br><span class="line">class NumberExpression implements Expression</span><br><span class="line">&#123;</span><br><span class="line">public function interpreter($num)</span><br><span class="line">&#123;</span><br><span class="line">switch($num)&#123;</span><br><span class="line">case &apos;0&apos;: return &apos;零&apos;;</span><br><span class="line">case &apos;1&apos;: return &apos;一&apos;;</span><br><span class="line">case &apos;2&apos;: return &apos;二&apos;;</span><br><span class="line">case &apos;3&apos;: return &apos;三&apos;;</span><br><span class="line">case &apos;4&apos;: return &apos;四&apos;;</span><br><span class="line">case &apos;5&apos;: return &apos;五&apos;;</span><br><span class="line">case &apos;6&apos;: return &apos;六&apos;;</span><br><span class="line">case &apos;7&apos;: return &apos;七&apos;;</span><br><span class="line">case &apos;8&apos;: return &apos;八&apos;;</span><br><span class="line">case &apos;9&apos;: return &apos;久&apos;;</span><br><span class="line">default: return &apos;无&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class StringExpression implements Expression</span><br><span class="line">&#123;</span><br><span class="line">public function interpreter($str)</span><br><span class="line">&#123;</span><br><span class="line">return strtoupper($str);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Interpreter</span><br><span class="line">&#123;</span><br><span class="line">public function execute($string)</span><br><span class="line">&#123;</span><br><span class="line">$expression = null;</span><br><span class="line">for($i=0; $i&lt;strlen($string); $i++)&#123;</span><br><span class="line">if(is_numeric($string[$i]))&#123;</span><br><span class="line">$expression = new NumberExpression();</span><br><span class="line">&#125;elseif(is_string($string[$i]))&#123;</span><br><span class="line">$expression = new StringExpression();</span><br><span class="line">&#125;</span><br><span class="line">echo $expression-&gt;interpreter($string[$i]);</span><br><span class="line">echo &quot;&lt;br/&gt;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = new Interpreter();</span><br><span class="line">$obj-&gt;execute(&apos;123sqwe09843&apos;);</span><br></pre></td></tr></table></figure><h3 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title="迭代器模式"></a>迭代器模式</h3><blockquote><p>顺序访问集合对象的元素，不需要知道集合对象的底层表示。<br><strong>优点：</strong></p><ol><li>它支持以不同的方式遍历一个聚合对象。 </li><li>迭代器简化了聚合类。 </li><li>在同一个聚合上可以有多个遍历。 </li><li>在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li></ol><p><strong>缺点：</strong><br>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><p><strong>注意事项：</strong><br>迭代器模式就是分离了集合对象的遍历行为，抽象出一个迭代器类来负责，这样既可以做到不暴露集合的内部结构，又可让外部代码透明地访问集合内部的数据。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 迭代器模式  --  iterator pattern</span><br><span class="line"> */</span><br><span class="line">class Sample implements Iterator</span><br><span class="line">&#123;</span><br><span class="line">private $_item;</span><br><span class="line">public function __construct($data)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_item = $data;</span><br><span class="line">&#125;</span><br><span class="line">public function current()</span><br><span class="line">&#123;</span><br><span class="line">return current($this-&gt;_item);</span><br><span class="line">&#125;</span><br><span class="line">public function next()</span><br><span class="line">&#123;</span><br><span class="line">return next($this-&gt;_item);</span><br><span class="line">&#125;</span><br><span class="line">public function key()</span><br><span class="line">&#123;</span><br><span class="line">return key($this-&gt;_item);</span><br><span class="line">&#125;</span><br><span class="line">public function rewind()</span><br><span class="line">&#123;</span><br><span class="line">reset($this-&gt;_item);</span><br><span class="line">&#125;</span><br><span class="line">public function valid()</span><br><span class="line">&#123;</span><br><span class="line">return ($this-&gt;current() !== false);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$data = array(&apos;1&apos;, &apos;2&apos;, &apos;3&apos;, &apos;4&apos;, &apos;5&apos;);</span><br><span class="line">$obj = new Sample($data);</span><br><span class="line">echo $obj-&gt;current();</span><br><span class="line">echo $obj-&gt;next();</span><br><span class="line">echo $obj-&gt;key();</span><br><span class="line">echo $obj-&gt;rewind();</span><br><span class="line">echo $obj-&gt;valid();</span><br></pre></td></tr></table></figure><h3 id="中介者模式"><a href="#中介者模式" class="headerlink" title="中介者模式"></a>中介者模式</h3><blockquote><p>降低多个对象和类之间的通信复杂性。<br>该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。<br><strong>优点：</strong></p><ol><li>降低了类的复杂度，将一对多转化成了一对一。 </li><li>各个类之间的解耦。 3、符合迪米特原则。</li></ol><p><strong>缺点：</strong><br>中介者会庞大，变得复杂难以维护。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 中介者模式  -- mediator pattern</span><br><span class="line"> */</span><br><span class="line">abstract class Mediator</span><br><span class="line">&#123;</span><br><span class="line">abstract public function send($message, $colleague);</span><br><span class="line">&#125;</span><br><span class="line">abstract class Colleague</span><br><span class="line">&#123;</span><br><span class="line">private $_mediator;</span><br><span class="line">public function __construct($mediator)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_mediator = $mediator;</span><br><span class="line">&#125;</span><br><span class="line">public function send($message)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_mediator-&gt;send($message, $this);</span><br><span class="line">&#125;</span><br><span class="line">abstract public function notify($message);</span><br><span class="line">&#125;</span><br><span class="line">class Colleague1 extends Colleague</span><br><span class="line">&#123;</span><br><span class="line">public function notify($message)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;colleague1 &quot; . $message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Colleague2 extends Colleague</span><br><span class="line">&#123;</span><br><span class="line">public function notify($message)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;colleague2 &quot; . $message;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class NewMediator extends Mediator</span><br><span class="line">&#123;</span><br><span class="line">private $_colleauge1;</span><br><span class="line">private $_colleauge2;</span><br><span class="line">public function set($col1, $col2)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_colleauge1 = $col1;</span><br><span class="line">$this-&gt;_colleauge2 = $col2;</span><br><span class="line">&#125;</span><br><span class="line">public function send($message, $colleague)</span><br><span class="line">&#123;</span><br><span class="line">if($this-&gt;_colleauge1 == $colleague)&#123;</span><br><span class="line">$this-&gt;_colleauge1-&gt;notify($message);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">$this-&gt;_colleauge2-&gt;notify($message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$newMediator = new NewMediator();</span><br><span class="line">$col1 = new Colleague1($newMediator);</span><br><span class="line">$col2 = new Colleague2($newMediator);</span><br><span class="line">$newMediator-&gt;set($col1, $col2);</span><br><span class="line">$col1-&gt;send(&apos;hello col1&apos;);</span><br><span class="line">$col2-&gt;send(&apos;hello col2&apos;);</span><br></pre></td></tr></table></figure><h3 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title="备忘录模式"></a>备忘录模式</h3><blockquote><p>保存一个对象的某个状态，以便在适当的时候恢复对象<br>所谓备忘录模式就是在不破坏封装的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样可以在以后将对象恢复到原先保存的状态<br>通过一个备忘录类专门存储对象状态<br>客户不与备忘录类耦合，与备忘录管理类耦合<br><strong>优点：</strong>  </p><ol><li>给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。 </li><li>实现了信息的封装，使得用户不需要关心状态的保存细节。  </li></ol><p><strong>缺点：</strong><br>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。  </p><p><strong>注意事项：</strong>  </p><ol><li>为了符合迪米特原则，还要增加一个管理备忘录的类。 </li><li>为了节约内存，可使用原型模式+备忘录模式。</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 备忘录模式  --  memento pattern</span><br><span class="line"> */</span><br><span class="line">class Memento</span><br><span class="line">&#123;</span><br><span class="line">private $_memento;</span><br><span class="line">public function __construct(string $state)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_memento = $state;</span><br><span class="line">&#125;</span><br><span class="line">public function getState()</span><br><span class="line">&#123;</span><br><span class="line">return $this-&gt;_memento;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Originator</span><br><span class="line">&#123;</span><br><span class="line">private $_state;</span><br><span class="line">public function setState(string $state)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_state = $state;</span><br><span class="line">&#125;</span><br><span class="line">public function getState()</span><br><span class="line">&#123;</span><br><span class="line">return $this-&gt;_state;</span><br><span class="line">&#125;</span><br><span class="line">public function saveMemento()</span><br><span class="line">&#123;</span><br><span class="line">return new Memento($this-&gt;_state);</span><br><span class="line">&#125;</span><br><span class="line">public function getMemento(Memento $memento)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_state = $memento-&gt;getState();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class CakeTask</span><br><span class="line">&#123;</span><br><span class="line">private $_mementoList;</span><br><span class="line">public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_mementoList = array();</span><br><span class="line">&#125;</span><br><span class="line">public function add(Memento $memento)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_mementoList[] = $memento;</span><br><span class="line">&#125;</span><br><span class="line">public function get(int $index)</span><br><span class="line">&#123;</span><br><span class="line">return $this-&gt;_mementoList[$index];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$originator = new Originator();</span><br><span class="line">$cakeTask = new CakeTask();</span><br><span class="line">$originator-&gt;setState(&apos;hello one&apos;);</span><br><span class="line">$originator-&gt;setState(&apos;hello two&apos;);</span><br><span class="line">$cakeTask-&gt;add($originator-&gt;saveMemento());</span><br><span class="line">$originator-&gt;setState(&apos;hello three&apos;);</span><br><span class="line">$cakeTask-&gt;add($originator-&gt;saveMemento());</span><br><span class="line">$originator-&gt;setState(&apos;hello four&apos;);</span><br><span class="line"></span><br><span class="line">echo $originator-&gt;getState();</span><br><span class="line">$originator-&gt;getMemento($cakeTask-&gt;get(0));</span><br><span class="line">echo $originator-&gt;getState();</span><br><span class="line">$originator-&gt;getMemento($cakeTask-&gt;get(1));</span><br><span class="line">echo $originator-&gt;getState();</span><br></pre></td></tr></table></figure><h3 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h3><blockquote><p>对象间存在一对多关系<br>当一个对象被修改时，则会自动通知它的依赖对象并被自动更新<br><strong>优点：</strong></p><ol><li>观察者和被观察者是抽象耦合的。 </li><li>建立一套触发机制。</li></ol><p><strong>缺点：</strong></p><ol><li>如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。 </li><li>如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。 </li><li>观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</li></ol><p><strong>注意事项：</strong></p><ol><li>避免循环引用。 </li><li>如果顺序执行，某一观察者错误会导致系统卡壳，一般采用异步方式。</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 观察者模式  -- observer pattern</span><br><span class="line"> */</span><br><span class="line">// 定义接口</span><br><span class="line">interface Observer</span><br><span class="line">&#123;</span><br><span class="line">public function onSendMsg($name);</span><br><span class="line">public function getName();</span><br><span class="line">&#125;</span><br><span class="line">class UserListLogger implements Observer</span><br><span class="line">&#123;</span><br><span class="line">public function onSendMsg($name)</span><br><span class="line">&#123;</span><br><span class="line">echo $name . &apos; send to UserListLogger&apos;;</span><br><span class="line">&#125;</span><br><span class="line">public function getName()</span><br><span class="line">&#123;</span><br><span class="line">return &apos;userlist_logger&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class OtherObserver implements Observer</span><br><span class="line">&#123;</span><br><span class="line">public function onSendMsg($name)</span><br><span class="line">&#123;</span><br><span class="line">echo $name . &apos; send to OtherObserver&apos;;</span><br><span class="line">&#125;</span><br><span class="line">public function getName()</span><br><span class="line">&#123;</span><br><span class="line">return &apos;other_observer&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">interface Observerable</span><br><span class="line">&#123;</span><br><span class="line">public function add(Observer $observer);</span><br><span class="line">public function remove($name);</span><br><span class="line">&#125;</span><br><span class="line">class UserList implements Observerable</span><br><span class="line">&#123;</span><br><span class="line">private $_observer = array();</span><br><span class="line">public function add(Observer $observer)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_observer[] = $observer;</span><br><span class="line">&#125;</span><br><span class="line">public function remove($name)</span><br><span class="line">&#123;</span><br><span class="line">foreach($this-&gt;_observer as $k=&gt;$val)&#123;</span><br><span class="line">if($val-&gt;getName() == $name)&#123;</span><br><span class="line">unset($this-&gt;_observer[$k]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public function sendMsg($name)</span><br><span class="line">&#123;</span><br><span class="line">foreach($this-&gt;_observer as $val)&#123;</span><br><span class="line">$val-&gt;onSendMsg($name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$userList = new UserList();</span><br><span class="line">$userList-&gt;add(new UserListLogger());</span><br><span class="line">$userList-&gt;add(new OtherObserver());</span><br><span class="line">$userList-&gt;sendMsg(&apos;jone&apos;);</span><br><span class="line">$userList-&gt;remove(&apos;userlist_logger&apos;);</span><br><span class="line">$userList-&gt;sendMsg(&apos;jami&apos;);</span><br></pre></td></tr></table></figure><h3 id="状态模式"><a href="#状态模式" class="headerlink" title="状态模式"></a>状态模式</h3><blockquote><p>类的行为是基于它的状态改变的<br>对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为。<br><strong>优点：</strong></p><ol><li>封装了转换规则。 </li><li>枚举可能的状态，在枚举状态之前需要确定状态种类。 </li><li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。 </li><li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。 </li><li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</li></ol><p><strong>缺点：</strong></p><ol><li>状态模式的使用必然会增加系统类和对象的个数。 </li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。 </li><li>状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</li></ol><p><strong>注意事项：</strong><br>在行为受状态约束的时候使用状态模式，而且状态不超过 5 个。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 状态模式  --  state pattern</span><br><span class="line"> */</span><br><span class="line">interface State</span><br><span class="line">&#123;</span><br><span class="line">public function handle(Context $context);</span><br><span class="line">&#125;</span><br><span class="line">class StateA implements State</span><br><span class="line">&#123;</span><br><span class="line">private static $_instance;</span><br><span class="line">private function __construct()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public static function getInstance()</span><br><span class="line">&#123;</span><br><span class="line">if(is_null(self::$_instance))&#123;</span><br><span class="line">self::$_instance = new StateA();</span><br><span class="line">&#125;</span><br><span class="line">return self::$_instance;</span><br><span class="line">&#125;</span><br><span class="line">public function handle(Context $context)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;context A&quot;;</span><br><span class="line">$context-&gt;setState(StateB::getInstance());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class StateB implements State</span><br><span class="line">&#123;</span><br><span class="line">private static $_instance;</span><br><span class="line">private function __construct()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">public static function getInstance()</span><br><span class="line">&#123;</span><br><span class="line">if(is_null(self::$_instance))&#123;</span><br><span class="line">self::$_instance = new StateB();</span><br><span class="line">&#125;</span><br><span class="line">return self::$_instance;</span><br><span class="line">&#125;</span><br><span class="line">public function handle(Context $context)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;context B&quot;;</span><br><span class="line">$context-&gt;setState(StateA::getInstance());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Context&#123;</span><br><span class="line">private $_state;</span><br><span class="line">public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_state = StateA::getInstance();</span><br><span class="line">&#125;</span><br><span class="line">public function setState(State $state)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_state = $state;</span><br><span class="line">&#125;</span><br><span class="line">public function request()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_state-&gt;handle($this);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$context = new Context();</span><br><span class="line">$context-&gt;request();</span><br><span class="line">$context-&gt;request();</span><br><span class="line">$context-&gt;request();</span><br><span class="line">$context-&gt;request();</span><br></pre></td></tr></table></figure><h3 id="空对象模式"><a href="#空对象模式" class="headerlink" title="空对象模式"></a>空对象模式</h3><blockquote><p>一个空对象取代 NULL 对象实例的检查<br>在空对象模式中，我们创建一个指定各种要执行的操作的抽象类和扩展该类的实体类，还创建一个未对该类做任何实现的空对象类，该空对象类将无缝地使用在需要检查空值的地方。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 空对象模式  --  null object pattern</span><br><span class="line"> */</span><br><span class="line">abstract class AbstractCustom</span><br><span class="line">&#123;</span><br><span class="line">private $_name;</span><br><span class="line">abstract public function isNil();</span><br><span class="line">abstract public function getName();</span><br><span class="line">&#125;</span><br><span class="line">class RealCustom extends AbstractCustom</span><br><span class="line">&#123;</span><br><span class="line">private $_name;</span><br><span class="line">public function __construct($name)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_name = $name;</span><br><span class="line">&#125;</span><br><span class="line">public function getName()</span><br><span class="line">&#123;</span><br><span class="line">return $this-&gt;_name;</span><br><span class="line">&#125;</span><br><span class="line">public function isNil()</span><br><span class="line">&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class NullCustom extends AbstractCustom</span><br><span class="line">&#123;</span><br><span class="line">public function getName()</span><br><span class="line">&#123;</span><br><span class="line">return &quot;this is null custom&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public function isNil()</span><br><span class="line">&#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class NullFactory</span><br><span class="line">&#123;</span><br><span class="line">private $_arr = array(&apos;one&apos;, &apos;two&apos;);</span><br><span class="line">public function getCustom($name)&#123;</span><br><span class="line">if(in_array($name, $this-&gt;_arr))&#123;</span><br><span class="line">return new RealCustom($name);</span><br><span class="line">&#125;</span><br><span class="line">return new NullCustom();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = new NullFactory();</span><br><span class="line">$test1 = $obj-&gt;getCustom(&apos;one&apos;);</span><br><span class="line">$test2 = $obj-&gt;getCustom(&apos;one_one&apos;);</span><br><span class="line">$test3 = $obj-&gt;getCustom(&apos;two&apos;);</span><br><span class="line">$test4 = $obj-&gt;getCustom(&apos;two_two&apos;);</span><br><span class="line">echo $test1-&gt;getName();</span><br><span class="line">echo $test2-&gt;getName();</span><br><span class="line">echo $test3-&gt;getName();</span><br><span class="line">echo $test4-&gt;getName();</span><br></pre></td></tr></table></figure><h3 id="策略模式"><a href="#策略模式" class="headerlink" title="策略模式"></a>策略模式</h3><blockquote><p>一个类的行为或其算法可以在运行时更改<br>定义一系列的算法,把它们一个个封装起来, 并且使它们可相互替换<br><strong>优点：</strong></p><ol><li>算法可以自由切换。 </li><li>避免使用多重条件判断。 </li><li>扩展性良好。</li></ol><p><strong>缺点：</strong></p><ol><li>策略类会增多。 </li><li>所有策略类都需要对外暴露。</li></ol><p><strong>注意事项：</strong><br>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 策略模式  -- strategy pattern</span><br><span class="line"> */</span><br><span class="line">interface Strategy</span><br><span class="line">&#123;</span><br><span class="line">public function do_method();</span><br><span class="line">&#125;</span><br><span class="line">class StrategyA implements Strategy</span><br><span class="line">&#123;</span><br><span class="line">public function do_method()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;this is strategy A&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class StrategyB implements Strategy</span><br><span class="line">&#123;</span><br><span class="line">public function do_method()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;this is strategy B&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class StrategyC implements Strategy</span><br><span class="line">&#123;</span><br><span class="line">public function do_method()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;this is strategy C&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Question</span><br><span class="line">&#123;</span><br><span class="line">private $_strategy;</span><br><span class="line">public function __construct($strategy)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_strategy = $strategy;</span><br><span class="line">&#125;</span><br><span class="line">public function handle()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_strategy-&gt;do_method();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = new Question(new StrategyA());</span><br><span class="line">$a-&gt;handle();</span><br><span class="line">$b = new Question(new StrategyB());</span><br><span class="line">$b-&gt;handle();</span><br><span class="line">$c = new Question(new StrategyC());</span><br><span class="line">$c-&gt;handle();</span><br></pre></td></tr></table></figure><h3 id="模板模式"><a href="#模板模式" class="headerlink" title="模板模式"></a>模板模式</h3><blockquote><p>一些方法通用，却在每一个子类都重新写了这一方法<br>将这些通用算法抽象出来<br>在抽象类实现，其他步骤在子类实现<br><strong>优点：</strong></p><ol><li>封装不变部分，扩展可变部分。 </li><li>提取公共代码，便于维护。 </li><li>行为由父类控制，子类实现。</li></ol><p><strong>缺点：</strong><br>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><p><strong>注意事项：</strong><br>为防止恶意操作，一般模板方法都加上 final 关键词。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 模板模式 -- template pattern</span><br><span class="line"> */</span><br><span class="line">abstract class Game</span><br><span class="line">&#123;</span><br><span class="line">abstract public function start();</span><br><span class="line">abstract public function end();</span><br><span class="line">public function action()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;start();</span><br><span class="line">$this-&gt;end();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class SuperMary extends Game</span><br><span class="line">&#123;</span><br><span class="line">public function start()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;the game is starting&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public function end()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;the game is ending&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$superMary = new SuperMary();</span><br><span class="line">$superMary-&gt;action();</span><br></pre></td></tr></table></figure><h3 id="访问者模式"><a href="#访问者模式" class="headerlink" title="访问者模式"></a>访问者模式</h3><blockquote><p>使用了一个访问者类，它改变了元素类的执行算法<br>元素的执行算法可以随着访问者改变而改变<br>稳定的数据结构和易变的操作耦合问题。<br>在数据基础类里面有一个方法接受访问者，将自身引用传入访问者。<br><strong>优点：</strong></p><ol><li>符合单一职责原则。 </li><li>优秀的扩展性。 </li><li>灵活性。</li></ol><p><strong>缺点：</strong></p><ol><li>具体元素对访问者公布细节，违反了迪米特原则。 </li><li>具体元素变更比较困难。 </li><li>违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</li></ol><p><strong>注意事项：</strong><br>访问者可以对功能进行统一，可以做报表、UI、拦截器与过滤器。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">interface ComputerPart</span><br><span class="line">&#123;</span><br><span class="line">public function accept(Visitor $visitor);</span><br><span class="line">&#125;</span><br><span class="line">class Computer implements ComputerPart</span><br><span class="line">&#123;</span><br><span class="line">private $_computerPart = array();</span><br><span class="line">public function accept(Visitor $visitor)</span><br><span class="line">&#123;</span><br><span class="line">foreach($this-&gt;_computerPart as $val)&#123;</span><br><span class="line">$val-&gt;accept($visitor);</span><br><span class="line">&#125;</span><br><span class="line">$visitor-&gt;visit($this);</span><br><span class="line">&#125;</span><br><span class="line">public function getName()</span><br><span class="line">&#123;</span><br><span class="line">return &apos;computer&apos;;</span><br><span class="line">&#125;</span><br><span class="line">public function setAttach(ComputerPart $computerPart)</span><br><span class="line">&#123;</span><br><span class="line">array_push($this-&gt;_computerPart, $computerPart);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Mouse implements ComputerPart</span><br><span class="line">&#123;</span><br><span class="line">public function accept(Visitor $visitor)</span><br><span class="line">&#123;</span><br><span class="line">$visitor-&gt;visit($this);</span><br><span class="line">&#125;</span><br><span class="line">public function getName()</span><br><span class="line">&#123;</span><br><span class="line">return &apos;mouse&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class KeyBoard implements ComputerPart</span><br><span class="line">&#123;</span><br><span class="line">public function accept(Visitor $visitor)</span><br><span class="line">&#123;</span><br><span class="line">$visitor-&gt;visit($this);</span><br><span class="line">&#125;</span><br><span class="line">public function getName()</span><br><span class="line">&#123;</span><br><span class="line">return &apos;keyboard&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Visitor</span><br><span class="line">&#123;</span><br><span class="line">public function visit(ComputerPart $computerPart)</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;this is &quot;.$computerPart-&gt;getName();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$computer = new Computer();</span><br><span class="line">$computer-&gt;setAttach(new Mouse());</span><br><span class="line">$computer-&gt;setAttach(new KeyBoard());</span><br><span class="line">$computer-&gt;accept(new Visitor());</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot;责任链模式&quot;&gt;&lt;/a&gt;责任链模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;为请求创建了一个接收者对象的链&lt;br&gt;这种模式给予请求的类型，对请求的发送者和接收者进行解
      
    
    </summary>
    
      <category term="设计模式" scheme="https://zhipenwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://zhipenwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP设计模式之结构型模式（structural patterns）</title>
    <link href="https://zhipenwang.github.io/2018/06/17/structrual_patterns/"/>
    <id>https://zhipenwang.github.io/2018/06/17/structrual_patterns/</id>
    <published>2018-06-17T12:21:01.000Z</published>
    <updated>2019-04-09T14:30:14.897Z</updated>
    
    <content type="html"><![CDATA[<h3 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h3><blockquote><p>涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。<br>适配器继承或依赖已有的对象，实现想要的目标接口。<br><strong>优点：</strong>  </p><ol><li>可以让任何两个没有关联的类一起运行。  </li><li>提高了类的复用。  </li><li>增加了类的透明度。  </li><li>灵活性好。  </li></ol><p><strong>缺点：</strong></p><ol><li>过多使用适配器会让系统凌乱，不易整体把握，没有必要，不建议使用适配器模式  </li></ol><p><strong>注意事项：</strong><br>适配器不是在详细设计时使用的，而是在解决正在服役的项目使用的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * adapter pattern  适配器模式</span><br><span class="line"> */</span><br><span class="line">// 对象适配器</span><br><span class="line">// 定义接口</span><br><span class="line">interface target</span><br><span class="line">&#123;</span><br><span class="line">public function echoSample1();</span><br><span class="line">public function echoSample2();</span><br><span class="line">&#125;</span><br><span class="line">class adapterOne implements target</span><br><span class="line">&#123;</span><br><span class="line">public function echoSample1()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;+++++&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public function echoSample2()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class adapterTwo implements target</span><br><span class="line">&#123;</span><br><span class="line">private $adapterOne;</span><br><span class="line">public function __construct(adapterOne $obj)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;adapterOne = $obj;</span><br><span class="line">&#125;</span><br><span class="line">public function echoSample1()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;adapterOne-&gt;echoSample1();</span><br><span class="line">&#125;</span><br><span class="line">public function echoSample2()</span><br><span class="line">&#123;</span><br><span class="line">echo &apos;----&apos;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$adapterTwo = new adapterTwo(new adapterOne);</span><br><span class="line">$adapterTwo-&gt;echoSample1();</span><br><span class="line">$adapterTwo-&gt;echoSample2();</span><br><span class="line"></span><br><span class="line">// 类适配器</span><br><span class="line">interface target2</span><br><span class="line">&#123;</span><br><span class="line">public function echoSample1();</span><br><span class="line">public function echoSample2();</span><br><span class="line">&#125;</span><br><span class="line">class adapterClassOne</span><br><span class="line">&#123;</span><br><span class="line">public function echoSample1()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;****&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class adapterClassTwo extends adapterClassOne implements target2</span><br><span class="line">&#123;</span><br><span class="line">public function echoSample2()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;&amp;&amp;&amp;&amp;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$adapterClassTwo = new adapterClassTwo();</span><br><span class="line">$adapterClassTwo-&gt;echoSample1();</span><br><span class="line">$adapterClassTwo-&gt;echoSample2();</span><br></pre></td></tr></table></figure><h3 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h3><blockquote><p>把抽象化与实现化解耦，使得二者可以独立变化<br>抽象类依赖实现类。<br><strong>优点：</strong>  </p><ol><li>抽象和实现的分离。 </li><li>优秀的扩展能力。 </li><li>实现细节对客户透明。</li></ol><p><strong>缺点：</strong><br>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。<br><strong>注意事项：</strong><br>对于两个独立变化的维度，使用桥接模式再适合不过了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 桥接模式 -- bridge pattern</span><br><span class="line"> */</span><br><span class="line">// 定义接口--对象</span><br><span class="line">interface DrawApi</span><br><span class="line">&#123;</span><br><span class="line">public function draw();</span><br><span class="line">&#125;</span><br><span class="line">class RedColor implements DrawApi</span><br><span class="line">&#123;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;red color&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class GreenColor implements DrawApi</span><br><span class="line">&#123;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;green color&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">// 定义抽象类</span><br><span class="line">abstract class Shape</span><br><span class="line">&#123;</span><br><span class="line">abstract public function draw();</span><br><span class="line">&#125;</span><br><span class="line">class Circle extends Shape</span><br><span class="line">&#123;</span><br><span class="line">private $drawApi;</span><br><span class="line">public function __construct(DrawApi $obj)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;drawApi = $obj;</span><br><span class="line">&#125;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;drawApi-&gt;draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$obj = new Circle(new RedColor());</span><br><span class="line">$obj-&gt;draw();</span><br><span class="line">$obj2 = new Circle(new GreenColor());</span><br><span class="line">$obj2-&gt;draw();</span><br></pre></td></tr></table></figure><h3 id="过滤器模式"><a href="#过滤器模式" class="headerlink" title="过滤器模式"></a>过滤器模式</h3><blockquote><p>使用不同的标准来过滤一组对象，通过逻辑运算以解耦的方式把它们连接起来</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 过滤器模式 -- filter pattern</span><br><span class="line"> */</span><br><span class="line">// 定义接口</span><br><span class="line">interface Shape</span><br><span class="line">&#123;</span><br><span class="line">public function arrayPrint(array $arr);</span><br><span class="line">&#125;</span><br><span class="line">class One implements Shape</span><br><span class="line">&#123;</span><br><span class="line">public function arrayPrint(array $arr)</span><br><span class="line">&#123;</span><br><span class="line">$array = array();</span><br><span class="line">foreach($arr as $v)&#123;</span><br><span class="line">if($v-&gt;getName() == &apos;one&apos;)&#123;</span><br><span class="line">$array[] = $v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return $array;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Two implements Shape</span><br><span class="line">&#123;</span><br><span class="line">public function arrayPrint(array $arr)</span><br><span class="line">&#123;</span><br><span class="line">$array = array();</span><br><span class="line">foreach($arr as $v)&#123;</span><br><span class="line">if($v-&gt;getName() == &apos;two&apos;)&#123;</span><br><span class="line">$array[] = $v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return $array;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Three implements Shape</span><br><span class="line">&#123;</span><br><span class="line">public function arrayPrint(array $arr)</span><br><span class="line">&#123;</span><br><span class="line">$array = array();</span><br><span class="line">foreach($arr as $v)&#123;</span><br><span class="line">if($v-&gt;getID() == &apos;2&apos;)&#123;</span><br><span class="line">$array[] = $v;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return $array;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 定义标准类</span><br><span class="line">class Data</span><br><span class="line">&#123;</span><br><span class="line">private $id;</span><br><span class="line">private $name;</span><br><span class="line">public function __construct($id, $name)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;id = $id;</span><br><span class="line">$this-&gt;name = $name;</span><br><span class="line">&#125;</span><br><span class="line">public function getID()</span><br><span class="line">&#123;</span><br><span class="line">return $this-&gt;id;</span><br><span class="line">&#125;</span><br><span class="line">public function getName()</span><br><span class="line">&#123;</span><br><span class="line">return $this-&gt;name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$array = array();</span><br><span class="line">$array[] = new Data(&apos;1&apos;, &apos;one&apos;);</span><br><span class="line">$array[] = new Data(&apos;2&apos;, &apos;one&apos;);</span><br><span class="line">$array[] = new Data(&apos;3&apos;, &apos;two&apos;);</span><br><span class="line">$array[] = new Data(&apos;4&apos;, &apos;three&apos;);</span><br><span class="line"></span><br><span class="line">$one = new One();</span><br><span class="line">arrayPrint($one-&gt;arrayPrint($array));</span><br><span class="line">$two = new Two();</span><br><span class="line">arrayPrint($two-&gt;arrayPrint($array));</span><br><span class="line"></span><br><span class="line">$three = new Three();</span><br><span class="line">arrayPrint($three-&gt;arrayPrint($one-&gt;arrayPrint($array)));</span><br><span class="line"></span><br><span class="line">function arrayPrint($arr)</span><br><span class="line">&#123;</span><br><span class="line">foreach($arr as $v)&#123;</span><br><span class="line">echo $v-&gt;getID();</span><br><span class="line">echo $v-&gt;getName();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h3><blockquote><p>一组相似的对象当作一个单一的对象<br>组合模式依据树形结构来组合对象，用来表示部分以及整体层次<br><strong>意图：</strong><br>将对象组合成树形结构以表示”部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。<br><strong>优点：</strong></p><ol><li>高层模块调用简单。</li><li>节点自由增加。</li></ol><p><strong>缺点：</strong><br>在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。<br><strong>注意事项：</strong><br>定义时为具体类。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 组合模式  -- composite pattern</span><br><span class="line"> */</span><br><span class="line">interface Shape</span><br><span class="line">&#123;</span><br><span class="line">public function add($obj);</span><br><span class="line">public function remove($obj);</span><br><span class="line">public function operator();</span><br><span class="line">&#125;</span><br><span class="line">class Composite implements Shape</span><br><span class="line">&#123;</span><br><span class="line">private $_composite;</span><br><span class="line">public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_composite = array();</span><br><span class="line">&#125;</span><br><span class="line">public function operator()</span><br><span class="line">&#123;</span><br><span class="line">foreach($this-&gt;_composite as $v)&#123;</span><br><span class="line">$v-&gt;operator();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public function add($obj)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_composite[] = $obj;</span><br><span class="line">&#125;</span><br><span class="line">public function remove($obj)</span><br><span class="line">&#123;</span><br><span class="line">foreach($this-&gt;_composite as $k=&gt;$v)&#123;</span><br><span class="line">if($obj == $v)&#123;</span><br><span class="line">unset($this-&gt;_composite[$k]);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Leaf implements Shape</span><br><span class="line">&#123;</span><br><span class="line">private $_name;</span><br><span class="line">public function __construct($name)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_name = $name;</span><br><span class="line">&#125;</span><br><span class="line">public function add($obj)&#123;&#125;</span><br><span class="line">public function remove($obj)&#123;&#125;</span><br><span class="line">public function operator()</span><br><span class="line">&#123;</span><br><span class="line">echo $this-&gt;_name;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$leaf1 = new Leaf(&apos;one&apos;);</span><br><span class="line">$leaf2 = new Leaf(&apos;two&apos;);</span><br><span class="line">$composite = new Composite();</span><br><span class="line">$composite-&gt;add($leaf1);</span><br><span class="line">$composite-&gt;add($leaf2);</span><br><span class="line">$composite-&gt;operator();</span><br><span class="line">$composite-&gt;remove($leaf1);</span><br><span class="line">$composite-&gt;operator();</span><br></pre></td></tr></table></figure><h3 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h3><blockquote><p>允许向一个现有的对象添加新的功能，同时又不改变其结构<br><strong>优点：</strong><br>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。<br><strong>缺点：</strong><br>多层装饰比较复杂。<br><strong>注意事项：</strong><br>可代替继承。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 装饰器模式  -- decorator pattern</span><br><span class="line"> */</span><br><span class="line">// 定义接口</span><br><span class="line">interface Shape</span><br><span class="line">&#123;</span><br><span class="line">public function draw();</span><br><span class="line">&#125;</span><br><span class="line">class Decorator implements Shape</span><br><span class="line">&#123;</span><br><span class="line">private $_decorator;</span><br><span class="line">public function __construct(Shape $decorator)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_decorator = $decorator;</span><br><span class="line">&#125;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_decorator-&gt;draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class RedColor extends Decorator</span><br><span class="line">&#123;</span><br><span class="line">public function __construct(Shape $decorator)</span><br><span class="line">&#123;</span><br><span class="line">parent::__construct($decorator);</span><br><span class="line">&#125;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">parent::draw();</span><br><span class="line">$this-&gt;echoDraw();</span><br><span class="line">&#125;</span><br><span class="line">public function echoDraw()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;red color&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class GreenColor extends Decorator</span><br><span class="line">&#123;</span><br><span class="line">public function __construct(Shape $decorator)</span><br><span class="line">&#123;</span><br><span class="line">parent::__construct($decorator);</span><br><span class="line">&#125;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">parent::draw();</span><br><span class="line">$this-&gt;echoDraw();</span><br><span class="line">&#125;</span><br><span class="line">public function echoDraw()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;green color&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Color implements Shape</span><br><span class="line">&#123;</span><br><span class="line">public function draw()&#123;</span><br><span class="line">echo &quot;color&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = new Color();</span><br><span class="line">$obj_red = new RedColor($obj);</span><br><span class="line">$obj_green = new GreenColor($obj_red);</span><br><span class="line">$obj_red-&gt;draw();</span><br><span class="line">$obj_green-&gt;draw();</span><br></pre></td></tr></table></figure><h3 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h3><blockquote><p>隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口<br>在客户端和复杂系统之间再加一层，这一层将调用顺序、依赖关系等处理好。<br><strong>优点：</strong></p><ol><li>减少系统相互依赖。 </li><li>提高灵活性。 </li><li>提高了安全性。</li></ol><p><strong>缺点：</strong><br>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。<br><strong>注意事项：</strong><br>在层次化结构中，可以使用外观模式定义系统中每一层的入口。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 门面模式/外观模式  -- facade pattern</span><br><span class="line"> */</span><br><span class="line">//定义接口</span><br><span class="line">interface Shape</span><br><span class="line">&#123;</span><br><span class="line">public function draw();</span><br><span class="line">&#125;</span><br><span class="line">class Red implements Shape</span><br><span class="line">&#123;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;red&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Green implements Shape</span><br><span class="line">&#123;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;green&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Demo</span><br><span class="line">&#123;</span><br><span class="line">private $_red;</span><br><span class="line">private $_green;</span><br><span class="line">public function __construct()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_red = new Red();</span><br><span class="line">$this-&gt;_green = new Green();</span><br><span class="line">&#125;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_red-&gt;draw();</span><br><span class="line">$this-&gt;_green-&gt;draw();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = new Demo();</span><br><span class="line">$obj-&gt;draw();</span><br></pre></td></tr></table></figure><h3 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h3><blockquote><p>减少创建对象的数量，以减少内存占用和提高性能<br>用 HashMap 存储这些对象。<br><strong>优点：</strong><br>大大减少对象的创建，降低系统的内存，使效率提高。<br><strong>缺点：</strong><br>提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。<br><strong>注意事项：</strong>  </p><ol><li>注意划分外部状态和内部状态，否则可能会引起线程安全问题。 </li><li>这些类必须有一个工厂对象加以控制</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 享元模式  -- flyweight pattern</span><br><span class="line"> */</span><br><span class="line">abstract class Resource</span><br><span class="line">&#123;</span><br><span class="line">private $_resource = null;</span><br><span class="line">abstract public function operator();</span><br><span class="line">&#125;</span><br><span class="line">class UnShare extends Resource</span><br><span class="line">&#123;</span><br><span class="line">public function __construct($str)</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;_resource = $str;</span><br><span class="line">&#125;</span><br><span class="line">public function operator()</span><br><span class="line">&#123;</span><br><span class="line">echo $this-&gt;_resource;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class Share extends Resource</span><br><span class="line">&#123;</span><br><span class="line">private $_resources = array();</span><br><span class="line">public function setResource($str)</span><br><span class="line">&#123;</span><br><span class="line">if(isset($this-&gt;_resources[$str]))&#123;</span><br><span class="line">return $this-&gt;_resources[$str];</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return $this-&gt;_resources[$str] = $str;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public function operator()</span><br><span class="line">&#123;</span><br><span class="line">foreach($this-&gt;_resources as $key=&gt;$val)&#123;</span><br><span class="line">echo $key . &apos;=&gt;&apos; . $val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = new Share();</span><br><span class="line">$obj-&gt;setResource(&apos;a&apos;);</span><br><span class="line">$obj-&gt;operator();</span><br><span class="line">$obj-&gt;setResource(&apos;b&apos;);</span><br><span class="line">$obj-&gt;operator();</span><br><span class="line">$objUnShare = new UnShare(&apos;A&apos;);</span><br><span class="line">$objUnShare-&gt;operator();</span><br><span class="line">$objUnShare = new UnShare(&apos;B&apos;);</span><br><span class="line">$objUnShare-&gt;operator();</span><br></pre></td></tr></table></figure><h3 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h3><blockquote><p>为其他对象提供一种代理以控制对这个对象的访问。<br>实现与被代理类组合。<br><strong>优点：</strong></p><ol><li>职责清晰。 </li><li>高扩展性。 </li><li>智能化。  </li></ol><p><strong>缺点：</strong> </p><ol><li>由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。</li><li>实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</li></ol><p><strong>注意事项：</strong> </p><ol><li>和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。 </li><li>和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">/**</span><br><span class="line"> * 代理模式  -- proxy pattern</span><br><span class="line"> */</span><br><span class="line">abstract class Subject</span><br><span class="line">&#123;</span><br><span class="line">abstract public function draw();</span><br><span class="line">&#125;</span><br><span class="line">class RealSubject extends Subject</span><br><span class="line">&#123;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;real subject&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class ProxySubject extends Subject</span><br><span class="line">&#123;</span><br><span class="line">private $_subject = null;</span><br><span class="line">public function draw()</span><br><span class="line">&#123;</span><br><span class="line">$this-&gt;before();</span><br><span class="line">if(is_null($this-&gt;_subject))&#123;</span><br><span class="line">$this-&gt;_subject = new RealSubject();</span><br><span class="line">&#125;</span><br><span class="line">$this-&gt;_subject-&gt;draw();</span><br><span class="line">$this-&gt;after();</span><br><span class="line">&#125;</span><br><span class="line">public function before()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;before&quot;;</span><br><span class="line">&#125;</span><br><span class="line">public function after()</span><br><span class="line">&#123;</span><br><span class="line">echo &quot;after&quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">$obj = new ProxySubject();</span><br><span class="line">$obj-&gt;draw();</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot;适配器模式&quot;&gt;&lt;/a&gt;适配器模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。&lt;br&gt;适配器继承或依赖已有的对
      
    
    </summary>
    
      <category term="设计模式" scheme="https://zhipenwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://zhipenwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP设计模式之创建型模式（creational patterns）</title>
    <link href="https://zhipenwang.github.io/2018/06/16/creational_patterns/"/>
    <id>https://zhipenwang.github.io/2018/06/16/creational_patterns/</id>
    <published>2018-06-16T12:21:01.000Z</published>
    <updated>2019-04-09T14:31:30.571Z</updated>
    
    <content type="html"><![CDATA[<h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><blockquote><p>定义一个创建对象的接口，让其子类决定去实例化哪一个工厂类<br>创建的过程是在子类中执行<br><strong>优点</strong>：  </p><ol><li>调用者想创建一个对象只需要知道名称即可  </li><li>扩展性高，想增加一个产品，只需要扩展一个工厂类就可以  </li><li>屏蔽产品具体实现，调用者只关心产品的接口  </li></ol><p><strong>缺点</strong>：  </p><ol><li>每增加一个产品，都需要增加一个具体类和对象实现工厂，使得系统类的个数成倍增加，一定程度上增加了系统复杂度，同时也增加了系统具体类的依赖</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">/*** ------------工厂模式  factory-----------------------  ***/</span><br><span class="line"></span><br><span class="line">class DB</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo get_class();</span><br><span class="line">    &#125;</span><br><span class="line">    public function die()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Mysql extends DB&#123;&#125;</span><br><span class="line">class SqlSrv extends DB&#123;&#125;</span><br><span class="line">class Odbc extends DB&#123;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface TestFactory</span><br><span class="line">&#123;</span><br><span class="line">    public function toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Factory implements TestFactory</span><br><span class="line">&#123;</span><br><span class="line">    public function toString()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    public function do($type)</span><br><span class="line">    &#123;</span><br><span class="line">        switch($type)&#123;</span><br><span class="line">            case &apos;Mysql&apos;:</span><br><span class="line">                return new Mysql();</span><br><span class="line">            case &apos;SqlSrv&apos;:</span><br><span class="line">                return new SqlSrv();</span><br><span class="line">            case &apos;Odbc&apos;:</span><br><span class="line">                return new Odbc();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test = new Factory();</span><br><span class="line">$test-&gt;do(&apos;Mysql&apos;);</span><br><span class="line">$test-&gt;do(&apos;SqlSrv&apos;);</span><br><span class="line">$test-&gt;do(&apos;Odbc&apos;);</span><br></pre></td></tr></table></figure><h3 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h3><blockquote><p>围绕一个超级工厂创建其他工厂，该超级工厂是其他工厂的工厂<br>一个工厂中聚合多个同类产品<br><strong>优点</strong>：<br>    当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。<br><strong>缺点</strong>：<br>    产品族扩展非常困难，要增加一个系列的某一产品，既要在抽象的 Creator 里加代码，又要在具体的里面加代码。<br><strong>注意事项</strong>：<br>    产品族难扩展，产品等级易扩展。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">/*** ------------抽象工厂模式  abstract factory-----------------------  ***/</span><br><span class="line">class Cache&#123;&#125;</span><br><span class="line">class CacheDie&#123;&#125;</span><br><span class="line">class FileCache extends Cache</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;filecache&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class RedisCache extends Cache&#123;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;rediscache&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class FileCacheDie extends CacheDie</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;FileCacheDie&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class RedisCacheDie extends CacheDie</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;RedisCacheDie&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CacheAbstractFactory</span><br><span class="line">&#123;</span><br><span class="line">    public function createCache($type)&#123;</span><br><span class="line">        switch ($type) &#123;</span><br><span class="line">            case &apos;file&apos;:</span><br><span class="line">                return new FileCache();</span><br><span class="line">            case &apos;redis&apos;:</span><br><span class="line">                return new RedisCache();</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class CacheDieAbstractFactory</span><br><span class="line">&#123;</span><br><span class="line">    public function createCache($type)&#123;</span><br><span class="line">        switch ($type) &#123;</span><br><span class="line">            case &apos;file&apos;:</span><br><span class="line">                return new FileCacheDie();</span><br><span class="line">            case &apos;redis&apos;:</span><br><span class="line">                return new RedisCacheDie();</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TestAbstractFactory</span><br><span class="line">&#123;</span><br><span class="line">    public function createType($type)</span><br><span class="line">    &#123;</span><br><span class="line">        switch ($type) &#123;</span><br><span class="line">            case &apos;cache&apos;:</span><br><span class="line">                return new CacheAbstractFactory();</span><br><span class="line">            case &apos;cacheDie&apos;:</span><br><span class="line">                return new CacheDieAbstractFactory();</span><br><span class="line">            default:</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$testAbstractFactory = new TestAbstractFactory();</span><br><span class="line">$cache = $testAbstractFactory-&gt;createType(&apos;cache&apos;);</span><br><span class="line">$cache-&gt;createCache(&apos;file&apos;);</span><br><span class="line">$cache-&gt;createCache(&apos;redis&apos;);</span><br><span class="line">$cacheDie = $testAbstractFactory-&gt;createType(&apos;cacheDie&apos;);</span><br><span class="line">$cacheDie-&gt;createCache(&apos;file&apos;);</span><br><span class="line">$cacheDie-&gt;createCache(&apos;redis&apos;);</span><br><span class="line"></span><br><span class="line">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><p>负责创建自己的对象，同时确保只有单个对象被创建。<br>这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br><strong>注意</strong>：  </p><ol><li>单例类只能有一个实例。  </li><li>单例类必须自己创建自己的唯一实例。  </li><li>单例类必须给所有其他对象提供这一实例。  </li></ol><p><strong>优点</strong>：  </p><ol><li>在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例  </li><li>避免对资源的多重占用（比如写文件操作）。  </li></ol><p><strong>缺点</strong>：<br>    没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。<br><strong>注意事项</strong>：<br>    getInstance() 方法中需要使用同步锁 synchronized (Singleton.class) 防止多线程同时进入造成 instance 被多次实例化。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">/*** -----------单例模式  singleton------------  ***/</span><br><span class="line">final class TestSingle</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    private static $instance;</span><br><span class="line">    public static function getInstance()</span><br><span class="line">    &#123;</span><br><span class="line">        if(!(self::$instance instanceof self ))&#123;</span><br><span class="line">            self::$instance = new self();</span><br><span class="line">        &#125;</span><br><span class="line">        return self::$instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private function __construct()</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function toString()</span><br><span class="line">    &#123;</span><br><span class="line">        echo &quot;string&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$test = TestSingle::getInstance();</span><br><span class="line">$test-&gt;toString();</span><br><span class="line"></span><br><span class="line">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><blockquote><p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。<br><strong>优点</strong>：  </p><ol><li>建造者独立，易扩展。  </li><li>便于控制细节风险。  </li></ol><p><strong>缺点</strong>：  </p><ol><li>产品必须有共同点，范围有限制。  </li><li>如内部变化复杂，会有很多的建造类。  </li></ol><p><strong>注意事项</strong>：<br>    与工厂模式的区别是：建造者模式更加关注与零件装配的顺序。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">/*** --------------建造者模式  builder---------------------  ***/</span><br><span class="line"></span><br><span class="line">class Product</span><br><span class="line">&#123;</span><br><span class="line">    private $_arr;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_arr = array();</span><br><span class="line">    &#125;</span><br><span class="line">    public function add($part)</span><br><span class="line">    &#123;</span><br><span class="line">        return array_push($this-&gt;_arr, $part);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Builder</span><br><span class="line">&#123;</span><br><span class="line">    private $_product;</span><br><span class="line">    public function __construct()</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_product = new Product();</span><br><span class="line">    &#125;</span><br><span class="line">    public function add1($part)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_product-&gt;add($part);</span><br><span class="line">    &#125;</span><br><span class="line">    public function add2($part)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_product-&gt;add($part);</span><br><span class="line">    &#125;</span><br><span class="line">    public function getPart()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;_product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Director</span><br><span class="line">&#123;</span><br><span class="line">    public function __construct(Builder $builder)</span><br><span class="line">    &#123;</span><br><span class="line">        $builder-&gt;add1(&apos;arr1&apos;);</span><br><span class="line">        $builder-&gt;add2(&apos;add2&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$test_builder = new Builder();</span><br><span class="line">$test_director = new Director($test_builder);</span><br><span class="line">print_r($test_builder-&gt;getPart());</span><br><span class="line"></span><br><span class="line">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure><h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><blockquote><p>实现了一个原型接口，该接口用于创建当前对象的克隆。<br>实现克隆 clone<br><strong>优点</strong>：  </p><ol><li>性能提高。  </li><li>逃避构造函数的约束。  </li></ol><p><strong>缺点</strong>：  </p><ol><li>配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。  </li><li>必须实现 Cloneable 接口。  </li></ol><p><strong>注意事项</strong>：<br>    与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现 Serializable 读取二进制流。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">/*** --------------原型模式  prototype---------------------  ***/</span><br><span class="line"></span><br><span class="line">class ProtoType</span><br><span class="line">&#123;</span><br><span class="line">    private $_name;</span><br><span class="line">    public function __construct($obj)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;_name = $obj;</span><br><span class="line">    &#125;</span><br><span class="line">    public function copy()</span><br><span class="line">    &#123;</span><br><span class="line">        return clone $this;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class TestProto&#123;&#125;</span><br><span class="line">$testProto = new ProtoType(new TestProto());</span><br><span class="line">print_r($testProto);</span><br><span class="line">$testProtoCopy = $testProto-&gt;copy();</span><br><span class="line">print_r($testProtoCopy);</span><br><span class="line"></span><br><span class="line">/*** -----------------------------------  ***/</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot;工厂模式&quot;&gt;&lt;/a&gt;工厂模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;定义一个创建对象的接口，让其子类决定去实例化哪一个工厂类&lt;br&gt;创建的过程是在子类中执行&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="设计模式" scheme="https://zhipenwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://zhipenwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>PHP设计模式（design patterns of PHP）</title>
    <link href="https://zhipenwang.github.io/2018/06/16/design_patterns/"/>
    <id>https://zhipenwang.github.io/2018/06/16/design_patterns/</id>
    <published>2018-06-16T09:21:01.000Z</published>
    <updated>2019-04-09T14:32:02.790Z</updated>
    
    <content type="html"><![CDATA[<h3 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h3><blockquote><p>以下包含java设计模式的思想（共25种设计模式）<br>三大类：创建型模式（creational patterns）、结构型模式（structural patterns）、行为型模式（behavioral patterns）  </p></blockquote><h3 id="创建型模式（creational-patterns）-："><a href="#创建型模式（creational-patterns）-：" class="headerlink" title="创建型模式（creational patterns）:："></a><strong>创建型模式（creational patterns）:</strong>：</h3><blockquote><ol><li>工厂模式 – factory pattern  </li><li>抽象工厂模式 – abstract factory pattern  </li><li>单例模式 – singleton pattern  </li><li>建造者模式 – builder pattern  </li><li>原型模式 – prototype pattern  </li></ol></blockquote><h3 id="结构型模式（structural-patterns）"><a href="#结构型模式（structural-patterns）" class="headerlink" title="结构型模式（structural patterns）:"></a><strong>结构型模式（structural patterns）:</strong></h3><blockquote><ol><li>适配器模式  –  adapter pattern</li><li>桥接模式    –  bridge pattern</li><li>过滤器模式/标准模式  –  filter pattern / criteria pattern</li><li>组合模式    –  composite pattern</li><li>装饰器模式  –  decorator pattern</li><li>外观模/门面模式  –  facade pattern</li><li>享元模式    –  flyweight pattern</li><li>代理模式    –  proxy pattern</li></ol></blockquote><h3 id="行为型模式（behavioral-patterns）："><a href="#行为型模式（behavioral-patterns）：" class="headerlink" title="行为型模式（behavioral patterns）："></a><strong>行为型模式（behavioral patterns）：</strong></h3><blockquote><ol><li>责任链模式  –  responsibility pattern</li><li>命令模式    –  command pattern</li><li>解释器模式  –  expression pattern</li><li>迭代器模式  –  iterator pattern</li><li>中介者模式  – mediator pattern</li><li>备忘录模式  –  memento pattern</li><li>观察者模式  –  observer pattern</li><li>状态模式    –  state pattern</li><li>空对象模式  –  null object pattern</li><li>策略模式   –  strategy pattern</li><li>模板模式   –  template pattern</li><li>访问者模式 –  visitor pattern</li></ol></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;23种设计模式&quot;&gt;&lt;a href=&quot;#23种设计模式&quot; class=&quot;headerlink&quot; title=&quot;23种设计模式&quot;&gt;&lt;/a&gt;23种设计模式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;以下包含java设计模式的思想（共25种设计模式）&lt;br&gt;三大类：创建型模
      
    
    </summary>
    
      <category term="设计模式" scheme="https://zhipenwang.github.io/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="https://zhipenwang.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>linux下关于服务端口的配置</title>
    <link href="https://zhipenwang.github.io/2018/06/10/server_port/"/>
    <id>https://zhipenwang.github.io/2018/06/10/server_port/</id>
    <published>2018-06-10T12:21:01.000Z</published>
    <updated>2019-04-09T14:32:22.725Z</updated>
    
    <content type="html"><![CDATA[<h3 id="端口服务"><a href="#端口服务" class="headerlink" title="端口服务"></a>端口服务</h3><blockquote><p>查看端口使用情况</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">netstat命令各个参数说明如下:</span><br><span class="line">    -t : 指明显示TCP端口</span><br><span class="line">    -u : 指明显示UDP端口</span><br><span class="line">    -l : 仅显示监听套接字(所谓套接字就是使应用程序能够读写与收发通讯协议(protocol)与资料的程序)</span><br><span class="line">    -p : 显示进程标识符和程序名称，每一个套接字/端口都属于一个程序。</span><br><span class="line">    -n : 不进行DNS轮询，显示IP(可以加速操作)</span><br><span class="line">netstat -ntlp   //查看当前所有tcp端口·</span><br><span class="line">netstat -ntulp |grep 80   //查看所有80端口使用情况·</span><br><span class="line">netstat -an | grep 3306   //查看所有3306端口使用情况·</span><br></pre></td></tr></table></figure><h3 id="端口映射配置"><a href="#端口映射配置" class="headerlink" title="端口映射配置"></a>端口映射配置</h3><blockquote><p>需求：<br>PC_A是 eth0: 172.18.10.212  内网；eth1: 219.239.xx.xx  外网</p><p>PC_B是 172.18.10.205  内网</p><p>A的8080端口映射到B的80端口</p></blockquote><h4 id="1-首先应该做的是"><a href="#1-首先应该做的是" class="headerlink" title="1. 首先应该做的是"></a>1. 首先应该做的是</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/etc/sysctl.conf配置文件:</span><br><span class="line">    net.ipv4.ip_forward = 1 默认是0.</span><br><span class="line">这样允许iptalbes FORWARD。</span><br></pre></td></tr></table></figure><h4 id="2-在-etc-rc-d-init-d目录下有iptables-文件，使用格式如下"><a href="#2-在-etc-rc-d-init-d目录下有iptables-文件，使用格式如下" class="headerlink" title="2. 在/etc/rc.d/init.d目录下有iptables 文件，使用格式如下"></a>2. 在/etc/rc.d/init.d目录下有iptables 文件，使用格式如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Usage: ./iptables &#123;start|stop|restart|condrestart|status|panic|save&#125;</span><br><span class="line">    相当与service iptables &#123;....&#125;</span><br><span class="line">    把iptables 服务停止，清除以前的规则，存盘</span><br><span class="line">    </span><br><span class="line">到/etc/rc.d/init.d目录下，运行</span><br><span class="line">    ./iptables stop</span><br><span class="line">    iptalbes -F</span><br><span class="line">    iptalbes -X</span><br><span class="line">    iptalbes -Z</span><br><span class="line">    ./iptables save</span><br></pre></td></tr></table></figure><h4 id="3-重新配置规则"><a href="#3-重新配置规则" class="headerlink" title="3. 重新配置规则"></a>3. 重新配置规则</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">iptables -t nat -A PREROUTING -d 219.239.xx.xx -p tcp --dport 8080 -j DNAT --to-destination 172.18.10.205:80</span><br><span class="line"></span><br><span class="line">iptables -t nat -A POSTROUTING -d 172.18.10.205 -p tcp --dport 80 -j SNAT --to 172.18.10.212</span><br><span class="line"></span><br><span class="line">iptables -A FORWARD -o eth0 -d 172.18.10.205 -p tcp --dport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line">iptables -A FORWARD -i eth0 -s 172.18.10.205 -p tcp --sport 80 -j ACCEPT</span><br><span class="line"></span><br><span class="line">DNAT SNAT 的请参考帮助，这里不再陈述。</span><br></pre></td></tr></table></figure><h4 id="4-新的规则存盘"><a href="#4-新的规则存盘" class="headerlink" title="4. 新的规则存盘"></a>4. 新的规则存盘</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> ./iptables save</span><br><span class="line"></span><br><span class="line">规则存盘后在/etc/sysconfig/iptables这个文件里面，若你对这个文件很熟悉</span><br><span class="line">直接修改这里的内容也等于命令行方式输入规则。</span><br></pre></td></tr></table></figure><h4 id="5-启动iptables-服务"><a href="#5-启动iptables-服务" class="headerlink" title="5. 启动iptables 服务"></a>5. 启动iptables 服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">./iptables start</span><br><span class="line">在/proc/net/ip_conntrack文件里有包的流向，如下面</span><br><span class="line"></span><br><span class="line">   tcp 6 53 TIME_WAIT src=221.122.59.2 dst=219.239.xx.xx sport=7958 dport=8080 packets=9 bytes=1753</span><br><span class="line">   </span><br><span class="line">   src=172.18.10.205 dst=172.18.10.212 sport=80 dport=7958 packets=9 bytes=5777 [ASSURED] use=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;端口服务&quot;&gt;&lt;a href=&quot;#端口服务&quot; class=&quot;headerlink&quot; title=&quot;端口服务&quot;&gt;&lt;/a&gt;端口服务&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;查看端口使用情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlig
      
    
    </summary>
    
      <category term="服务器" scheme="https://zhipenwang.github.io/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="运维" scheme="https://zhipenwang.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>jQuery的三种bind/One/Live/On事件绑定使用方法</title>
    <link href="https://zhipenwang.github.io/2018/05/20/js_5/"/>
    <id>https://zhipenwang.github.io/2018/05/20/js_5/</id>
    <published>2018-05-20T12:21:01.000Z</published>
    <updated>2019-04-09T14:32:35.759Z</updated>
    
    <content type="html"><![CDATA[<h3 id="on-events-selector-data-fn"><a href="#on-events-selector-data-fn" class="headerlink" title="on(events,[selector],[data],fn)"></a>on(events,[selector],[data],fn)</h3><blockquote><p>events:一个或多个用空格分隔的事件类型和可选的命名空间，如”click”或”keydown.myPlugin” 。<br>selector:一个选择器字符串用于过滤器的触发事件的选择器元素的后代。如果选择器为null或省略，当它到达选定的元素，事件总是触发。<br>data:当一个事件被触发时要传递event.data给事件处理函数。<br>fn:该事件被触发时执行的函数。 false 值也可以做一个函数的简写，返回false</p></blockquote><h4 id="替换bind"><a href="#替换bind" class="headerlink" title="替换bind()"></a>替换bind()</h4><blockquote><p>当第二个参数’selector’为null时，on()和bind()其实在用法上基本上没有任何区别了，所以我们可以认为on()只是比bind()多了一个可选的’selector’参数，所以on()可以非常方便的换掉bind()</p></blockquote><h4 id="替换live"><a href="#替换live" class="headerlink" title="替换live()"></a>替换live()</h4><blockquote><p>在1.4之前相信大家非常喜欢使用live(),因为它可以把事件绑定到当前以及以后添加的元素上面，当然在1.4之后delegate()也可以做类似的事情了。live()的原理很简单，它是通过document进行事件委派的，因此我们也可以使用on()通过将事件绑定到document来达到live()一样的效果。</p></blockquote><h4 id="live-写法"><a href="#live-写法" class="headerlink" title="live()写法"></a>live()写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#list li&apos;).live(&apos;click&apos;, &apos;#list li&apos;, </span><br><span class="line">function() &#123;</span><br><span class="line">//function code here.</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="on-写法"><a href="#on-写法" class="headerlink" title="on()写法"></a>on()写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(document).on(&apos;click&apos;, &apos;#list li&apos;, </span><br><span class="line">function() &#123;</span><br><span class="line"> //function code </span><br><span class="line">here.</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>这里的关键就是第二个参数’selector’在起作用了。它是一个过滤器的作用，只有被选中元素的后代元素才会触发事件。</p></blockquote><h4 id="替换delegate"><a href="#替换delegate" class="headerlink" title="替换delegate()"></a>替换delegate()</h4><blockquote><p>delegate()是1.4引入的，目的是通过祖先元素来代理委派后代元素的事件绑定问题，某种程度上和live()优点相似。只不过live()是通过document元素委派，而delegate则可以是任意的祖先节点。使用on()实现代理的写法和delegate()基本一致。</p></blockquote><h4 id="delegate-的写法"><a href="#delegate-的写法" class="headerlink" title="delegate()的写法"></a>delegate()的写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#list&apos;).delegate(&apos;li&apos;, &apos;click&apos;, </span><br><span class="line">function() &#123;</span><br><span class="line"> //function code here.</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="on-写法-1"><a href="#on-写法-1" class="headerlink" title="on()写法"></a>on()写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#list&apos;).on(&apos;click&apos;, &apos;li&apos;, function() </span><br><span class="line">&#123;</span><br><span class="line"> //function code here.</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>貌似第一个和第二个参数的顺序颠倒了一下，别的基本一样。</p></blockquote><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>jQuery推出on()的目的有2个，一是为了统一接口，二是为了提高性能，所以从现在开始用on()替换bind(),<br>live(),<br>delegate吧。尤其是不要再用live()了，因为它已经处于不推荐使用列表了，随时会被干掉。如果只绑定一次事件，那接着用one()吧，这个没有变化。<br>jQuery是 一款优秀的JavaScript框架,在旧版里主要用bind()方法，在新版里又多了两种One(),Live()<br>下面介绍这几种方法的使用：</p></blockquote><h4 id="1-bind-Unbind"><a href="#1-bind-Unbind" class="headerlink" title="1. bind/Unbind"></a>1. bind/Unbind</h4><blockquote><p>在jquery的事件模型中，有两个基本的事件绑 定函数，bind与unbind，这两个函数的含义就是匹配页面元素进行相关事件的处理。比如我们在JS中经常使用到的 onfocus，onblur，onmouseover，onmousedown等事件都可以作为bind的参数进行传递。<br>$(“#id”).bind(‘click’,function(){alert(‘tt!’)});<br>其中bind的第一个参数代表的含义是：事件类型(注意不需要加on)，function中的代码就是你要执行的逻辑 代码<br>多个事件绑定：bind还允许你绑定多个事件，事件名字之间用空格隔开，例如：<br>$(‘a’).bind(‘click mouseover’,function(){<br>在最新的jquery1.4版本中，对bind方法进行了改进，你可以在bind方法传入一个类JSON对象来一次绑定多 个事件处理函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;a&apos;).bind(&#123;</span><br><span class="line">click:function()&#123;</span><br><span class="line">alert(&apos;a&apos;);</span><br><span class="line">&#125;,</span><br><span class="line">mouseover:function()&#123;</span><br><span class="line">alert(&apos;a again!&apos;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>在function函数中，你还可以通过传递一个javaScript对 象给function方法，这个事件对象通常是可以省略的。<br>bind中还有一个参数data， 该参数一般情况下很少使用，通常为了解决在同一个方法中处理同一个变量时有很好的处理。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var productname=&quot;Sports Shoes&quot;;</span><br><span class="line">$(&apos;#Area&apos;).bind(&apos;click&apos;,function()&#123;</span><br><span class="line">alert(productname);</span><br><span class="line">&#125;);</span><br><span class="line">productname=&quot;necklace&quot;,</span><br><span class="line">$(&apos;#Area&apos;).bind(&apos;click&apos;,function()&#123;</span><br><span class="line">alert(productname);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>由于变量productname被重新赋值，所以输出的消息都是”necklace”,这里不了解可以去查阅下关于JavaScript的变量作用域,要 解决这个问题就必须使用到data参数，<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var productname=&quot;Sports Shoes&quot;;</span><br><span class="line">$(&apos;#Area&apos;).bind(&apos;click&apos;,&#123;pn:productname&#125;,function()&#123;</span><br><span class="line">alert(event.data.pn);</span><br><span class="line">&#125;);</span><br><span class="line">productname=&quot;necklace&quot;,</span><br><span class="line">$(&apos;#Area&apos;).bind(&apos;click&apos;,&#123;pn:productname&#125;,function()&#123;</span><br><span class="line">alert(event.data.pn);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h4 id="2-One"><a href="#2-One" class="headerlink" title="2. One"></a>2. One</h4><p>为每一个匹配元素的特定事件（像click）绑定一个一次性的事件处理函数。该方法与bind方法的参数一样，与bind方法的区别就是只对匹配元素的事 件处理执行一次，执行完之后，以后再也不会执行,当然重新发起web请求时它又会执行一次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;a&apos;).one(&apos;click&apos;,function()&#123;</span><br><span class="line">alert(&apos;a&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>单击页面上的a元素后，弹出消息，除非用户发起第二次请求，否则再次点击a元素不会弹出消息对话框。</p></blockquote><h4 id="3-live"><a href="#3-live" class="headerlink" title="3. live"></a>3. live</h4><p>该方法主要是能处理动态添加的元素，给那些后添加的元素也一样绑定事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;a&apos;).live(&apos;click,function()&#123;</span><br><span class="line">alert(&apos;show message!&apos;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><blockquote><p>然后如果我添加一个元素，<br>$(‘body’).appnend(‘Another Element’);<br>那么该元素也会被触发事件处理函数alert。<br>另外，jQuery还提供了一些绑定这些标准事件类型的简单方式，比如.click()用于简化.bind(‘click’)。<br>一共有以下这些事件名称：blur, focus, focusin, focusout, load, resize, scroll, unload, click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, error 等。<br>下面看下jQuery中绑定事件bind() on() live() one()的异同<br>jQuery中绑定事件的四种方法，他们可以同时绑定一个或多个事件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">bind()----------版本号小于3.0（在Jquery3.0中已经移除，相应unbind()也移除）</span><br><span class="line">live()----------版本号小于1.7（在Jquery1.7中已经移除，相应die()也移除）</span><br><span class="line">delegate()------版本号小于1.7（在Jquery1.7中已经移除）</span><br><span class="line">on()------------版本号大于1.7（在Jquery1.7中添加，相应off()也添加）</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>A：bind()事件的用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;title&gt;绑定事件&lt;/title&gt;</span><br><span class="line"> &lt;script src=&quot;js/jQuery1.11.1.js&quot; type=&quot;text/javascript&quot;&gt;&lt;/script&gt;</span><br><span class="line"> &lt;script&gt;</span><br><span class="line">  $(function () &#123;</span><br><span class="line">   $(&quot;p&quot;).bind(&#123;</span><br><span class="line">    &quot;mouseover&quot;: function () &#123;</span><br><span class="line">     $(&quot;p&quot;).css(&quot;background-color&quot;, &quot;red&quot;);</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;mouseout&quot;: function () &#123;</span><br><span class="line">     $(&quot;p&quot;).css(&quot;background-color&quot;, &quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line"> &lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"> &lt;p&gt;what are you doing?&lt;/p&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>第一个最大的区别就是：bind()的事件绑定是只对当前页面选中的元素有效。如果你想对动态创建的元素bind()事件，是没有办法达到效果的。<br>在后面的动态生成DOM元素绑定事件就要使用on();</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;on-events-selector-data-fn&quot;&gt;&lt;a href=&quot;#on-events-selector-data-fn&quot; class=&quot;headerlink&quot; title=&quot;on(events,[selector],[data],fn)&quot;&gt;&lt;/a&gt;on(
      
    
    </summary>
    
      <category term="jQuery" scheme="https://zhipenwang.github.io/categories/jQuery/"/>
    
    
      <category term="Web前端" scheme="https://zhipenwang.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js 比较几种遍历数组及对象的方式</title>
    <link href="https://zhipenwang.github.io/2018/05/13/js_4/"/>
    <id>https://zhipenwang.github.io/2018/05/13/js_4/</id>
    <published>2018-05-13T12:21:01.000Z</published>
    <updated>2019-04-09T14:32:47.203Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通常我们会用循环的方式来遍历数组。但是循环是 导致js 性能问题的原因之一。<br>一般我们会采用下几种方式来进行数组的遍历：</p></blockquote><h3 id="方式1：for-in-循环"><a href="#方式1：for-in-循环" class="headerlink" title="方式1：for in 循环"></a>方式1：for in 循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5];</span><br><span class="line">var obj = &#123; a : 1, b : 2, c : 3 &#125;;</span><br><span class="line">for( var item in arr|obj )&#123;</span><br><span class="line">        fn(item)&#123;</span><br><span class="line">                // do sth with arr[item];</span><br><span class="line">                //do sth wtih obj[item];</span><br><span class="line">        &#125;;</span><br><span class="line">&#125;</span><br><span class="line">这里的 item：</span><br><span class="line">        array 的索引值，对应于 arr 的下标值；</span><br><span class="line">        object 的 key 值，对应于 obj 的 a,b,c；</span><br></pre></td></tr></table></figure><h3 id="方式2：for-循环"><a href="#方式2：for-循环" class="headerlink" title="方式2：for 循环"></a>方式2：for 循环</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (var i=0; i&lt;arr.length; i++)&#123;</span><br><span class="line">        //do sth with arr[i];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这两种方法应该非常常见且使用很频繁。但实际上，这两种方法都存在性能问题。<br>在方式1中，for-in 需要分析出array 的每个属性，这个操作性能开销很大。用在 key 已知的数组上是非常不划算的。所以尽量不要用 for-in，除非你不清楚要处理哪些属性，例如 JSON 对象这样的情况。<br>在方式2中，循环每进行一次，就要检查一下数组长度。读取属性（数组长度）要比读局部变量慢，尤其是当 array 里存放的都是 DOM 元素，因为每次读取都会扫描一遍页面上的选择器相关元素，速度会大大降低。<br>所以这时候我们就有必要对方式2进行优化。</p></blockquote><h4 id="加速的"><a href="#加速的" class="headerlink" title="加速的"></a>加速的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5];</span><br><span class="line">var length =arr.length;</span><br><span class="line">for(var i=0; i&lt;length; i++)&#123;</span><br><span class="line">　　fn(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>现在只需要读取一次 array 的 length 属性，速度已经加快了。但是还能不能更快呢？<br>事实是，如果循环终止条件不进行比较运算，那么循环的速度还可以更快。</p></blockquote><h4 id="加速且优雅的"><a href="#加速且优雅的" class="headerlink" title="加速且优雅的"></a>加速且优雅的</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5];</span><br><span class="line">var i = arr.length;</span><br><span class="line">while(i--)&#123;</span><br><span class="line">        fn(arr[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="方式-3：forEach"><a href="#方式-3：forEach" class="headerlink" title="方式 3：forEach"></a>方式 3：forEach</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var arr = [1,2,3,4,5];</span><br><span class="line">arr.forEach(</span><br><span class="line">        fn(value,index)&#123;</span><br><span class="line">                //Do sth with value ;</span><br><span class="line">        &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>注意：<br>这里的 forEach回调中两个参数分别为 value，index，其位置刚好和 jQuery 的$.each 相反；<br>forEach 无法遍历对象；<br>IE不支持该方法；Firefox 和 chrome 支持；<br>forEach 无法使用 break，continue 跳出循环，且使用 return 是跳过本次循环；<br>可以添加第二个参数，为一个数组，回调中的 this 会指向这个数组，若没有添加，则是指向 window；</p></blockquote><p>关于跳出循环的几种方式：</p><ol><li>return ==》结束循环并中断函数执行；</li><li>break ==》结束循环函数继续执行；</li><li>continue ==》跳过本次循环；</li></ol><blockquote><p>for 循环中的变量 i，由于 ES5并没有块级作用域的存在，它在循环结束以后仍然存在于内存中，所以建议使用函数自执行的方式来避免。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;通常我们会用循环的方式来遍历数组。但是循环是 导致js 性能问题的原因之一。&lt;br&gt;一般我们会采用下几种方式来进行数组的遍历：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;方式1：for-in-循环&quot;&gt;&lt;a href=&quot;#方式1：for-i
      
    
    </summary>
    
      <category term="jQuery" scheme="https://zhipenwang.github.io/categories/jQuery/"/>
    
    
      <category term="Web前端" scheme="https://zhipenwang.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>js与jquery关于验证页面元素存在的方法及不同之处</title>
    <link href="https://zhipenwang.github.io/2018/05/05/js_3/"/>
    <id>https://zhipenwang.github.io/2018/05/05/js_3/</id>
    <published>2018-05-05T12:21:01.000Z</published>
    <updated>2019-04-09T14:32:56.349Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>在javascript中我们可以通过以下代码判断页面中是否存在某个元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">obj = document.getElementById(&quot;someID&quot;);</span><br><span class="line">if (obj) &#123;</span><br><span class="line">     obj.innerText(&quot;Extsts&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么在jQuery，我们如何判断页面元素存在与否呢？如果参照上面的传统Javascript的写法，我们第一个想到的办法会是：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ($(&quot;#someID&quot;))&#123;</span><br><span class="line">      $(&quot;#someID&quot;).text(&quot;hi&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可是这么写是不对的！因为<strong>jQuery对象永远都有返回值</strong>，所以$(“someID”) 总是TRUE ，IF语句没有起到任何判断作用。<br>我们知道，jQuery选择器获取页面的element时，无论element是否存在，都会返回一个对象。例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var my_element = $(&quot;#element_Id&quot; );</span><br></pre></td></tr></table></figure></p><p>此时的变量my_element就是一个对象，既然是一个对象，这个对象就具有length的属性，因此，用以下代码可以判断元素（对象）是否存在</p><p>正确的写法应该是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if ( $(&quot;#someID&quot;).length &gt; 0 ) &#123;</span><br><span class="line">     $(&quot;#someID&quot;).text(&quot;Extsts&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>注意 ：判断某个页面元素存在与否在jQuery实际上是没有必要的，jQuery本身会忽略 对一个不存在的元素进行操作，并且不会报错, 所以这么写代码会存在bug。<br>假如不存在someID这个元素，我们照样可以执行一下代码，并不会报错。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var value=$(&apos;#someID&apos;).length;</span><br><span class="line">if(value&gt;0)&#123;</span><br><span class="line">     alert(&apos;Extsts&apos;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">      alert(&apos;not Extsts&apos;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>JS判断变量是否为空或是否null<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/** </span><br><span class="line">* 判断是否null </span><br><span class="line">* @param data </span><br><span class="line">*/ </span><br><span class="line">function isNull(data)&#123; </span><br><span class="line">return (data == &quot;&quot; || data == undefined || data == null) ? &quot;暂无&quot; : data; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;在javascript中我们可以通过以下代码判断页面中是否存在某个元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;sp
      
    
    </summary>
    
      <category term="jQuery" scheme="https://zhipenwang.github.io/categories/jQuery/"/>
    
    
      <category term="Web前端" scheme="https://zhipenwang.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>jQuery对于父子、同级元素的处理方式</title>
    <link href="https://zhipenwang.github.io/2018/05/01/js_2/"/>
    <id>https://zhipenwang.github.io/2018/05/01/js_2/</id>
    <published>2018-05-01T12:21:01.000Z</published>
    <updated>2019-04-09T14:33:07.058Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上一节介绍了一些关于表单处理的元素内容<br>本节介绍jquery对于父、同级、子元素的处理方式。</p></blockquote><h3 id="父窗口与子窗口处理"><a href="#父窗口与子窗口处理" class="headerlink" title="父窗口与子窗口处理"></a>父窗口与子窗口处理</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">父窗口：</span><br><span class="line">&lt;input name=&apos;img&apos; type=&apos;text&apos; /&gt;</span><br><span class="line">&lt;img id=&apos;img&apos; src=&apos;&apos; /&gt;</span><br><span class="line">layer.open(&#123;</span><br><span class="line">    type: 2,</span><br><span class="line">    title: &apos;title&apos;,</span><br><span class="line">    area: [&apos;500px&apos;, &apos;350px&apos;],</span><br><span class="line">    content &apos;son.html&apos;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">子窗口：</span><br><span class="line">var img_url;</span><br><span class="line">parent.$(&quot;input[name=&apos;img&apos;]&quot;).val(img_url);</span><br><span class="line">parent.$(&apos;#img&apos;).attr(&apos;src&apos;, img_url);</span><br><span class="line">parent.layer.closeAll();</span><br></pre></td></tr></table></figure><h2 id="jQuery获取父元素节点、子元素节点及兄弟元素节点的方法"><a href="#jQuery获取父元素节点、子元素节点及兄弟元素节点的方法" class="headerlink" title="jQuery获取父元素节点、子元素节点及兄弟元素节点的方法"></a>jQuery获取父元素节点、子元素节点及兄弟元素节点的方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;par&quot;&gt;</span><br><span class="line">&lt;li id=&quot;firstli&quot;&gt;</span><br><span class="line">&lt;h3 class=&quot;title&quot;&gt;one&lt;/h3&gt;</span><br><span class="line">&lt;ul class=&quot;par&quot;&gt;</span><br><span class="line">&lt;li id=&quot;one&quot;&gt;one_first&lt;/li&gt;</span><br><span class="line">&lt;li&gt;two_first&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br><span class="line">&lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><h3 id="jquery父节点的获取"><a href="#jquery父节点的获取" class="headerlink" title="jquery父节点的获取"></a>jquery父节点的获取</h3><h4 id="使用parent-获取父节点"><a href="#使用parent-获取父节点" class="headerlink" title="使用parent()获取父节点"></a>使用parent()获取父节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#one&quot;).parent().parent();  // 获取 id为firstli的li标签节点</span><br><span class="line">$(&quot;#one&quot;).parent().parent(&apos;.par&apos;); // 获取最上面 class为par的ul节点</span><br><span class="line">$(&quot;#one&quot;).parent(&apos;.par&apos;); // 获取 id为one的上一级class为par的ul节点</span><br></pre></td></tr></table></figure><h4 id="使用parents-和closest-获取父节点"><a href="#使用parents-和closest-获取父节点" class="headerlink" title="使用parents()和closest()获取父节点"></a>使用parents()和closest()获取父节点</h4><blockquote><ol><li>closest从当前元素开始匹配寻找，逐级向上寻找直到找到匹配的元素后就停止了，返回0或者1个元素</li><li>parents从父元素开始匹配寻找，一直向上查找直到找到根元素，将所有元素放到另外一个集合中，返回0、1或者更多元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(&quot;#one&quot;).parnets(&apos;.par&apos;);  // 找出所有class为par的父节点/父父节点</span><br><span class="line">$(&quot;one&quot;).closest(&apos;.par&apos;);  // 获取最近一层的父级class为par的ul节点</span><br></pre></td></tr></table></figure></li></ol></blockquote><h3 id="jquery兄弟节点的获取"><a href="#jquery兄弟节点的获取" class="headerlink" title="jquery兄弟节点的获取"></a>jquery兄弟节点的获取</h3><h4 id="parent父节点再find子节点"><a href="#parent父节点再find子节点" class="headerlink" title="parent父节点再find子节点"></a>parent父节点再find子节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.title&apos;).parent().find(&apos;ul&apos;);  // 找到class为title的兄弟节点ul，即class为par的ul</span><br></pre></td></tr></table></figure><h4 id="sibingls-获取兄弟节点"><a href="#sibingls-获取兄弟节点" class="headerlink" title="sibingls()获取兄弟节点"></a>sibingls()获取兄弟节点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.title&apos;).sibings(&apos;ul&apos;);  // 找到class为title的兄弟节点ul，即class为par的ul</span><br></pre></td></tr></table></figure><h3 id="jquery子节点的获取"><a href="#jquery子节点的获取" class="headerlink" title="jquery子节点的获取"></a>jquery子节点的获取</h3><h4 id="first方式"><a href="#first方式" class="headerlink" title=":first方式"></a>:first方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;.par:first-child&apos;);  // 获取id为firstli的li节点</span><br></pre></td></tr></table></figure><h4 id="选择器获取"><a href="#选择器获取" class="headerlink" title="选择器获取"></a>选择器获取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#firstli h3.title&apos;);  // 获取class为title的h3节点</span><br></pre></td></tr></table></figure><h4 id="find-函数"><a href="#find-函数" class="headerlink" title="find()函数"></a>find()函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#firstli&apos;).find(&apos;h3&apos;);  // 获取class为title的h3节点</span><br></pre></td></tr></table></figure><h4 id="children-函数"><a href="#children-函数" class="headerlink" title="children()函数"></a>children()函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(&apos;#firstli&apos;).children(&apos;h3.title&apos;);   // 获取class为title的h3节点</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;上一节介绍了一些关于表单处理的元素内容&lt;br&gt;本节介绍jquery对于父、同级、子元素的处理方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;父窗口与子窗口处理&quot;&gt;&lt;a href=&quot;#父窗口与子窗口处理&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="jQuery" scheme="https://zhipenwang.github.io/categories/jQuery/"/>
    
    
      <category term="Web前端" scheme="https://zhipenwang.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>jQuery获取表单值及属性内容</title>
    <link href="https://zhipenwang.github.io/2018/04/21/js_1/"/>
    <id>https://zhipenwang.github.io/2018/04/21/js_1/</id>
    <published>2018-04-21T12:21:01.000Z</published>
    <updated>2019-04-09T14:02:03.294Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>平时前端在处理表单数据的时候，总是需要通过表单属性或者值来进行一些用户看不到的处理。<br>比如：联动选项的处理、数据的验证过滤等。<br>本节针对不同的表单内容进行了不同的获取方式。</p></blockquote><h3 id="获取当前表单元素的值"><a href="#获取当前表单元素的值" class="headerlink" title="获取当前表单元素的值"></a>获取当前表单元素的值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;name&quot; onblur=&quot;getValue(this)&quot;&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function getValue(obj)&#123;</span><br><span class="line">    // 获取值</span><br><span class="line">$(obj).val();</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="获取表单元素值及属性内容"><a href="#获取表单元素值及属性内容" class="headerlink" title="获取表单元素值及属性内容"></a>获取表单元素值及属性内容</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;text&quot; name=&quot;name&quot;&gt;</span><br><span class="line">&lt;select name=&quot;sex&quot; data-type=&quot;sex&quot; field=&quot;sex&quot;&gt;</span><br><span class="line">&lt;option value=&quot;man&quot;&gt;男&lt;/option&gt;</span><br><span class="line">&lt;option value=&quot;woman&quot;&gt;女&lt;/option&gt;</span><br><span class="line">&lt;/select&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">function do_submit(obj)&#123;</span><br><span class="line">    // 获取值</span><br><span class="line">var name = $(&quot;input[name=&apos;name&apos;]&quot;).val();</span><br><span class="line">var sex_value = $(&quot;select[name=&apos;sex&apos;]&quot;).val();</span><br><span class="line">// 获取特定文本值的数据</span><br><span class="line">    $(&apos;select[name=&quot;data[select]&quot;] [value=&quot;man&quot;]&apos;).val();</span><br><span class="line">// 获取文本值</span><br><span class="line">var sex_text = $(&quot;select[name=&apos;sex&apos;]&quot;).find(&apos;option:selected&apos;).text();</span><br><span class="line">// 获取data-type属性值</span><br><span class="line">var sex_type = $(&quot;select[name=&apos;sex&apos;]&quot;).data(&apos;type&apos;);</span><br><span class="line">var sex_type = $(&quot;select[name=&apos;sex&apos;]&quot;).attr(&apos;data-type&apos;);</span><br><span class="line">// 获取field属性值</span><br><span class="line">var sex_field = $(&quot;select[name=&apos;sex&apos;]&quot;).attr(&apos;field&apos;);</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="获取多个多行文本框内容值"><a href="#获取多个多行文本框内容值" class="headerlink" title="获取多个多行文本框内容值"></a>获取多个多行文本框内容值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea name=&quot;formula[]&quot; class=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;textarea name=&quot;formula[]&quot; class=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;textarea name=&quot;formula[]&quot; class=&quot;text&quot;&gt;&lt;/textarea&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">    var formula = new Array();</span><br><span class="line">$(&quot;.text,textarea&quot;).each(function(e)&#123;</span><br><span class="line">    formula.push($(this).val());</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;平时前端在处理表单数据的时候，总是需要通过表单属性或者值来进行一些用户看不到的处理。&lt;br&gt;比如：联动选项的处理、数据的验证过滤等。&lt;br&gt;本节针对不同的表单内容进行了不同的获取方式。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;获取当前表
      
    
    </summary>
    
      <category term="jQuery" scheme="https://zhipenwang.github.io/categories/jQuery/"/>
    
    
      <category term="Web前端" scheme="https://zhipenwang.github.io/tags/Web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>更换电脑后的博客续写</title>
    <link href="https://zhipenwang.github.io/2018/04/04/change_do_hexo/"/>
    <id>https://zhipenwang.github.io/2018/04/04/change_do_hexo/</id>
    <published>2018-04-04T05:21:01.000Z</published>
    <updated>2019-04-09T14:02:03.292Z</updated>
    
    <content type="html"><![CDATA[<p>当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：</p><ol><li>使用git clone <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:zhipenwang/zhipenwang.github.io.git拷贝仓库（默认分支为master）；</li><li><p>在本地新拷贝的<a href="http://zhipenwang.github.io文件夹下通过Git" target="_blank" rel="noopener">http://zhipenwang.github.io文件夹下通过Git</a> bash依次执行下列指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p> （记得，不需要hexo init这条指令）。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当重装电脑之后，或者想在其他电脑上修改博客，可以使用下列步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用git clone &lt;a href=&quot;mailto:git@github.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;git@github.com&lt;/a
      
    
    </summary>
    
      <category term="搭建博客" scheme="https://zhipenwang.github.io/categories/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    
    
      <category term="hexo" scheme="https://zhipenwang.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>git 误删分支恢复方法</title>
    <link href="https://zhipenwang.github.io/2018/03/28/git_recover_branch/"/>
    <id>https://zhipenwang.github.io/2018/03/28/git_recover_branch/</id>
    <published>2018-03-28T10:21:01.000Z</published>
    <updated>2019-04-09T14:02:03.293Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在使用git的时候，有时候会因为人为因素导致分支（commit）被删除，可以使用如下步骤进行恢复。</li></ul><h3 id="首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复"><a href="#首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复" class="headerlink" title="首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复"></a>首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复</h3><p>1、创建分支hexo<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch hexo</span><br></pre></td></tr></table></figure></p><p>2、查看分支列表<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line">  * master</span><br><span class="line">hexo</span><br></pre></td></tr></table></figure></p><p>3、切换到hexo分支，随便修改一下东西后commit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git checkout hexo</span><br><span class="line"></span><br><span class="line">echo &apos;hexo&apos; &gt; test.txt</span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line">git commit -m &apos;add test.txt&apos;</span><br></pre></td></tr></table></figure></p><p>4、删除分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -D hexo</span><br></pre></td></tr></table></figure></p><p>5、查看分支列表，hexo分支已经不存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -a</span><br><span class="line">  * master</span><br></pre></td></tr></table></figure></p><h2 id="恢复步骤如下"><a href="#恢复步骤如下" class="headerlink" title="恢复步骤如下"></a>恢复步骤如下</h2><p>1、使用git log -g 找回之前提交的commit<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">commit 3eac14d05bc1264cda54a7c21f04c3892f32406a</span><br><span class="line">Reflog: HEAD@&#123;1&#125; (fdipzone &lt;fdipzone@sina.com&gt;)</span><br><span class="line">Reflog message: commit: add test.txt</span><br><span class="line">Author: fdipzone &lt;fdipzone@sina.com&gt;</span><br><span class="line">Date:   Sun Jan 31 22:26:33 2016 +0800</span><br><span class="line"></span><br><span class="line">    add test.txt</span><br></pre></td></tr></table></figure></p><p>2、使用 git branch recover_branch[新分支] commit_id 命令，用这个commit创建一个分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git branch recover_branch_hexo 3eac14d05bc1264cda54a7c21f04c3892f32406a</span><br><span class="line"></span><br><span class="line">git branch -a</span><br><span class="line">* master</span><br><span class="line">  recover_branch_hexo</span><br></pre></td></tr></table></figure></p><p>这个时候，可以看到 recover_branch_hexo分支已经创建了。<br>3、切换到recover_branch_hexo分支，检查文件是否存在<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout recover_branch_hexo</span><br><span class="line">ls -lt</span><br></pre></td></tr></table></figure></p><p>这样就可以恢复误删除的分支了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在使用git的时候，有时候会因为人为因素导致分支（commit）被删除，可以使用如下步骤进行恢复。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;首先使用以下步骤创建一个新分支，修改一些文件后删除，以便进行恢复&quot;&gt;&lt;a href=&quot;#首先使用以下步骤创建一个新分支，修改
      
    
    </summary>
    
      <category term="GIT" scheme="https://zhipenwang.github.io/categories/GIT/"/>
    
    
      <category term="GIT" scheme="https://zhipenwang.github.io/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>git 配置ssh密钥</title>
    <link href="https://zhipenwang.github.io/2018/03/27/ssh_key/"/>
    <id>https://zhipenwang.github.io/2018/03/27/ssh_key/</id>
    <published>2018-03-27T11:21:01.000Z</published>
    <updated>2019-04-09T14:02:03.296Z</updated>
    
    <content type="html"><![CDATA[<p>在github帐号注册好之后，将项目clone到本地，加入git bash命令。<br>1、输入cd ~/.ssh 回车，查看是否有ssh key密钥，有了就备份</p><p><center><br><img src="/img/ssh_dir.png" alt=""><br></center><br>2、创建ssh key，输入下面命令回车，之后会让你输入github的账号密码，如图<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;youremail@youremail.com&quot;</span><br><span class="line"></span><br><span class="line">Creates a new ssh key using the provided email # Generating public/private rsa key pair.</span><br><span class="line"></span><br><span class="line">Enter file in which to save the key (/home/you/.ssh/id_rsa):</span><br></pre></td></tr></table></figure></p><p>直接按Enter就行。然后，会提示你输入密码，如下(建议输一个，安全一点，当然不输也行，应该不会有人闲的无聊冒充你去修改你的代码)：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure></p><p>完了之后，大概是这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in /home/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com</span><br></pre></td></tr></table></figure></p><p><center><br><img src="/img/ssh_gen.png" alt=""><br></center><br>3、找到本地id_rsa.pub文件，复制里面的内容，这就是ssh密钥，可以通过pwd命令来查看当前文件位置</p><p><center><br><img src="/img/ssh_pwd.png" alt=""><br></center></p><p><center><br><img src="/img/ssh_key_dir.png" alt=""><br></center><br>4、登录github，在个人中心的setting中，找到 SSH and GPG keys</p><p><center><br><img src="/img/github_ssh.png" alt=""><br></center><br>点击 new ssh key，将复制的ssh密钥粘贴进 “key”文本框，title随便输入即可。<br>点击add key。<br>添加ssh密钥到远程仓库完成。<br>5、验证ssh是否可用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p><p>返回如下表示正常可用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi xxx! You&apos;ve successfully authenticated, but GitHub does not # provide shell access.</span><br></pre></td></tr></table></figure></p><p>6、此时查看你的远程分支地址是否是ssh协议的<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git remote -v</span><br><span class="line">origin https://github.com/zhipenwang/zhipenwang.git (fetch)</span><br><span class="line">origin https://github.com/zhipenwang/zhipenwang.git (push)</span><br></pre></td></tr></table></figure></p><p>如果是https协议，修改为ssh协议：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin git@github.com:zhipenwang/zhipenwang.git</span><br></pre></td></tr></table></figure></p><p>这个时候就可以进行push了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在github帐号注册好之后，将项目clone到本地，加入git bash命令。&lt;br&gt;1、输入cd ~/.ssh 回车，查看是否有ssh key密钥，有了就备份&lt;/p&gt;
&lt;p&gt;&lt;center&gt;&lt;br&gt;&lt;img src=&quot;/img/ssh_dir.png&quot; alt=&quot;&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="GIT" scheme="https://zhipenwang.github.io/categories/GIT/"/>
    
    
      <category term="GIT" scheme="https://zhipenwang.github.io/tags/GIT/"/>
    
  </entry>
  
  <entry>
    <title>初始算法</title>
    <link href="https://zhipenwang.github.io/2018/02/13/algorithm/"/>
    <id>https://zhipenwang.github.io/2018/02/13/algorithm/</id>
    <published>2018-02-13T09:21:01.000Z</published>
    <updated>2019-04-09T14:02:03.291Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>算法：程序的灵魂</p></blockquote><blockquote><p>算法：algorithm</p></blockquote><p>算法五大特征：</p><ul><li>1、有穷性：保证执行有限步骤后结束</li><li>2、确切性：每一步骤都有确切的意义</li><li>3、输入：每个算法都有零个或多个输入，以刻画运算对象的初始情况，所谓零个输入是指算法本身定除了初始条件</li><li>4、输出：每个算法都有一个或多个输出，显示对输入数据加工后的结果。没有输出的算法是毫无意义的</li><li>5、可行性：在原则上算法能够精确地运行，进行优先次运算后即可完成的一种运算。</li></ul><blockquote><p>算法的逻辑、流程。<br>计算机中的算法，分为两大类：数值运算算法（求解数值）、非数值运算算法（事务管理领域）。<br>算法是计算机处理信息的本质，因为计算机程序本质上是一个算法，告诉计算机确切的步骤来执行一个指定的任务。</p></blockquote><blockquote><p>著名计算机科学家沃思公式：数据结构+算法=程序。</p></blockquote><p>一个程序应当采用结构化程序设计方法进行程序设计，并且用某一种计算机语言来表示，因此，下面的公式更加贴切：</p><blockquote><p>程序=算法+数据结构+程序设计方法+语言和环境</p></blockquote><h3 id="流程图来表示算法："><a href="#流程图来表示算法：" class="headerlink" title="流程图来表示算法："></a>流程图来表示算法：</h3><p><img src="/img/screenshot_1513006093776.png" alt=""></p><blockquote><p>流程图的结构：顺序结构、选择结构、循环结构</p></blockquote><h3 id="N-S图"><a href="#N-S图" class="headerlink" title="N-S图"></a>N-S图</h3><blockquote><p>N-S流程图：代表计算机的算法。由一些特定意义的图像、流程线及简要的文字说明构成，能够清晰明确的表示程序的运行过程。（整个程序写在一个大框图内，由若干个小的基础框图构成，简称N-S图）</p></blockquote><p><img src="/img/screenshot_1513006588835.png" alt=""></p><h3 id="计算机语言的算法表示"><a href="#计算机语言的算法表示" class="headerlink" title="计算机语言的算法表示"></a>计算机语言的算法表示</h3><p>计算机语言表示算法的时候，必须严格遵循使用语言的语法规则。</p><h3 id="学好算法的秘诀"><a href="#学好算法的秘诀" class="headerlink" title="学好算法的秘诀"></a>学好算法的秘诀</h3><p>1、学的深入，基础扎实<br>2、恒心、演练、举一反三<br>3、语言之争的时代更要学会坚持</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;算法：程序的灵魂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;算法：algorithm&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;算法五大特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1、有穷性：保证执行有限步骤后结束&lt;/li&gt;
&lt;li
      
    
    </summary>
    
      <category term="算法与结构" scheme="https://zhipenwang.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E7%BB%93%E6%9E%84/"/>
    
    
      <category term="算法" scheme="https://zhipenwang.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="结构" scheme="https://zhipenwang.github.io/tags/%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
</feed>
